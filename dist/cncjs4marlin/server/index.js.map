{"version":3,"file":"index.js","sources":["webpack:///webpack/bootstrap","webpack:///./config/settings.js","webpack:///./constants/index.js","webpack:///./services/configstore/index.js","webpack:///./lib/urljoin.js","webpack:///external \"lodash/get\"","webpack:///./api/api.version.js","webpack:///./api/api.state.js","webpack:///./api/api.gcode.js","webpack:///./api/api.controllers.js","webpack:///./api/api.watch.js","webpack:///./api/paging.js","webpack:///./api/api.commands.js","webpack:///./api/api.events.js","webpack:///./api/api.machines.js","webpack:///./api/api.macros.js","webpack:///./api/api.mdi.js","webpack:///./api/api.users.js","webpack:///./api/api.file.js","webpack:///./api/index.js","webpack:///external \"lodash/find\"","webpack:///./lib/logger.js","webpack:///./lib/ImmutableStore.js","webpack:///./store/index.js","webpack:///external \"ensure-array\"","webpack:///external \"chalk\"","webpack:///external \"lodash/set\"","webpack:///external \"lodash/has\"","webpack:///external \"lodash/includes\"","webpack:///external \"lodash/isPlainObject\"","webpack:///external \"events\"","webpack:///external \"uuid\"","webpack:///./lib/ensure-type.js","webpack:///external \"path\"","webpack:///external \"lodash/isEqual\"","webpack:///external \"fs\"","webpack:///./services/taskrunner/TaskRunner.js","webpack:///./services/taskrunner/index.js","webpack:///external \"lodash/noop\"","webpack:///./services/monitor/FSMonitor.js","webpack:///./services/monitor/index.js","webpack:///external \"bcrypt-nodejs\"","webpack:///external \"lodash/intersection\"","webpack:///external \"lodash/castArray\"","webpack:///external \"gcode-parser\"","webpack:///external \"os\"","webpack:///external \"lodash/map\"","webpack:///external \"lodash/trim\"","webpack:///external \"lodash/isEmpty\"","webpack:///external \"lodash/merge\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"serialport\"","webpack:///./access-control.js","webpack:///external \"winston\"","webpack:///external \"url\"","webpack:///external \"express\"","webpack:///external \"lodash/unset\"","webpack:///external \"lodash/throttle\"","webpack:///external \"gcode-toolpath\"","webpack:///external \"esprima\"","webpack:///./lib/EventTrigger.js","webpack:///./lib/SerialConnection.js","webpack:///./lib/Feeder.js","webpack:///./lib/Sender.js","webpack:///./lib/Workflow.js","webpack:///./lib/delay.js","webpack:///./lib/ensure-positive-number.js","webpack:///./lib/evaluate-expression.js","webpack:///./lib/evaluate-assignment-expression.js","webpack:///./lib/translate-expression.js","webpack:///./lib/outlineService.js","webpack:///./controllers/constants.js","webpack:///./lib/decimal-places.js","webpack:///./controllers/Grbl/GrblLineParserResultStatus.js","webpack:///./controllers/Grbl/GrblLineParserResultOk.js","webpack:///./controllers/Grbl/GrblLineParserResultError.js","webpack:///./controllers/Grbl/GrblLineParserResultAlarm.js","webpack:///./controllers/Grbl/constants.js","webpack:///./controllers/Grbl/GrblLineParserResultParserState.js","webpack:///./controllers/Grbl/GrblLineParserResultParameters.js","webpack:///./controllers/Grbl/GrblLineParserResultHelp.js","webpack:///./controllers/Grbl/GrblLineParserResultVersion.js","webpack:///./controllers/Grbl/GrblLineParserResultOption.js","webpack:///./controllers/Grbl/GrblLineParserResultEcho.js","webpack:///./controllers/Grbl/GrblLineParserResultFeedback.js","webpack:///./controllers/Grbl/GrblLineParserResultSettings.js","webpack:///./controllers/Grbl/GrblLineParserResultStartup.js","webpack:///./controllers/Grbl/GrblLineParser.js","webpack:///./controllers/Grbl/GrblRunner.js","webpack:///../app/constants/index.js","webpack:///./lib/Firmware/Flashing/firmwareflashing.js","webpack:///./lib/Firmware/Profiles/EepromFiles/DefaultGrblSettings.txt","webpack:///./lib/Firmware/Profiles/EepromFiles/Sienci Long Mill12X12.txt","webpack:///./lib/Firmware/Profiles/EepromFiles/Sienci Long Mill12X30.txt","webpack:///./lib/Firmware/Profiles/EepromFiles/Sienci Long Mill30X30.txt","webpack:///./lib/Firmware/Profiles/EepromFiles/Sienci Mill One.txt","webpack:///./lib/Firmware/Profiles/EepromFiles/Sienci Mill OneV3.txt","webpack:///./lib/Firmware/Profiles/ApplyFirmwareProfile.js","webpack:///./lib/homing.js","webpack:///./controllers/Grbl/GrblController.js","webpack:///./controllers/Marlin/MarlinLineParserResultEcho.js","webpack:///./controllers/Marlin/MarlinLineParserResultError.js","webpack:///./controllers/Marlin/MarlinLineParserResultFirmware.js","webpack:///./controllers/Marlin/MarlinLineParserResultOk.js","webpack:///./controllers/Marlin/MarlinLineParserResultPosition.js","webpack:///./controllers/Marlin/MarlinLineParserResultStart.js","webpack:///./controllers/Marlin/MarlinLineParser.js","webpack:///./controllers/Marlin/MarlinRunner.js","webpack:///./controllers/Marlin/interpret.js","webpack:///./controllers/Marlin/constants.js","webpack:///./controllers/Marlin/MarlinController.js","webpack:///./controllers/index.js","webpack:///./services/cncengine/CNCEngine.js","webpack:///./services/cncengine/index.js","webpack:///./config/settings.base.js","webpack:///external \"body-parser\"","webpack:///external \"multer\"","webpack:///external \"express-session\"","webpack:///external \"i18next\"","webpack:///external \"morgan\"","webpack:///external \"i18next-express-middleware\"","webpack:///external \"util\"","webpack:///external \"lodash/without\"","webpack:///external \"lodash/each\"","webpack:///external \"dns\"","webpack:///external \"expand-tilde\"","webpack:///external \"http-proxy\"","webpack:///external \"lodash/escapeRegExp\"","webpack:///external \"lodash/size\"","webpack:///external \"lodash/trimEnd\"","webpack:///external \"lodash/uniqWith\"","webpack:///external \"webappengine\"","webpack:///C:/GitHub/gsender/build.config.js","webpack:///./config/settings.development.js","webpack:///./config/settings.production.js","webpack:///./app.js","webpack:///external \"compression\"","webpack:///external \"cookie-parser\"","webpack:///external \"connect-restreamer\"","webpack:///external \"consolidate\"","webpack:///external \"express-jwt\"","webpack:///external \"i18next-node-fs-backend\"","webpack:///external \"method-override\"","webpack:///external \"serve-favicon\"","webpack:///external \"serve-static\"","webpack:///external \"session-file-store\"","webpack:///external \"rimraf\"","webpack:///external \"registry-url\"","webpack:///external \"registry-auth-token\"","webpack:///external \"superagent\"","webpack:///external \"deep-keys\"","webpack:///external \"lodash/extend\"","webpack:///external \"minimatch\"","webpack:///external \"watch\"","webpack:///external \"spawn-default-shell\"","webpack:///external \"shortid\"","webpack:///external \"lodash/some\"","webpack:///external \"socket.io\"","webpack:///external \"escodegen\"","webpack:///external \"hull.js\"","webpack:///external \"lodash/uniqBy\"","webpack:///external \"three\"","webpack:///external \"lodash/compact\"","webpack:///external \"avrgirl-arduino\"","webpack:///./lib/Firmware/Flashing/grblsept15.hex","webpack:///external \"lodash/uniq\"","webpack:///external \"range_check\"","webpack:///./lib/middleware/errclient.js","webpack:///./lib/middleware/errlog.js","webpack:///./lib/middleware/errnotfound.js","webpack:///./lib/middleware/errserver.js","webpack:///./index.js","webpack:///external \"errorhandler\"","webpack:///external \"hogan.js\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 102);\n","\nimport merge from 'lodash/merge';\nimport base from './settings.base';\nimport development from './settings.development';\nimport production from './settings.production';\n\nconst env = process.env.NODE_ENV || 'production'; // Ensure production environment if empty\nconst settings = {};\n\nif (env === 'development') {\n    merge(settings, base, development, { env: env });\n} else {\n    merge(settings, base, production, { env: env });\n}\n\nexport default settings;\n","\n// Error Codes\nexport const ERR_BAD_REQUEST = 400;\nexport const ERR_UNAUTHORIZED = 401;\nexport const ERR_FORBIDDEN = 403;\nexport const ERR_NOT_FOUND = 404;\nexport const ERR_METHOD_NOT_ALLOWED = 405;\nexport const ERR_NOT_ACCEPTABLE = 406;\nexport const ERR_CONFLICT = 409;\nexport const ERR_LENGTH_REQUIRED = 411;\nexport const ERR_PRECONDITION_FAILED = 412;\nexport const ERR_PAYLOAD_TOO_LARGE = 413;\nexport const ERR_INTERNAL_SERVER_ERROR = 500;\n","\nimport events from 'events';\nimport fs from 'fs';\nimport _ from 'lodash';\nimport chalk from 'chalk';\nimport logger from '../../lib/logger';\n\nconst log = logger('service:configstore');\n\nconst defaultState = { // default state\n    checkForUpdates: true,\n    controller: {\n        exception: {\n            ignoreErrors: false\n        }\n    }\n};\n\nclass ConfigStore extends events.EventEmitter {\n    file = '';\n\n    config = {};\n\n    watcher = null;\n\n    // @param {string} file The path to a filename.\n    // @return {object} The config object.\n    load(file) {\n        this.file = file;\n        this.reload();\n        this.emit('load', this.config); // emit load event\n\n        if (this.watcher) {\n            // Stop watching for changes\n            this.watcher.close();\n            this.watcher = null;\n        }\n\n        try {\n            if (!fs.existsSync(this.file)) {\n                const content = JSON.stringify({});\n                fs.writeFileSync(this.file, content, 'utf8');\n            }\n\n            this.watcher = fs.watch(this.file, (eventType, filename) => {\n                log.debug(`fs.watch(eventType='${eventType}', filename='${filename}')`);\n\n                if (eventType === 'change') {\n                    log.debug(`\"${filename}\" has been changed`);\n                    const ok = this.reload();\n                    ok && this.emit('change', this.config); // it is ok to emit change event\n                }\n            });\n        } catch (err) {\n            log.error(err);\n            this.emit('error', err); // emit error event\n        }\n\n        return this.config;\n    }\n\n    reload() {\n        try {\n            if (fs.existsSync(this.file)) {\n                this.config = JSON.parse(fs.readFileSync(this.file, 'utf8'));\n            }\n        } catch (err) {\n            err.fileName = this.file;\n            log.error(`Unable to load data from ${chalk.yellow(JSON.stringify(this.file))}: err=${err}`);\n            this.emit('error', err); // emit error event\n            return false;\n        }\n\n        if (!_.isPlainObject(this.config)) {\n            log.error(`\"${this.file}\" does not contain valid JSON`);\n            this.config = {};\n        }\n\n        this.config.state = {\n            ...defaultState,\n            ...this.config.state\n        };\n\n        return true;\n    }\n\n    sync() {\n        try {\n            const content = JSON.stringify(this.config, null, 4);\n            fs.writeFileSync(this.file, content, 'utf8');\n        } catch (err) {\n            log.error(`Unable to write data to \"${this.file}\"`);\n            this.emit('error', err); // emit error event\n            return false;\n        }\n\n        return true;\n    }\n\n    has(key) {\n        return _.has(this.config, key);\n    }\n\n    get(key, defaultValue) {\n        if (!this.config) {\n            this.reload();\n        }\n\n        return (key !== undefined)\n            ? _.get(this.config, key, defaultValue)\n            : this.config;\n    }\n\n    set(key, value, options) {\n        const { silent = false } = { ...options };\n\n        if (key === undefined) {\n            return;\n        }\n\n        const ok = this.reload(); // reload before making changes\n        _.set(this.config, key, value);\n        ok && !silent && this.sync(); // it is ok to write\n    }\n\n    unset(key) {\n        if (key === undefined) {\n            return;\n        }\n\n        const ok = this.reload(); // reload before making changes\n        _.unset(this.config, key);\n        ok && this.sync(); // it is ok to write\n    }\n}\n\nconst configstore = new ConfigStore();\n\nexport default configstore;\n","\nconst normalize = (str) => str\n    .replace(/[\\/]+/g, '/')\n    .replace(/\\/\\?/g, '?')\n    .replace(/\\/#/g, '#')\n    .replace(/:\\//g, '://');\n\nconst urljoin = function(...args) {\n    let joined = [].slice.call(args, 0).join('/');\n    return normalize(joined);\n};\n\nexport default urljoin;\n","module.exports = require(\"lodash/get\");","\nimport url from 'url';\nimport registryUrl from 'registry-url';\nimport registryAuthToken from 'registry-auth-token';\nimport request from 'superagent';\nimport {\n    ERR_INTERNAL_SERVER_ERROR\n} from '../constants';\n\nconst pkgName = 'cncjs4marlin';\n\nexport const getLatestVersion = (req, res) => {\n    const scope = pkgName.split('/')[0];\n    const regUrl = registryUrl(scope);\n    const pkgUrl = url.resolve(regUrl, encodeURIComponent(pkgName).replace(/^%40/, '@'));\n    const authInfo = registryAuthToken(regUrl);\n    const headers = {};\n\n    if (authInfo) {\n        headers.Authorization = `${authInfo.type} ${authInfo.token}`;\n    }\n\n    request\n        .get(pkgUrl)\n        .set(headers)\n        .end((err, _res) => {\n            if (err) {\n                res.status(ERR_INTERNAL_SERVER_ERROR).send({\n                    msg: `Failed to connect to ${pkgUrl}: code=${err.code}`\n                });\n                return;\n            }\n\n            const { body: data = {} } = { ..._res };\n            data.time = data.time || {};\n            data['dist-tags'] = data['dist-tags'] || {};\n            data.versions = data.versions || {};\n\n            const time = data.time[latest];\n            const latest = data['dist-tags'].latest;\n            const {\n                name,\n                version,\n                description,\n                homepage\n            } = { ...data.versions[latest] };\n\n            res.send({ time, name, version, description, homepage });\n        });\n};\n","\nimport deepKeys from 'deep-keys';\nimport _ from 'lodash';\nimport config from '../services/configstore';\nimport {\n    ERR_NOT_FOUND\n} from '../constants';\n\nexport const get = (req, res) => {\n    const query = req.query || {};\n\n    if (!query.key) {\n        res.send(config.get('state'));\n        return;\n    }\n\n    const key = `state.${query.key}`;\n    if (!config.has(key)) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    const value = config.get(key);\n    res.send(value);\n};\n\nexport const unset = (req, res) => {\n    const query = req.query || {};\n\n    if (!query.key) {\n        res.send(config.get('state'));\n        return;\n    }\n\n    const key = `state.${query.key}`;\n    if (!config.has(key)) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    config.unset(key);\n    res.send({ err: false });\n};\n\nexport const set = (req, res) => {\n    const query = req.query || {};\n    const data = { ...req.body };\n\n    if (query.key) {\n        config.set(`state.${query.key}`, data);\n        res.send({ err: false });\n        return;\n    }\n\n    deepKeys(data).forEach((key) => {\n        const oldValue = config.get(`state.${key}`);\n        const newValue = _.get(data, key);\n\n        if (typeof oldValue === 'object' && typeof newValue === 'object') {\n            config.set(`state.${key}`, {\n                ...oldValue,\n                ...newValue\n            });\n        } else {\n            config.set(`state.${key}`, newValue);\n        }\n    });\n\n    res.send({ err: false });\n};\n","\nimport get from 'lodash/get';\nimport store from '../store';\nimport {\n    ERR_BAD_REQUEST,\n    ERR_INTERNAL_SERVER_ERROR\n} from '../constants';\n\nexport const upload = (req, res) => {\n    const { port, name, gcode, context = {} } = req.body;\n\n    if (!port) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'No port specified'\n        });\n        return;\n    }\n    if (!gcode) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'Empty G-code'\n        });\n        return;\n    }\n\n    const controller = store.get('controllers[\"' + port + '\"]');\n    if (!controller) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'Controller not found'\n        });\n        return;\n    }\n\n    // Load G-code\n    controller.command('gcode:load', name, gcode, context, (err, state) => {\n        if (err) {\n            res.status(ERR_INTERNAL_SERVER_ERROR).send({\n                msg: 'Failed to load G-code: ' + err\n            });\n            return;\n        }\n        res.send({ ...state });\n    });\n};\n\nexport const fetch = (req, res) => {\n    const port = req.query.port;\n\n    if (!port) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'No port specified'\n        });\n        return;\n    }\n\n    const controller = store.get('controllers[\"' + port + '\"]');\n    if (!controller) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'Controller not found'\n        });\n        return;\n    }\n\n    const { sender } = controller;\n\n    res.send({\n        ...sender.toJSON(),\n        data: sender.state.gcode\n    });\n};\n\nexport const download = (req, res) => {\n    const port = get(req, 'query.port') || get(req, 'body.port');\n\n    if (!port) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'No port specified'\n        });\n        return;\n    }\n\n    const controller = store.get('controllers[\"' + port + '\"]');\n    if (!controller) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'Controller not found'\n        });\n        return;\n    }\n\n    const { sender } = controller;\n\n    const filename = sender.state.name || 'noname.txt';\n    const content = sender.state.gcode || '';\n\n    res.setHeader('Content-Disposition', 'attachment; filename=' + encodeURIComponent(filename));\n    res.setHeader('Connection', 'close');\n\n    res.write(content);\n    res.end();\n};\n","\nimport store from '../store';\n\nexport const get = (req, res) => {\n    const list = [];\n\n    const controllers = store.get('controllers');\n    Object.keys(controllers).forEach((port) => {\n        const controller = controllers[port];\n        if (controller) {\n            list.push(controller.status);\n        }\n    });\n\n    res.send(list);\n};\n","\nimport monitor from '../services/monitor';\nimport {\n    ERR_NOT_FOUND,\n    ERR_INTERNAL_SERVER_ERROR\n} from '../constants';\n\nexport const getFiles = (req, res) => {\n    const path = req.body.path || req.query.path || '';\n    const files = monitor.getFiles(path);\n\n    res.send({ path: path, files: files });\n};\n\nexport const readFile = (req, res) => {\n    const file = req.body.file || req.query.file || '';\n\n    monitor.readFile(file, (err, data) => {\n        if (err) {\n            if (err.code === 'ENOENT') {\n                res.status(ERR_NOT_FOUND).send({\n                    msg: 'File not found'\n                });\n            } else {\n                res.status(ERR_INTERNAL_SERVER_ERROR).send({\n                    msg: 'Failed reading file'\n                });\n            }\n            return;\n        }\n\n        res.send({ file: file, data: data });\n    });\n};\n","\nexport const getPagingRange = ({ page = 1, pageLength = 10, totalRecords = 0 }) => {\n    page = Number(page);\n    pageLength = Number(pageLength);\n\n    if (!page || page < 1) {\n        page = 1;\n    }\n    if (!pageLength || pageLength < 1) {\n        pageLength = 10;\n    }\n    if (((page - 1) * pageLength) >= totalRecords) {\n        page = Math.ceil(totalRecords / pageLength);\n    }\n\n    const begin = (page - 1) * pageLength;\n    const end = Math.min((page - 1) * pageLength + pageLength, totalRecords);\n\n    return [begin, end];\n};\n","\nimport find from 'lodash/find';\nimport castArray from 'lodash/castArray';\nimport isPlainObject from 'lodash/isPlainObject';\nimport uuid from 'uuid';\nimport settings from '../config/settings';\nimport logger from '../lib/logger';\nimport taskRunner from '../services/taskrunner';\nimport config from '../services/configstore';\nimport { getPagingRange } from './paging';\nimport {\n    ERR_BAD_REQUEST,\n    ERR_NOT_FOUND,\n    ERR_INTERNAL_SERVER_ERROR\n} from '../constants';\n\nconst log = logger('api:commands');\nconst CONFIG_KEY = 'commands';\n\nconst getSanitizedRecords = () => {\n    const records = castArray(config.get(CONFIG_KEY, []));\n\n    let shouldUpdate = false;\n    for (let i = 0; i < records.length; ++i) {\n        if (!isPlainObject(records[i])) {\n            records[i] = {};\n        }\n\n        const record = records[i];\n\n        if (!record.id) {\n            record.id = uuid.v4();\n            shouldUpdate = true;\n        }\n\n        // Defaults to true\n        if (record.enabled === undefined) {\n            record.enabled = true;\n        }\n\n        // Alias command\n        if (!record.commands) {\n            record.commands = record.command || '';\n            delete record.command;\n        }\n    }\n\n    if (shouldUpdate) {\n        log.debug(`update sanitized records: ${JSON.stringify(records)}`);\n\n        // Pass `{ silent changes }` will suppress the change event\n        config.set(CONFIG_KEY, records, { silent: true });\n    }\n\n    return records;\n};\n\nexport const fetch = (req, res) => {\n    const records = getSanitizedRecords();\n    const paging = !!req.query.paging;\n\n    if (paging) {\n        const { page = 1, pageLength = 10 } = req.query;\n        const totalRecords = records.length;\n        const [begin, end] = getPagingRange({ page, pageLength, totalRecords });\n        const pagedRecords = records.slice(begin, end);\n\n        res.send({\n            pagination: {\n                page: Number(page),\n                pageLength: Number(pageLength),\n                totalRecords: Number(totalRecords)\n            },\n            records: pagedRecords.map(record => {\n                const { id, mtime, enabled, title, commands } = { ...record };\n                return { id, mtime, enabled, title, commands };\n            })\n        });\n    } else {\n        res.send({\n            records: records.map(record => {\n                const { id, mtime, enabled, title, commands } = { ...record };\n                return { id, mtime, enabled, title, commands };\n            })\n        });\n    }\n};\n\nexport const create = (req, res) => {\n    const {\n        enabled = true,\n        title = '',\n        commands = ''\n    } = { ...req.body };\n\n    if (!title) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"title\" parameter must not be empty'\n        });\n        return;\n    }\n\n    if (!commands) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"commands\" parameter must not be empty'\n        });\n        return;\n    }\n\n    try {\n        const records = getSanitizedRecords();\n        const record = {\n            id: uuid.v4(),\n            mtime: new Date().getTime(),\n            enabled: !!enabled,\n            title: title,\n            commands: commands\n        };\n\n        records.push(record);\n        config.set(CONFIG_KEY, records);\n\n        res.send({ id: record.id, mtime: record.mtime });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.rcfile)\n        });\n    }\n};\n\nexport const read = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    const { mtime, enabled, title, commands } = { ...record };\n    res.send({ id, mtime, enabled, title, commands });\n};\n\nexport const update = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    const {\n        enabled = record.enabled,\n        title = record.title,\n        commands = record.commands\n    } = { ...req.body };\n\n    // Skip validation for \"enabled\", \"title\", and \"commands\"\n\n    try {\n        record.mtime = new Date().getTime();\n        record.enabled = Boolean(enabled);\n        record.title = String(title || '');\n        record.commands = String(commands || '');\n\n        // Remove deprecated parameter\n        if (record.command !== undefined) {\n            delete record.command;\n        }\n\n        config.set(CONFIG_KEY, records);\n\n        res.send({ id: record.id, mtime: record.mtime });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.rcfile)\n        });\n    }\n};\n\nexport const __delete = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    try {\n        const filteredRecords = records.filter(record => {\n            return record.id !== id;\n        });\n        config.set(CONFIG_KEY, filteredRecords);\n\n        res.send({ id: record.id });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.rcfile)\n        });\n    }\n};\n\nexport const run = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    const title = record.title;\n    const commands = record.commands;\n\n    log.info(`run: title=\"${title}\", commands=\"${commands}\"`);\n\n    const taskId = taskRunner.run(commands, title);\n\n    res.send({ taskId: taskId });\n};\n","\nimport find from 'lodash/find';\nimport castArray from 'lodash/castArray';\nimport isPlainObject from 'lodash/isPlainObject';\nimport uuid from 'uuid';\nimport settings from '../config/settings';\nimport logger from '../lib/logger';\nimport config from '../services/configstore';\nimport { getPagingRange } from './paging';\nimport {\n    ERR_BAD_REQUEST,\n    ERR_NOT_FOUND,\n    ERR_INTERNAL_SERVER_ERROR\n} from '../constants';\n\nconst log = logger('api:events');\nconst CONFIG_KEY = 'events';\n\nconst getSanitizedRecords = () => {\n    const records = castArray(config.get(CONFIG_KEY, []));\n\n    let shouldUpdate = false;\n    for (let i = 0; i < records.length; ++i) {\n        if (!isPlainObject(records[i])) {\n            records[i] = {};\n        }\n\n        const record = records[i];\n\n        if (!record.id) {\n            record.id = uuid.v4();\n            shouldUpdate = true;\n        }\n\n        // Defaults to true\n        if (record.enabled === undefined) {\n            record.enabled = true;\n        }\n\n        // Alias command\n        if (!record.commands) {\n            record.commands = record.command || '';\n            delete record.command;\n        }\n    }\n\n    if (shouldUpdate) {\n        log.debug(`update sanitized records: ${JSON.stringify(records)}`);\n\n        // Pass `{ silent changes }` will suppress the change event\n        config.set(CONFIG_KEY, records, { silent: true });\n    }\n\n    return records;\n};\n\nexport const fetch = (req, res) => {\n    const records = getSanitizedRecords();\n    const paging = !!req.query.paging;\n\n    if (paging) {\n        const { page = 1, pageLength = 10 } = req.query;\n        const totalRecords = records.length;\n        const [begin, end] = getPagingRange({ page, pageLength, totalRecords });\n        const pagedRecords = records.slice(begin, end);\n\n        res.send({\n            pagination: {\n                page: Number(page),\n                pageLength: Number(pageLength),\n                totalRecords: Number(totalRecords)\n            },\n            records: pagedRecords.map(record => {\n                const { id, mtime, enabled, event, trigger, commands } = { ...record };\n                return { id, mtime, enabled, event, trigger, commands };\n            })\n        });\n    } else {\n        res.send({\n            records: records.map(record => {\n                const { id, mtime, enabled, event, trigger, commands } = { ...record };\n                return { id, mtime, enabled, event, trigger, commands };\n            })\n        });\n    }\n};\n\nexport const create = (req, res) => {\n    const {\n        enabled = true,\n        event = '',\n        trigger = '',\n        commands = ''\n    } = { ...req.body };\n\n    if (!event) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"event\" parameter must not be empty'\n        });\n        return;\n    }\n\n    if (!trigger) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"trigger\" parameter must not be empty'\n        });\n        return;\n    }\n\n    if (!commands) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"commands\" parameter must not be empty'\n        });\n        return;\n    }\n\n    try {\n        const records = getSanitizedRecords();\n        const record = {\n            id: uuid.v4(),\n            mtime: new Date().getTime(),\n            enabled: !!enabled,\n            event: event,\n            trigger: trigger,\n            commands: commands\n        };\n\n        records.push(record);\n        config.set(CONFIG_KEY, records);\n\n        res.send({ id: record.id, mtime: record.mtime });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.rcfile)\n        });\n    }\n};\n\nexport const read = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    const { mtime, enabled, event, trigger, commands } = { ...record };\n    res.send({ id, mtime, enabled, event, trigger, commands });\n};\n\nexport const update = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    const {\n        enabled = record.enabled,\n        event = record.event,\n        trigger = record.trigger,\n        commands = record.commands\n    } = { ...req.body };\n\n    // Skip validation for \"enabled\", \"event\", \"trigger\", and \"commands\"\n\n    try {\n        record.mtime = new Date().getTime();\n        record.enabled = Boolean(enabled);\n        record.event = String(event || '');\n        record.trigger = String(trigger || '');\n        record.commands = String(commands || '');\n\n        // Remove deprecated parameter\n        if (record.command !== undefined) {\n            delete record.command;\n        }\n\n        config.set(CONFIG_KEY, records);\n\n        res.send({ id: record.id, mtime: record.mtime });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.rcfile)\n        });\n    }\n};\n\nexport const __delete = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    try {\n        const filteredRecords = records.filter(record => {\n            return record.id !== id;\n        });\n        config.set(CONFIG_KEY, filteredRecords);\n\n        res.send({ id: record.id });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.rcfile)\n        });\n    }\n};\n","\nimport _get from 'lodash/get';\nimport _set from 'lodash/set';\nimport _find from 'lodash/find';\nimport _castArray from 'lodash/castArray';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport uuid from 'uuid';\nimport settings from '../config/settings';\nimport { ensureNumber, ensureString } from '../lib/ensure-type';\nimport logger from '../lib/logger';\nimport config from '../services/configstore';\nimport { getPagingRange } from './paging';\nimport {\n    ERR_BAD_REQUEST,\n    ERR_NOT_FOUND,\n    ERR_INTERNAL_SERVER_ERROR\n} from '../constants';\n\nconst log = logger('api:machines');\nconst CONFIG_KEY = 'machines';\n\nconst getSanitizedRecords = () => {\n    const records = _castArray(config.get(CONFIG_KEY, []));\n\n    let shouldUpdate = false;\n    for (let i = 0; i < records.length; ++i) {\n        if (!_isPlainObject(records[i])) {\n            records[i] = {};\n        }\n\n        const record = records[i];\n\n        if (!record.id) {\n            record.id = uuid.v4();\n            shouldUpdate = true;\n        }\n    }\n\n    if (shouldUpdate) {\n        log.debug(`update sanitized records: ${JSON.stringify(records)}`);\n\n        // Pass `{ silent changes }` will suppress the change event\n        config.set(CONFIG_KEY, records, { silent: true });\n    }\n\n    return records;\n};\n\nconst ensureMachineProfile = (payload) => {\n    const { id, name, limits } = { ...payload };\n    const { xmin = 0, xmax = 0, ymin = 0, ymax = 0, zmin = 0, zmax = 0 } = { ...limits };\n\n    return {\n        id,\n        name: ensureString(name),\n        limits: {\n            xmin: ensureNumber(xmin) || 0,\n            xmax: ensureNumber(xmax) || 0,\n            ymin: ensureNumber(ymin) || 0,\n            ymax: ensureNumber(ymax) || 0,\n            zmin: ensureNumber(zmin) || 0,\n            zmax: ensureNumber(zmax) || 0,\n        }\n    };\n};\n\nexport const fetch = (req, res) => {\n    const records = getSanitizedRecords();\n    const paging = !!req.query.paging;\n\n    if (paging) {\n        const { page = 1, pageLength = 10 } = req.query;\n        const totalRecords = records.length;\n        const [begin, end] = getPagingRange({ page, pageLength, totalRecords });\n        const pagedRecords = records.slice(begin, end);\n\n        res.send({\n            pagination: {\n                page: Number(page),\n                pageLength: Number(pageLength),\n                totalRecords: Number(totalRecords)\n            },\n            records: pagedRecords.map(record => ensureMachineProfile(record))\n        });\n    } else {\n        res.send({\n            records: records.map(record => ensureMachineProfile(record))\n        });\n    }\n};\n\nexport const create = (req, res) => {\n    const record = { ...req.body };\n\n    if (!record.name) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"name\" parameter must not be empty'\n        });\n        return;\n    }\n\n    try {\n        const records = getSanitizedRecords();\n        records.push(ensureMachineProfile(record));\n        config.set(CONFIG_KEY, records);\n\n        res.send({ id: record.id });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.rcfile)\n        });\n    }\n};\n\nexport const read = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = _find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    res.send(ensureMachineProfile(record));\n};\n\nexport const update = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = _find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    try {\n        const nextRecord = req.body;\n\n        [ // [key, ensureType]\n            ['name', ensureString],\n            ['limits.xmin', ensureNumber],\n            ['limits.xmax', ensureNumber],\n            ['limits.ymin', ensureNumber],\n            ['limits.ymax', ensureNumber],\n            ['limits.zmin', ensureNumber],\n            ['limits.zmax', ensureNumber],\n        ].forEach(it => {\n            const [key, ensureType] = it;\n            const defaultValue = _get(record, key);\n            const value = _get(nextRecord, key, defaultValue);\n\n            _set(record, key, (typeof ensureType === 'function') ? ensureType(value) : value);\n        });\n\n        config.set(CONFIG_KEY, records);\n\n        res.send({ id: record.id });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.rcfile)\n        });\n    }\n};\n\nexport const __delete = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = _find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    try {\n        const filteredRecords = records.filter(record => {\n            return record.id !== id;\n        });\n        config.set(CONFIG_KEY, filteredRecords);\n\n        res.send({ id: record.id });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.rcfile)\n        });\n    }\n};\n","\nimport find from 'lodash/find';\nimport castArray from 'lodash/castArray';\nimport isPlainObject from 'lodash/isPlainObject';\nimport uuid from 'uuid';\nimport settings from '../config/settings';\nimport logger from '../lib/logger';\nimport config from '../services/configstore';\nimport { getPagingRange } from './paging';\nimport {\n    ERR_BAD_REQUEST,\n    ERR_NOT_FOUND,\n    ERR_INTERNAL_SERVER_ERROR\n} from '../constants';\n\nconst log = logger('api:macros');\nconst CONFIG_KEY = 'macros';\n\nconst getSanitizedRecords = () => {\n    const records = castArray(config.get(CONFIG_KEY, []));\n\n    let shouldUpdate = false;\n    for (let i = 0; i < records.length; ++i) {\n        if (!isPlainObject(records[i])) {\n            records[i] = {};\n        }\n\n        const record = records[i];\n\n        if (!record.id) {\n            record.id = uuid.v4();\n            shouldUpdate = true;\n        }\n\n        // Handle migration, should only run once\n        if (!record.description) {\n            record.description = '';\n            shouldUpdate = true;\n        }\n        if (!record.column) {\n            record.column = (i % 2 === 0) ? 'column1' : 'column2';\n            shouldUpdate = true;\n        }\n    }\n\n    if (shouldUpdate) {\n        log.debug(`update sanitized records: ${JSON.stringify(records)}`);\n\n        // Pass `{ silent changes }` will suppress the change event\n        config.set(CONFIG_KEY, records, { silent: true });\n    }\n\n    return records;\n};\n\nexport const fetch = (req, res) => {\n    const records = getSanitizedRecords();\n    const paging = !!req.query.paging;\n\n    if (paging) {\n        const { page = 1, pageLength = 10 } = req.query;\n        const totalRecords = records.length;\n        const [begin, end] = getPagingRange({ page, pageLength, totalRecords });\n        const pagedRecords = records.slice(begin, end);\n\n        res.send({\n            pagination: {\n                page: Number(page),\n                pageLength: Number(pageLength),\n                totalRecords: Number(totalRecords)\n            },\n            records: pagedRecords.map(record => {\n                const { id, mtime, name, content, description, column, rowIndex } = { ...record };\n                return { id, mtime, name, content, description, column, rowIndex };\n            })\n        });\n    } else {\n        res.send({\n            records: records.map(record => {\n                const { id, mtime, name, content, description, column, rowIndex } = { ...record };\n                return { id, mtime, name, content, description, column, rowIndex };\n            })\n        });\n    }\n};\n\nexport const create = (req, res) => {\n    const { name, content, description = '' } = { ...req.body };\n\n    if (!name) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"name\" parameter must not be empty'\n        });\n        return;\n    }\n\n    if (!content) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"content\" parameter must not be empty'\n        });\n        return;\n    }\n\n    try {\n        const records = getSanitizedRecords();\n        let column, rowIndex;\n\n        const column1Length = records\n            .filter(macro => macro.column === 'column1')\n            .sort((a, b) => a.rowIndex - b.rowIndex)\n            .length;\n\n        const column2Length = records\n            .filter(macro => macro.column === 'column2')\n            .sort((a, b) => a.rowIndex - b.rowIndex)\n            .length;\n\n        if (column2Length >= column1Length) {\n            column = 'column1';\n            rowIndex = column1Length;\n        } else {\n            column = 'column2';\n            rowIndex = column2Length;\n        }\n\n        const record = {\n            id: uuid.v4(),\n            mtime: new Date().getTime(),\n            name,\n            content,\n            description,\n            column,\n            rowIndex,\n        };\n\n        records.push(record);\n        config.set(CONFIG_KEY, records);\n\n        res.send({ err: null });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.rcfile)\n        });\n    }\n};\n\nexport const read = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    const { mtime, name, content, description, column, rowIndex } = { ...record };\n    res.send({ id, mtime, name, content, description, column, rowIndex });\n};\n\nexport const update = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    const {\n        name = record.name,\n        content = record.content,\n        description = record.description,\n        column = record.column,\n        rowIndex = record.rowIndex\n    } = { ...req.body };\n\n    /*\n    if (!name) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"name\" parameter must not be empty'\n        });\n        return;\n    }\n\n    if (!content) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"content\" parameter must not be empty'\n        });\n        return;\n    }\n    */\n\n    try {\n        record.mtime = new Date().getTime();\n        record.name = String(name || '');\n        record.content = String(content || '');\n        record.description = String(description || '');\n        record.column = String(column || '');\n        record.rowIndex = Number(rowIndex || 0);\n\n        config.set(CONFIG_KEY, records);\n\n        res.send({ err: null });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.rcfile)\n        });\n    }\n};\n\nexport const __delete = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    try {\n        const filteredRecords = records.filter(record => {\n            return record.id !== id;\n        });\n        config.set(CONFIG_KEY, filteredRecords);\n\n        res.send({ err: null });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.rcfile)\n        });\n    }\n};\n","\nimport ensureArray from 'ensure-array';\nimport find from 'lodash/find';\nimport isPlainObject from 'lodash/isPlainObject';\nimport uuid from 'uuid';\nimport settings from '../config/settings';\nimport logger from '../lib/logger';\nimport config from '../services/configstore';\nimport { getPagingRange } from './paging';\nimport {\n    ERR_BAD_REQUEST,\n    ERR_NOT_FOUND,\n    ERR_INTERNAL_SERVER_ERROR\n} from '../constants';\n\nconst log = logger('api:mdi');\nconst CONFIG_KEY = 'mdi';\n\nconst getSanitizedRecords = () => {\n    const records = ensureArray(config.get(CONFIG_KEY, []));\n\n    let shouldUpdate = false;\n    for (let i = 0; i < records.length; ++i) {\n        if (!isPlainObject(records[i])) {\n            records[i] = {};\n        }\n\n        const record = records[i];\n\n        if (!record.id) {\n            record.id = uuid.v4();\n            shouldUpdate = true;\n        }\n    }\n\n    if (shouldUpdate) {\n        log.debug(`update sanitized records: ${JSON.stringify(records)}`);\n\n        // Pass `{ silent changes }` will suppress the change event\n        config.set(CONFIG_KEY, records, { silent: true });\n    }\n\n    return records;\n};\n\nexport const fetch = (req, res) => {\n    const records = getSanitizedRecords();\n    const paging = !!req.query.paging;\n\n    if (paging) {\n        const { page = 1, pageLength = 10 } = req.query;\n        const totalRecords = records.length;\n        const [begin, end] = getPagingRange({ page, pageLength, totalRecords });\n        const pagedRecords = records.slice(begin, end);\n\n        res.send({\n            pagination: {\n                page: Number(page),\n                pageLength: Number(pageLength),\n                totalRecords: Number(totalRecords)\n            },\n            records: pagedRecords.map(record => {\n                const { id, name, command, grid = {} } = { ...record };\n                return { id, name, command, grid };\n            })\n        });\n    } else {\n        res.send({\n            records: records.map(record => {\n                const { id, name, command, grid = {} } = { ...record };\n                return { id, name, command, grid };\n            })\n        });\n    }\n};\n\nexport const create = (req, res) => {\n    const { name, command, grid = {} } = { ...req.body };\n\n    if (!name) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"name\" parameter must not be empty'\n        });\n        return;\n    }\n\n    if (!command) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"command\" parameter must not be empty'\n        });\n        return;\n    }\n\n    try {\n        const records = getSanitizedRecords();\n        const record = {\n            id: uuid.v4(),\n            name: name,\n            command: command,\n            grid: grid\n        };\n\n        records.push(record);\n        config.set(CONFIG_KEY, records);\n\n        res.send({ err: null });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.cncrc)\n        });\n    }\n};\n\nexport const read = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    const { name, command, grid = {} } = { ...record };\n    res.send({ id, name, command, grid });\n};\n\nexport const update = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    const {\n        name = record.name,\n        command = record.command,\n        grid = record.grid\n    } = { ...req.body };\n\n    /*\n    if (!name) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"name\" parameter must not be empty'\n        });\n        return;\n    }\n\n    if (!command) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"command\" parameter must not be empty'\n        });\n        return;\n    }\n    */\n\n    try {\n        record.name = String(name || '');\n        record.command = String(command || '');\n        record.grid = isPlainObject(grid) ? grid : {};\n\n        config.set(CONFIG_KEY, records);\n\n        res.send({ err: null });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.cncrc)\n        });\n    }\n};\n\nexport const bulkUpdate = (req, res) => {\n    const { records } = { ...req.body };\n\n    if (!records) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"records\" parameter must not be empty'\n        });\n        return;\n    }\n\n    const filteredRecords = ensureArray(records)\n        .filter(record => isPlainObject(record));\n\n    for (let i = 0; i < filteredRecords.length; ++i) {\n        const record = filteredRecords[i];\n        const { id, name, command, grid = {} } = { ...record };\n\n        if (!id) {\n            record.id = uuid.v4();\n        }\n        record.name = String(name || '');\n        record.command = String(command || '');\n        record.grid = isPlainObject(grid) ? grid : {};\n    }\n\n    try {\n        config.set(CONFIG_KEY, filteredRecords);\n        res.send({ err: null });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.cncrc)\n        });\n    }\n};\n\nexport const __delete = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    try {\n        const filteredRecords = records.filter(record => {\n            return record.id !== id;\n        });\n        config.set(CONFIG_KEY, filteredRecords);\n\n        res.send({ err: null });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.cncrc)\n        });\n    }\n};\n","\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt-nodejs';\nimport ensureArray from 'ensure-array';\nimport isPlainObject from 'lodash/isPlainObject';\nimport find from 'lodash/find';\nimport some from 'lodash/some';\nimport uuid from 'uuid';\nimport settings from '../config/settings';\nimport logger from '../lib/logger';\nimport config from '../services/configstore';\nimport { getPagingRange } from './paging';\nimport {\n    ERR_BAD_REQUEST,\n    ERR_UNAUTHORIZED,\n    ERR_NOT_FOUND,\n    ERR_CONFLICT,\n    ERR_PRECONDITION_FAILED,\n    ERR_INTERNAL_SERVER_ERROR\n} from '../constants';\n\nconst log = logger('api:users');\nconst CONFIG_KEY = 'users';\n\n// Generate access token\n// https://github.com/auth0/node-jsonwebtoken#jwtsignpayload-secretorprivatekey-options-callback\n// Note. Do not use password and other sensitive fields in the payload\nconst generateAccessToken = (payload, secret = settings.secret) => {\n    const token = jwt.sign(payload, secret, {\n        expiresIn: settings.accessTokenLifetime\n    });\n\n    return token;\n};\n\nconst getSanitizedRecords = () => {\n    const records = ensureArray(config.get(CONFIG_KEY, []));\n\n    let shouldUpdate = false;\n    for (let i = 0; i < records.length; ++i) {\n        if (!isPlainObject(records[i])) {\n            records[i] = {};\n        }\n\n        const record = records[i];\n\n        if (!record.id) {\n            record.id = uuid.v4();\n            shouldUpdate = true;\n        }\n\n        // Defaults to true\n        if (record.enabled === undefined) {\n            record.enabled = true;\n        }\n    }\n\n    if (shouldUpdate) {\n        log.debug(`update sanitized records: ${JSON.stringify(records)}`);\n\n        // Pass `{ silent changes }` will suppress the change event\n        config.set(CONFIG_KEY, records, { silent: true });\n    }\n\n    return records;\n};\n\nexport const signin = (req, res) => {\n    const { token = '', name = '', password = '' } = { ...req.body };\n    const users = getSanitizedRecords();\n    const enabledUsers = users.filter(user => {\n        return user.enabled;\n    });\n\n    if (enabledUsers.length === 0) {\n        const user = { id: '', name: '' };\n        const payload = { ...user };\n        const token = generateAccessToken(payload, settings.secret); // generate access token\n        res.send({\n            enabled: false, // session is disabled\n            token: token,\n            name: user.name // empty name\n        });\n        return;\n    }\n\n    if (!token) {\n        const user = find(enabledUsers, { name: name });\n        const valid = user && bcrypt.compareSync(password, user.password);\n\n        if (!valid) {\n            res.status(ERR_UNAUTHORIZED).send({\n                msg: 'Authentication failed'\n            });\n            return;\n        }\n\n        const payload = {\n            id: user.id,\n            name: user.name\n        };\n        const token = generateAccessToken(payload, settings.secret); // generate access token\n        res.send({\n            enabled: true, // session is enabled\n            token: token, // new token\n            name: user.name\n        });\n        return;\n    }\n\n    jwt.verify(token, settings.secret, (err, user) => {\n        if (err) {\n            res.status(ERR_INTERNAL_SERVER_ERROR).send({\n                msg: 'Internal server error'\n            });\n            return;\n        }\n\n        const iat = new Date(user.iat * 1000).toISOString();\n        const exp = new Date(user.exp * 1000).toISOString();\n        log.debug(`jwt.verify: user.id=${user.id}, user.name=${user.name}, user.iat=${iat}, user.exp=${exp}`);\n\n        user = find(enabledUsers, { id: user.id, name: user.name });\n        if (!user) {\n            res.status(ERR_UNAUTHORIZED).send({\n                msg: 'Authentication failed'\n            });\n            return;\n        }\n\n        res.send({\n            enabled: true, // session is enabled\n            token: token, // old token\n            name: user.name\n        });\n    });\n};\n\nexport const fetch = (req, res) => {\n    const records = getSanitizedRecords();\n    const paging = !!req.query.paging;\n\n    if (paging) {\n        const { page = 1, pageLength = 10 } = req.query;\n        const totalRecords = records.length;\n        const [begin, end] = getPagingRange({ page, pageLength, totalRecords });\n        const pagedRecords = records.slice(begin, end);\n\n        res.send({\n            pagination: {\n                page: Number(page),\n                pageLength: Number(pageLength),\n                totalRecords: Number(totalRecords)\n            },\n            records: pagedRecords.map(record => {\n                const { id, mtime, enabled, name } = { ...record };\n                return { id, mtime, enabled, name };\n            })\n        });\n    } else {\n        res.send({\n            records: records.map(record => {\n                const { id, mtime, enabled, name } = { ...record };\n                return { id, mtime, enabled, name };\n            })\n        });\n    }\n};\n\nexport const create = (req, res) => {\n    const {\n        enabled = true,\n        name = '',\n        password = ''\n    } = { ...req.body };\n\n    if (!name) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"name\" parameter must not be empty'\n        });\n        return;\n    }\n\n    if (!password) {\n        res.status(ERR_BAD_REQUEST).send({\n            msg: 'The \"password\" parameter must not be empty'\n        });\n        return;\n    }\n\n    const records = getSanitizedRecords();\n    if (find(records, { name: name })) {\n        res.status(ERR_CONFLICT).send({\n            msg: 'The specified user already exists'\n        });\n        return;\n    }\n\n    try {\n        const salt = bcrypt.genSaltSync();\n        const hash = bcrypt.hashSync(password.trim(), salt);\n        const records = getSanitizedRecords();\n        const record = {\n            id: uuid.v4(),\n            mtime: new Date().getTime(),\n            enabled: enabled,\n            name: name,\n            password: hash\n        };\n\n        records.push(record);\n        config.set(CONFIG_KEY, records);\n\n        res.send({ id: record.id, mtime: record.mtime });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.rcfile)\n        });\n    }\n};\n\nexport const read = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    const { mtime, enabled, name } = { ...record };\n    res.send({ id, mtime, enabled, name });\n};\n\nexport const update = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    const {\n        enabled = record.enabled,\n        name = record.name,\n        oldPassword = '',\n        newPassword = ''\n    } = { ...req.body };\n    const willChangePassword = oldPassword && newPassword;\n\n    // Skip validation for \"enabled\" and \"name\"\n\n    if (willChangePassword && !bcrypt.compareSync(oldPassword, record.password)) {\n        res.status(ERR_PRECONDITION_FAILED).send({\n            msg: 'Incorrect password'\n        });\n        return;\n    }\n\n    const inuse = (record) => {\n        return record.id !== id && record.name === name;\n    };\n    if (some(records, inuse)) {\n        res.status(ERR_CONFLICT).send({\n            msg: 'The specified user already exists'\n        });\n        return;\n    }\n\n    try {\n        record.mtime = new Date().getTime();\n        record.enabled = Boolean(enabled);\n        record.name = String(name || '');\n\n        if (willChangePassword) {\n            const salt = bcrypt.genSaltSync();\n            const hash = bcrypt.hashSync(newPassword.trim(), salt);\n            record.password = hash;\n        }\n\n        config.set(CONFIG_KEY, records);\n\n        res.send({ id: record.id, mtime: record.mtime });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.rcfile)\n        });\n    }\n};\n\nexport const __delete = (req, res) => {\n    const id = req.params.id;\n    const records = getSanitizedRecords();\n    const record = find(records, { id: id });\n\n    if (!record) {\n        res.status(ERR_NOT_FOUND).send({\n            msg: 'Not found'\n        });\n        return;\n    }\n\n    try {\n        const filteredRecords = records.filter(record => {\n            return record.id !== id;\n        });\n        config.set(CONFIG_KEY, filteredRecords);\n\n        res.send({ id: record.id });\n    } catch (err) {\n        res.status(ERR_INTERNAL_SERVER_ERROR).send({\n            msg: 'Failed to save ' + JSON.stringify(settings.rcfile)\n        });\n    }\n};\n","\nimport CNCEngine from '../services/cncengine';\nimport { ERR_BAD_REQUEST } from '../constants';\n\n// Upload files using superagent:\n// https://stackoverflow.com/questions/31748936/how-to-send-files-with-superagent\nexport const uploadFile = (req, res) => {\n    const { port, visualizer } = req.body;\n    let { file } = req;\n\n    if (!file) {\n        return res.status(ERR_BAD_REQUEST).send({\n            msg: 'No file attached'\n        });\n    }\n\n    const { buffer } = file;\n    const gcode = buffer.toString();\n\n    CNCEngine.load({\n        gcode,\n        port,\n        name: file.originalname,\n        size: file.size,\n        visualizer,\n    });\n\n    return res.send({\n        msg: 'Successfully loaded file',\n    });\n};\n","\nimport * as version from './api.version';\nimport * as state from './api.state';\nimport * as gcode from './api.gcode';\nimport * as controllers from './api.controllers';\nimport * as watch from './api.watch';\nimport * as commands from './api.commands';\nimport * as events from './api.events';\nimport * as machines from './api.machines';\nimport * as macros from './api.macros';\nimport * as mdi from './api.mdi';\nimport * as users from './api.users';\nimport * as files from './api.file';\n\nexport {\n    version,\n    state,\n    gcode,\n    controllers,\n    watch,\n    commands,\n    events,\n    machines,\n    macros,\n    mdi,\n    users,\n    files\n};\n","module.exports = require(\"lodash/find\");","\nimport util from 'util';\nimport chalk from 'chalk';\nimport winston from 'winston';\nimport settings from '../config/settings';\n\n// https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\nconst getStackTrace = () => {\n    const obj = {};\n    Error.captureStackTrace(obj, getStackTrace);\n    return (obj.stack || '').split('\\n');\n};\n\nconst VERBOSITY_MAX = 3; // -vvv\n\nconst { combine, colorize, timestamp, printf } = winston.format;\n\n// https://github.com/winstonjs/winston/blob/master/README.md#creating-your-own-logger\nconst logger = winston.createLogger({\n    exitOnError: false,\n    level: settings.winston.level,\n    silent: false,\n    transports: [\n        new winston.transports.Console({\n            format: combine(\n                colorize(),\n                timestamp(),\n                printf(log => `${log.timestamp} - ${log.level} ${log.message}`)\n            ),\n            handleExceptions: true\n        }),\n        new winston.transports.File({\n            filename: 'cncjs4marlin4Marlin_server_log.txt',\n            level: 'info'\n        })\n    ]\n});\n\n// https://github.com/winstonjs/winston/blob/master/README.md#logging-levels\n// npm logging levels are prioritized from 0 to 5 (highest to lowest):\nexport const levels = [\n    'error', // 0\n    'warn', // 1\n    'info', // 2\n    'verbose', // 3\n    'debug', // 4\n    'silly', // 5\n];\n\nexport const getLevel = () => logger.level;\nexport const setLevel = (level) => {\n    logger.level = level;\n};\n\nexport default (namespace = '') => {\n    namespace = String(namespace);\n\n    return levels.reduce((acc, level) => {\n        acc[level] = function(...args) {\n            if ((settings.verbosity >= VERBOSITY_MAX) && (level !== 'silly')) {\n                args = args.concat(getStackTrace()[2]);\n            }\n            return (namespace.length > 0)\n                ? logger[level](chalk.cyan(namespace) + ' ' + util.format(...args))\n                : logger[level](util.format(...args));\n        };\n        return acc;\n    }, {});\n};\n","\nimport _ from 'lodash';\nimport events from 'events';\n\nclass ImmutableStore extends events.EventEmitter {\n    state = {};\n\n    constructor(state = {}) {\n        super();\n\n        this.state = state;\n    }\n\n    get(key, defaultValue) {\n        return _.get(this.state, key, defaultValue);\n    }\n\n    set(key, value) {\n        this.state = _.merge({}, this.state, _.set({}, key, value));\n        this.emit('change', this.state);\n        return this.state;\n    }\n\n    unset(key) {\n        let state = _.extend({}, this.state);\n        _.unset(state, key);\n        this.state = state;\n        this.emit('change', this.state);\n        return this.state;\n    }\n\n    replace(key, value) {\n        this.unset(key);\n        this.set(key, value);\n    }\n\n    clear() {\n        this.state = {};\n        this.emit('change', this.state);\n        return this.state;\n    }\n}\n\nexport default ImmutableStore;\n","\nimport ImmutableStore from '../lib/ImmutableStore';\n\nconst defaultState = {\n    controllers: {}\n};\n\nconst store = new ImmutableStore(defaultState);\n\nexport default store;\n","module.exports = require(\"ensure-array\");","module.exports = require(\"chalk\");","module.exports = require(\"lodash/set\");","module.exports = require(\"lodash/has\");","module.exports = require(\"lodash/includes\");","module.exports = require(\"lodash/isPlainObject\");","module.exports = require(\"events\");","module.exports = require(\"uuid\");","\nexport const ensureBoolean = (value, defaultValue = false) => {\n    if (value === undefined || value === null) {\n        return Boolean(defaultValue);\n    }\n\n    return (typeof value === 'boolean') ? value : Boolean(value);\n};\n\nexport const ensureString = (value, defaultValue = '') => {\n    if (value === undefined || value === null) {\n        return String(defaultValue);\n    }\n\n    return (typeof value === 'string') ? value : String(value);\n};\n\nexport const ensureNumber = (value, defaultValue = 0) => {\n    if (value === undefined || value === null) {\n        return Number(defaultValue);\n    }\n\n    return (typeof value === 'number') ? value : Number(value);\n};\n","module.exports = require(\"path\");","module.exports = require(\"lodash/isEqual\");","module.exports = require(\"fs\");","\nimport events from 'events';\nimport defaultShell from 'spawn-default-shell';\nimport without from 'lodash/without';\nimport shortid from 'shortid';\nimport logger from '../../lib/logger';\n\nconst log = logger('service:taskrunner');\n\nclass TaskRunner extends events.EventEmitter {\n    tasks = [];\n\n    run(command, title, options) {\n        if (options === undefined && typeof title === 'object') {\n            options = title;\n            title = '';\n        }\n\n        const taskId = shortid.generate(); // task id\n        const child = defaultShell.spawn(command, {\n            detached: true,\n            ...options\n        });\n        child.unref();\n\n        this.tasks.push(taskId);\n        this.emit('start', taskId);\n\n        child.stdout.on('data', (data) => {\n            process.stdout.write(`PID:${child.pid}> ${data}`);\n        });\n        child.stderr.on('data', (data) => {\n            process.stderr.write(`PID:${child.pid}> ${data}`);\n        });\n        child.on('error', (err) => {\n            // Listen for error event can prevent from throwing an unhandled exception\n            log.error(`Failed to start a child process: err=${JSON.stringify(err)}`);\n\n            this.tasks = without(this.tasks, taskId);\n            this.emit('error', taskId, err);\n        });\n        // The 'exit' event is emitted after the child process ends.\n        // Note that the 'exit' event may or may not fire after an error has occurred.\n        // It is important to guard against accidentally invoking handler functions multiple times.\n        child.on('exit', (code) => {\n            if (this.contains(taskId)) {\n                this.tasks = without(this.tasks, taskId);\n                this.emit('finish', taskId, code);\n            }\n        });\n\n        return taskId;\n    }\n\n    contains(taskId) {\n        return this.tasks.indexOf(taskId) >= 0;\n    }\n}\n\nexport default TaskRunner;\n","\nimport TaskRunner from './TaskRunner';\n\nconst taskRunner = new TaskRunner();\n\nexport default taskRunner;\n","module.exports = require(\"lodash/noop\");","\nimport watch from 'watch';\n\nclass FSMonitor {\n    root = '';\n\n    monitor = null;\n\n    files = {};\n\n    watch(root) {\n        watch.createMonitor(root, (monitor) => {\n            this.unwatch();\n            this.root = root;\n            this.monitor = monitor;\n            this.files = { ...monitor.files };\n\n            monitor.on('created', (f, stat) => {\n                this.files[f] = stat;\n            });\n            monitor.on('changed', (f, curr, prev) => {\n                this.files[f] = curr;\n            });\n            monitor.on('removed', (f, stat) => {\n                delete this.files[f];\n            });\n        });\n    }\n\n    unwatch() {\n        if (this.monitor) {\n            this.monitor.stop(); // Stop watching\n            this.monitor = null;\n        }\n        this.files = {};\n    }\n}\n\nexport default FSMonitor;\n","\nimport fs from 'fs';\nimport path from 'path';\nimport minimatch from 'minimatch';\nimport FSMonitor from './FSMonitor';\n\nconst monitor = new FSMonitor();\n\nconst start = ({ watchDirectory }) => {\n    monitor.watch(watchDirectory);\n};\n\nconst stop = () => {\n    monitor.unwatch();\n};\n\nconst getFiles = (searchPath) => {\n    const root = monitor.root;\n    const files = Object.keys(monitor.files);\n    const pattern = path.join(root, searchPath, '*');\n\n    if (!root || pattern.indexOf(root) !== 0) {\n        return [];\n    }\n\n    return minimatch\n        .match(files, pattern, { matchBase: true })\n        .map(file => {\n            const stat = monitor.files[file] || {};\n\n            return {\n                name: path.basename(file),\n                type: (function() {\n                    if (stat.isFile()) {\n                        return 'f';\n                    }\n                    if (stat.isDirectory()) {\n                        return 'd';\n                    }\n                    if (stat.isBlockDevice()) {\n                        return 'b';\n                    }\n                    if (stat.isCharacterDevice()) {\n                        return 'c';\n                    }\n                    if (stat.isSymbolicLink()) {\n                        return 'l';\n                    }\n                    if (stat.isFIFO()) {\n                        return 'p';\n                    }\n                    if (stat.isSocket()) {\n                        return 's';\n                    }\n                    return '';\n                }()),\n                size: stat.size,\n                atime: stat.atime,\n                mtime: stat.mtime,\n                ctime: stat.ctime\n            };\n        });\n};\n\nconst readFile = (file, callback) => {\n    const root = monitor.root;\n    file = path.join(root, file);\n\n    fs.readFile(file, 'utf8', callback);\n};\n\nexport default {\n    start,\n    stop,\n    getFiles,\n    readFile\n};\n","module.exports = require(\"bcrypt-nodejs\");","module.exports = require(\"lodash/intersection\");","module.exports = require(\"lodash/castArray\");","module.exports = require(\"gcode-parser\");","module.exports = require(\"os\");","module.exports = require(\"lodash/map\");","module.exports = require(\"lodash/trim\");","module.exports = require(\"lodash/isEmpty\");","module.exports = require(\"lodash/merge\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"serialport\");","\nimport ensureArray from 'ensure-array';\nimport _ from 'lodash';\nimport rangeCheck from 'range_check';\nimport settings from './config/settings';\nimport config from './services/configstore';\n\nconst whitelist = [\n    // IPv4 reserved space\n    '127.0.0.0/8', // Used for loopback addresses to the local host\n    '10.0.0.0/8', // Used for local communications within a private network\n    '172.16.0.0/12', // Used for local communications within a private network\n    '192.168.0.0/16', // Used for local communications within a private network\n    '169.254.0.0/16', // Link-local address\n\n    // IPv4 mapped IPv6 address\n    '::ffff:10.0.0.0/8',\n    '::ffff:127.0.0.0/8',\n    '::ffff:172.16.0.0/12',\n    '::ffff:192.168.0.0/16',\n\n    // IPv6 reserved space\n    '::1/128', // loopback address to the local host\n    'fc00::/7', // Unique local address\n    'fe80::/10' // Link-local address\n];\n\nexport const authorizeIPAddress = (ipaddr) => new Promise((resolve, reject) => {\n    let pass = !!(settings.allowRemoteAccess);\n    pass = pass || whitelist.some(test => rangeCheck.inRange(ipaddr, test));\n\n    if (pass) {\n        resolve();\n    } else {\n        reject(new Error(`Unauthorized IP address: ipaddr=${ipaddr}`));\n    }\n});\n\nexport const validateUser = (user) => new Promise((resolve, reject) => {\n    const { id = null, name = null } = { ...user };\n\n    const users = ensureArray(config.get('users'))\n        .filter(user => _.isPlainObject(user))\n        .map(user => ({\n            ...user,\n            // Defaults to true if not explicitly initialized\n            enabled: (user.enabled !== false)\n        }));\n    const enabledUsers = users.filter(user => user.enabled);\n\n    if ((enabledUsers.length === 0) || _.find(enabledUsers, { id: id, name: name })) {\n        resolve();\n    } else {\n        reject(new Error(`Unauthorized user: user.id=${id}, user.name=${name}`));\n    }\n});\n","module.exports = require(\"winston\");","module.exports = require(\"url\");","module.exports = require(\"express\");","module.exports = require(\"lodash/unset\");","module.exports = require(\"lodash/throttle\");","module.exports = require(\"gcode-toolpath\");","module.exports = require(\"esprima\");","\nimport config from '../services/configstore';\n\nconst noop = () => {};\n\nclass EventTrigger {\n    constructor(callback = noop) {\n        this.callback = callback || noop;\n    }\n\n    trigger(eventKey, callback = null) {\n        if (!eventKey) {\n            return;\n        }\n\n        const events = config.get('events', []);\n\n        events\n            .filter(event => event && event.event === eventKey)\n            .forEach(options => {\n                const {\n                    enabled = false,\n                    event,\n                    trigger,\n                    commands\n                } = { ...options };\n\n                if (!enabled) {\n                    return;\n                }\n\n                if (typeof this.callback === 'function') {\n                    this.callback(event, trigger, commands);\n                }\n            });\n    }\n}\n\nexport default EventTrigger;\n","\nimport { EventEmitter } from 'events';\nimport SerialPort from 'serialport';\n\nconst Readline = SerialPort.parsers.Readline;\n\n// Validation\nconst DATABITS = Object.freeze([5, 6, 7, 8]);\nconst STOPBITS = Object.freeze([1, 2]);\nconst PARITY = Object.freeze(['none', 'even', 'mark', 'odd', 'space']);\nconst FLOWCONTROLS = Object.freeze(['rtscts', 'xon', 'xoff', 'xany']);\n\nconst defaultSettings = Object.freeze({\n    baudRate: 115200,\n    dataBits: 8,\n    stopBits: 1,\n    parity: 'none',\n    rtscts: false,\n    xon: false,\n    xoff: false,\n    xany: false\n});\n\nconst toIdent = (options) => {\n    // Only the path option is required for generating the ident property\n    const { path } = { ...options };\n    return JSON.stringify({ type: 'serial', path: path });\n};\n\nclass SerialConnection extends EventEmitter {\n    type = 'serial';\n\n    parser = null;\n\n    // Readline parser\n    port = null;\n\n    // SerialPort\n    writeFilter = (data) => data;\n\n    eventListener = {\n        data: (data) => {\n            this.emit('data', data);\n        },\n        open: () => {\n            this.emit('open');\n        },\n        close: (err) => {\n            this.emit('close', err);\n        },\n        error: (err) => {\n            this.emit('error', err);\n        }\n    };\n\n    constructor(options) {\n        super();\n\n        const { writeFilter, ...rest } = { ...options };\n\n        if (writeFilter) {\n            if (typeof writeFilter !== 'function') {\n                throw new TypeError(`\"writeFilter\" must be a function: ${writeFilter}`);\n            }\n\n            this.writeFilter = writeFilter;\n        }\n\n        const settings = Object.assign({}, defaultSettings, rest);\n\n        if (settings.port) {\n            throw new TypeError('\"port\" is an unknown option, did you mean \"path\"?');\n        }\n\n        if (!settings.path) {\n            throw new TypeError(`\"path\" is not defined: ${settings.path}`);\n        }\n\n        if (settings.baudrate) {\n            throw new TypeError('\"baudrate\" is an unknown option, did you mean \"baudRate\"?');\n        }\n\n        if (typeof settings.baudRate !== 'number') {\n            throw new TypeError(`\"baudRate\" must be a number: ${settings.baudRate}`);\n        }\n\n        if (DATABITS.indexOf(settings.dataBits) < 0) {\n            throw new TypeError(`\"databits\" is invalid: ${settings.dataBits}`);\n        }\n\n        if (STOPBITS.indexOf(settings.stopBits) < 0) {\n            throw new TypeError(`\"stopbits\" is invalid: ${settings.stopbits}`);\n        }\n\n        if (PARITY.indexOf(settings.parity) < 0) {\n            throw new TypeError(`\"parity\" is invalid: ${settings.parity}`);\n        }\n\n        FLOWCONTROLS.forEach((control) => {\n            if (typeof settings[control] !== 'boolean') {\n                throw new TypeError(`\"${control}\" is not boolean: ${settings[control]}`);\n            }\n        });\n\n        Object.defineProperties(this, {\n            settings: {\n                enumerable: true,\n                value: settings,\n                writable: false\n            }\n        });\n    }\n\n    get ident() {\n        return toIdent(this.settings);\n    }\n\n    get isOpen() {\n        return this.port && this.port.isOpen;\n    }\n\n    get isClose() {\n        return !this.isOpen;\n    }\n\n    // @param {function} callback The error-first callback.\n    open(callback) {\n        if (this.port) {\n            const err = new Error(`Cannot open serial port \"${this.settings.path}\"`);\n            callback(err);\n            return;\n        }\n\n        const { path, ...rest } = this.settings;\n\n        this.port = new SerialPort(path, {\n            ...rest,\n            autoOpen: false\n        });\n        this.port.on('open', this.eventListener.open);\n        this.port.on('close', this.eventListener.close);\n        this.port.on('error', this.eventListener.error);\n\n        this.parser = this.port.pipe(new Readline({ delimiter: '\\n' }));\n        this.parser.on('data', this.eventListener.data);\n\n        this.port.open(callback);\n    }\n\n    // @param {function} callback The error-first callback.\n    close(callback) {\n        if (!this.port) {\n            const err = new Error(`Cannot close serial port \"${this.settings.path}\"`);\n            callback && callback(err);\n            return;\n        }\n\n        this.port.removeListener('open', this.eventListener.open);\n        this.port.removeListener('close', this.eventListener.close);\n        this.port.removeListener('error', this.eventListener.error);\n        this.parser.removeListener('data', this.eventListener.data);\n\n        this.port.close(callback);\n\n        this.port = null;\n        this.parser = null;\n    }\n\n    write(data, context) {\n        if (!this.port) {\n            return;\n        }\n\n        data = this.writeFilter(data, context);\n\n        this.port.write(data);\n    }\n}\n\nexport { toIdent };\nexport default SerialConnection;\n","\nimport events from 'events';\n\nclass Feeder extends events.EventEmitter {\n    state = {\n        hold: false,\n        holdReason: null,\n        queue: [],\n        pending: false,\n        changed: false,\n        outstanding: 0,\n        interval: null\n    };\n\n    dataFilter = null;\n\n    // @param {object} [options] The options object.\n    // @param {function} [options.dataFilter] A function to be used to handle the data. The function accepts two arguments: The data to be sent to the controller, and the context.\n    constructor(options) {\n        super();\n\n        if (typeof options.dataFilter === 'function') {\n            this.dataFilter = options.dataFilter;\n        }\n\n        this.on('change', () => {\n            this.state.changed = true;\n        });\n    }\n\n    toJSON() {\n        return {\n            hold: this.state.hold,\n            holdReason: this.state.holdReason,\n            queue: this.state.queue.length,\n            pending: this.state.pending,\n            changed: this.state.changed\n        };\n    }\n\n    feed(data = [], context = {}) {\n        // Clear pending state when the feeder queue is empty\n        if (this.state.queue.length === 0) {\n            this.state.pending = false;\n        }\n\n        data = [].concat(data);\n        if (data.length > 0) {\n            this.state.queue = this.state.queue.concat(data.map(command => {\n                return { command: command, context: context };\n            }));\n            this.emit('change');\n        }\n    }\n\n    hold(reason) {\n        if (this.state.hold) {\n            return;\n        }\n        this.state.hold = true;\n        this.state.holdReason = reason;\n        this.emit('hold');\n        this.emit('change');\n    }\n\n    unhold() {\n        if (!this.state.hold) {\n            return;\n        }\n        this.state.hold = false;\n        this.state.holdReason = null;\n        this.emit('unhold');\n        this.emit('change');\n    }\n\n    clear() {\n        this.state.queue = [];\n        this.state.pending = false;\n        this.state.outstanding = 0;\n        this.state.interval && clearInterval(this.state.interval);\n        this.emit('change');\n    }\n\n    reset() {\n        this.state.hold = false;\n        this.state.holdReason = null;\n        this.state.queue = [];\n        this.state.pending = false;\n        this.state.outstanding = 0;\n        clearInterval(this.state.interval);\n        this.state.interval = null;\n        this.emit('change');\n    }\n\n    size() {\n        return this.state.queue.length;\n    }\n\n    next() {\n        while (!this.state.hold && this.state.queue.length > 0) {\n            let { command, context } = this.state.queue.shift();\n\n            if (this.dataFilter) {\n                command = this.dataFilter(command, context) || '';\n                if (!command) { // Ignore blank lines\n                    continue;\n                }\n            }\n\n            this.state.pending = true;\n            this.state.outstanding++;\n            this.emit('data', command, context);\n            this.emit('change');\n            break;\n        }\n\n        // Clear pending state when the feeder queue is empty\n        if (this.state.queue.length === 0) {\n            this.state.pending = false;\n        }\n\n        return this.state.pending;\n    }\n\n    isPending() {\n        return this.state.pending;\n    }\n\n    // Returns true if any state have changes\n    peek() {\n        const changed = this.state.changed;\n        this.state.changed = false;\n        return changed;\n    }\n\n    ack() {\n        if (this.state.outstanding > 0) {\n            this.state.outstanding--;\n        }\n    }\n\n    hasOutstanding() {\n        return this.state.outstanding > 0;\n    }\n\n    repeatCommand(command, timer = 200) {\n        if (!this.state.interval) {\n            this.state.interval = setInterval(() => {\n                if (!this.hasOutstanding()) {\n                    this.feed(command);\n                    if (!this.isPending()) {\n                        this.next();\n                    }\n                }\n            }, timer);\n        } else {\n            clearInterval(this.state.interval);\n            this.state.interval = null;\n        }\n    }\n}\n\nexport default Feeder;\n","\n/* eslint max-classes-per-file: 0 */\nimport events from 'events';\n\nexport const SP_TYPE_SEND_RESPONSE = 0;\nexport const SP_TYPE_CHAR_COUNTING = 1;\n\nconst noop = () => {};\n\nclass SPSendResponse {\n    callback = null;\n\n    constructor(options, callback = noop) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = {};\n        }\n        if (typeof callback === 'function') {\n            this.callback = callback;\n        }\n    }\n\n    process() {\n        this.callback && this.callback(this);\n    }\n\n    clear() {\n        // Do nothing\n    }\n\n    get type() {\n        return SP_TYPE_SEND_RESPONSE;\n    }\n}\n\nclass SPCharCounting {\n    callback = null;\n\n    state = {\n        bufferSize: 128, // Defaults to 128\n        dataLength: 0,\n        queue: [],\n        line: ''\n    };\n\n    constructor(options, callback = noop) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = {};\n        }\n\n        // bufferSize\n        const bufferSize = Number(options.bufferSize);\n        if (bufferSize && bufferSize > 0) {\n            this.state.bufferSize = bufferSize;\n        }\n\n        if (typeof callback === 'function') {\n            this.callback = callback;\n        }\n    }\n\n    process() {\n        this.callback && this.callback(this);\n    }\n\n    reset() {\n        this.state.bufferSize = 128; // Defaults to 128\n        this.state.dataLength = 0;\n        this.state.queue = [];\n        this.state.line = '';\n    }\n\n    clear() {\n        this.state.dataLength = 0;\n        this.state.queue = [];\n        this.state.line = '';\n    }\n\n    get type() {\n        return SP_TYPE_CHAR_COUNTING;\n    }\n\n    get bufferSize() {\n        return this.state.bufferSize;\n    }\n\n    set bufferSize(bufferSize = 0) {\n        bufferSize = Number(bufferSize);\n        if (!bufferSize) {\n            return;\n        }\n\n        // The buffer size cannot be reduced below the size of the data within the buffer.\n        this.state.bufferSize = Math.max(bufferSize, this.state.dataLength);\n    }\n\n    get dataLength() {\n        return this.state.dataLength;\n    }\n\n    set dataLength(dataLength) {\n        this.state.dataLength = dataLength;\n    }\n\n    get queue() {\n        return this.state.queue;\n    }\n\n    set queue(queue) {\n        this.state.queue = queue;\n    }\n\n    get line() {\n        return this.state.line;\n    }\n\n    set line(line) {\n        this.state.line = line;\n    }\n}\n\nclass Sender extends events.EventEmitter {\n    // streaming protocol\n    sp = null;\n\n    state = {\n        hold: false,\n        holdReason: null,\n        name: '',\n        gcode: '',\n        context: {},\n        lines: [],\n        total: 0,\n        sent: 0,\n        received: 0,\n        startTime: 0,\n        finishTime: 0,\n        elapsedTime: 0,\n        remainingTime: 0\n    };\n\n    stateChanged = false;\n\n    dataFilter = null;\n\n    // @param {number} [type] Streaming protocol type. 0 for send-response, 1 for character-counting.\n    // @param {object} [options] The options object.\n    // @param {number} [options.bufferSize] The buffer size used in character-counting streaming protocol. Defaults to 127.\n    // @param {function} [options.dataFilter] A function to be used to handle the data. The function accepts two arguments: The data to be sent to the controller, and the context.\n    constructor(type = SP_TYPE_SEND_RESPONSE, options = {}) {\n        super();\n\n        if (typeof options.dataFilter === 'function') {\n            this.dataFilter = options.dataFilter;\n        }\n\n        // character-counting\n        if (type === SP_TYPE_CHAR_COUNTING) {\n            this.sp = new SPCharCounting(options, (sp) => {\n                if (sp.queue.length > 0) {\n                    const lineLength = sp.queue.shift();\n                    sp.dataLength -= lineLength;\n                }\n\n                while (!this.state.hold && (this.state.sent < this.state.total)) {\n                    // Remove leading and trailing whitespace from both ends of a string\n                    sp.line = sp.line || this.state.lines[this.state.sent].trim();\n\n                    if (this.dataFilter) {\n                        sp.line = this.dataFilter(sp.line, this.state.context) || '';\n                    }\n\n                    // The newline character (\\n) consumed the RX buffer space\n                    if ((sp.line.length > 0) && ((sp.dataLength + sp.line.length + 1) >= sp.bufferSize)) {\n                        break;\n                    }\n\n                    this.state.sent++;\n                    this.emit('change');\n\n                    if (sp.line.length === 0) {\n                        this.ack(); // ack empty line\n                        continue;\n                    }\n\n                    const line = sp.line + '\\n';\n                    sp.line = '';\n                    sp.dataLength += line.length;\n                    sp.queue.push(line.length);\n                    this.emit('data', line, this.state.context);\n                }\n            });\n        }\n\n        // send-response\n        if (type === SP_TYPE_SEND_RESPONSE) {\n            this.sp = new SPSendResponse(options, (sp) => {\n                while (!this.state.hold && (this.state.sent < this.state.total)) {\n                    // Remove leading and trailing whitespace from both ends of a string\n                    let line = this.state.lines[this.state.sent].trim();\n\n                    if (this.dataFilter) {\n                        line = this.dataFilter(line, this.state.context) || '';\n                    }\n\n                    this.state.sent++;\n                    this.emit('change');\n\n                    if (line.length === 0) {\n                        this.ack(); // ack empty line\n                        continue;\n                    }\n\n                    this.emit('data', line + '\\n', this.state.context);\n                    break;\n                }\n            });\n        }\n\n        this.on('change', () => {\n            this.stateChanged = true;\n        });\n    }\n\n    getContext() {\n        return this.state.context;\n    }\n\n    toJSON() {\n        return {\n            sp: this.sp.type,\n            hold: this.state.hold,\n            holdReason: this.state.holdReason,\n            name: this.state.name,\n            context: this.state.context,\n            size: this.state.gcode.length,\n            total: this.state.total,\n            sent: this.state.sent,\n            received: this.state.received,\n            startTime: this.state.startTime,\n            finishTime: this.state.finishTime,\n            elapsedTime: this.state.elapsedTime,\n            remainingTime: this.state.remainingTime\n        };\n    }\n\n    hold(reason) {\n        if (this.state.hold) {\n            return;\n        }\n        this.state.hold = true;\n        this.state.holdReason = reason;\n        this.emit('hold');\n        this.emit('change');\n    }\n\n    unhold() {\n        if (!this.state.hold) {\n            return;\n        }\n        this.state.hold = false;\n        this.state.holdReason = null;\n        this.emit('unhold');\n        this.emit('change');\n    }\n\n    // @return {boolean} Returns true on success, false otherwise.\n    load(name, gcode = '', context = {}) {\n        if (typeof gcode !== 'string' || !gcode) {\n            return false;\n        }\n\n        /*const comments = ['#', '(', '%'];\n        const lines = gcode.split('\\n');\n        lines.filter(line => (line.trim().length > 0))\n            .filter(line => !comments.some(comment => line.includes(comment)));\n        console.log(lines);*/\n        let lines = gcode.split('\\n');\n\n        if (this.sp) {\n            this.sp.clear();\n        }\n        this.state.hold = false;\n        this.state.holdReason = null;\n        this.state.name = name;\n        this.state.gcode = gcode;\n        this.state.context = context;\n        this.state.lines = lines;\n        this.state.total = this.state.lines.length;\n        this.state.sent = 0;\n        this.state.received = 0;\n        this.state.startTime = 0;\n        this.state.finishTime = 0;\n        this.state.elapsedTime = 0;\n        this.state.remainingTime = 0;\n\n        this.emit('load', name, gcode, context);\n        this.emit('change');\n\n        return true;\n    }\n\n    unload() {\n        if (this.sp) {\n            this.sp.clear();\n        }\n        this.state.hold = false;\n        this.state.holdReason = null;\n        this.state.name = '';\n        this.state.gcode = '';\n        this.state.context = {};\n        this.state.lines = [];\n        this.state.total = 0;\n        this.state.sent = 0;\n        this.state.received = 0;\n        this.state.startTime = 0;\n        this.state.finishTime = 0;\n        this.state.elapsedTime = 0;\n        this.state.remainingTime = 0;\n\n        this.emit('unload');\n        this.emit('change');\n    }\n\n    // Tells the sender an acknowledgement has received.\n    // @return {boolean} Returns true on success, false otherwise.\n    ack() {\n        if (!this.state.gcode) {\n            return false;\n        }\n\n        if (this.state.received >= this.state.sent) {\n            return false;\n        }\n\n        this.state.received++;\n        this.emit('change');\n\n        return true;\n    }\n\n    // Tells the sender to send more data.\n    // @return {boolean} Returns true on success, false otherwise.\n    next(options = {}) {\n        const { lineToStartFrom } = options;\n\n        if (!this.state.gcode) {\n            return false;\n        }\n\n        const now = new Date().getTime();\n\n        const handleStart = () => {\n            this.state.startTime = now;\n            this.state.finishTime = 0;\n            this.state.elapsedTime = 0;\n            this.state.remainingTime = 0;\n            this.emit('start', this.state.startTime);\n            this.emit('change');\n        };\n\n        if (lineToStartFrom) {\n            this.state.sent = lineToStartFrom;\n            this.state.received = lineToStartFrom;\n\n            handleStart();\n        }\n\n        if (this.state.total > 0 && this.state.sent === 0) {\n            handleStart();\n        }\n\n        if (this.sp) {\n            this.sp.process();\n        }\n\n        // Elapsed Time\n        this.state.elapsedTime = now - this.state.startTime;\n\n        // Make a 1 second delay before estimating the remaining time\n        if (this.state.elapsedTime >= 1000 && this.state.received > 0) {\n            const timePerCode = this.state.elapsedTime / this.state.received;\n            this.state.remainingTime = (timePerCode * this.state.total - this.state.elapsedTime);\n        }\n\n        if (this.state.received >= this.state.total) {\n            if (this.state.finishTime === 0) {\n                // avoid issue 'end' multiple times\n                this.state.finishTime = now;\n                this.emit('end', this.state.finishTime);\n                this.emit('change');\n            }\n        }\n\n        return true;\n    }\n\n    // Rewinds the internal array pointer.\n    // @return {boolean} Returns true on success, false otherwise.\n    rewind() {\n        if (!this.state.gcode) {\n            return false;\n        }\n\n        if (this.sp) {\n            this.sp.clear();\n        }\n        this.state.hold = false; // clear hold off state\n        this.state.holdReason = null;\n        this.state.sent = 0;\n        this.state.received = 0;\n        this.emit('change');\n\n        return true;\n    }\n\n    // Checks if there are any state changes. It also clears the stateChanged flag.\n    // @return {boolean} Returns true on state changes, false otherwise.\n    peek() {\n        const stateChanged = this.stateChanged;\n        this.stateChanged = false;\n        return stateChanged;\n    }\n}\n\nexport default Sender;\n","\nimport events from 'events';\n\n// Workflow State\nexport const WORKFLOW_STATE_RUNNING = 'running';\nexport const WORKFLOW_STATE_PAUSED = 'paused';\nexport const WORKFLOW_STATE_IDLE = 'idle';\n\nclass Workflow extends events.EventEmitter {\n    state = WORKFLOW_STATE_IDLE;\n\n    isRunning() {\n        return this.state === WORKFLOW_STATE_RUNNING;\n    }\n\n    isPaused() {\n        return this.state === WORKFLOW_STATE_PAUSED;\n    }\n\n    isIdle() {\n        return this.state === WORKFLOW_STATE_IDLE;\n    }\n\n    start(...args) {\n        if (this.state !== WORKFLOW_STATE_RUNNING) {\n            this.state = WORKFLOW_STATE_RUNNING;\n            this.emit('start', ...args);\n        }\n    }\n\n    stop(...args) {\n        if (this.state !== WORKFLOW_STATE_IDLE) {\n            this.state = WORKFLOW_STATE_IDLE;\n            this.emit('stop', ...args);\n        }\n    }\n\n    stopTesting() {\n        this.state = WORKFLOW_STATE_IDLE;\n        this.emit('stop');\n    }\n\n    resumeTesting() {\n        if (this.state === WORKFLOW_STATE_PAUSED) {\n            this.state = WORKFLOW_STATE_RUNNING;\n            this.emit('resume');\n        }\n    }\n\n    pause(...args) {\n        if (this.state === WORKFLOW_STATE_RUNNING) {\n            this.state = WORKFLOW_STATE_PAUSED;\n        }\n        this.emit('pause', ...args);\n    }\n\n    resume(...args) {\n        if (this.state === WORKFLOW_STATE_PAUSED) {\n            this.state = WORKFLOW_STATE_RUNNING;\n        }\n        this.emit('resume', ...args);\n    }\n}\n\nexport default Workflow;\n","\nconst delay = (t, v) => new Promise(resolve => {\n    setTimeout(resolve.bind(null, v), t);\n});\n\nexport default delay;\n","\nconst ensurePositiveNumber = (value, minimumValue = 0) => {\n    // In comparison to the global isFinite() function, the Number.isFinite() method doesn't forcibly convert the parameter to a number.\n    if (!Number.isFinite(minimumValue) || (minimumValue < 0)) {\n        minimumValue = 0;\n    }\n    return Math.max(Number(value) || 0, minimumValue);\n};\n\nexport default ensurePositiveNumber;\n","\n/* eslint no-bitwise: 0 */\nimport { generate } from 'escodegen';\nimport { parse } from 'esprima';\nimport logger from './logger';\n\nconst log = logger('evaluate-expression');\n\nconst UNRESOLVED = Symbol('unresolved');\n\nconst evaluateExpression = (src, vars) => {\n    if (!vars || typeof vars !== 'object') {\n        vars = { ...vars };\n    }\n\n    const walk = (node) => {\n        if (node.type === 'Literal') {\n            return node.value;\n        }\n\n        if (node.type === 'UnaryExpression') {\n            const val = walk(node.argument);\n            if (node.operator === '+') {\n                return +val;\n            }\n            if (node.operator === '-') {\n                return -val;\n            }\n            if (node.operator === '~') {\n                return ~val;\n            }\n            if (node.operator === '!') {\n                return !val;\n            }\n            return UNRESOLVED;\n        }\n\n        if (node.type === 'ArrayExpression') {\n            const xs = [];\n            for (let i = 0, l = node.elements.length; i < l; i++) {\n                const x = walk(node.elements[i]);\n                if (x === UNRESOLVED) {\n                    return UNRESOLVED;\n                }\n                xs.push(x);\n            }\n            return xs;\n        }\n\n        if (node.type === 'ObjectExpression') {\n            const obj = {};\n            for (let i = 0; i < node.properties.length; i++) {\n                const prop = node.properties[i];\n                const value = (prop.value === null)\n                    ? prop.value\n                    : walk(prop.value);\n                if (value === UNRESOLVED) {\n                    return UNRESOLVED;\n                }\n                obj[prop.key.value || prop.key.name] = value;\n            }\n            return obj;\n        }\n\n        if (node.type === 'BinaryExpression' || node.type === 'LogicalExpression') {\n            const l = walk(node.left);\n            if (l === UNRESOLVED) {\n                return UNRESOLVED;\n            }\n            const r = walk(node.right);\n            if (r === UNRESOLVED) {\n                return UNRESOLVED;\n            }\n            const op = node.operator;\n            if (op === '==') {\n                return l == r; // eslint-disable-line eqeqeq\n            }\n            if (op === '===') {\n                return l === r;\n            }\n            if (op === '!=') {\n                return l != r; // eslint-disable-line eqeqeq\n            }\n            if (op === '!==') {\n                return l !== r;\n            }\n            if (op === '+') {\n                return l + r;\n            }\n            if (op === '-') {\n                return l - r;\n            }\n            if (op === '*') {\n                return l * r;\n            }\n            if (op === '/') {\n                return l / r;\n            }\n            if (op === '%') {\n                return l % r;\n            }\n            if (op === '<') {\n                return l < r;\n            }\n            if (op === '<=') {\n                return l <= r;\n            }\n            if (op === '>') {\n                return l > r;\n            }\n            if (op === '>=') {\n                return l >= r;\n            }\n            if (op === '|') {\n                return l | r;\n            }\n            if (op === '&') {\n                return l & r;\n            }\n            if (op === '^') {\n                return l ^ r;\n            }\n            if (op === '&&') {\n                return l && r;\n            }\n            if (op === '||') {\n                return l || r;\n            }\n            return UNRESOLVED;\n        }\n\n        if (node.type === 'Identifier') {\n            if (Object.hasOwnProperty.call(vars, node.name)) {\n                return vars[node.name];\n            }\n            return UNRESOLVED;\n        }\n\n        if (node.type === 'ThisExpression') {\n            if (Object.hasOwnProperty.call(vars, 'this')) {\n                return vars['this']; // eslint-disable-line dot-notation\n            }\n            return UNRESOLVED;\n        }\n\n        if (node.type === 'CallExpression') {\n            const callee = walk(node.callee);\n            if (callee === UNRESOLVED) {\n                return UNRESOLVED;\n            }\n            if (typeof callee !== 'function') {\n                return UNRESOLVED;\n            }\n            let ctx = node.callee.object ? walk(node.callee.object) : UNRESOLVED;\n            if (ctx === UNRESOLVED) {\n                ctx = null;\n            }\n            const args = [];\n            for (let i = 0, l = node.arguments.length; i < l; i++) {\n                const x = walk(node.arguments[i]);\n                if (x === UNRESOLVED) {\n                    return UNRESOLVED;\n                }\n                args.push(x);\n            }\n            return callee.apply(ctx, args);\n        }\n\n        if (node.type === 'MemberExpression') {\n            const obj = walk(node.object);\n            if (obj === UNRESOLVED) {\n                return UNRESOLVED;\n            }\n            if (node.property.type === 'Identifier') {\n                return obj[node.property.name];\n            }\n            const prop = walk(node.property);\n            if (prop === UNRESOLVED) {\n                return UNRESOLVED;\n            }\n            return obj[prop];\n        }\n\n        if (node.type === 'ConditionalExpression') {\n            const val = walk(node.test);\n            if (val === UNRESOLVED) {\n                return UNRESOLVED;\n            }\n            return val ? walk(node.consequent) : walk(node.alternate);\n        }\n\n        if (node.type === 'ExpressionStatement') {\n            const val = walk(node.expression);\n            if (val === UNRESOLVED) {\n                return UNRESOLVED;\n            }\n            return val;\n        }\n\n        if (node.type === 'ReturnStatement') {\n            return walk(node.argument);\n        }\n\n        if (node.type === 'FunctionExpression') {\n            const bodies = node.body.body;\n\n            // Create a \"scope\" for our arguments\n            const oldVars = {};\n            Object.keys(vars).forEach(element => {\n                oldVars[element] = vars[element];\n            });\n\n            for (let i = 0; i < node.params.length; i++) {\n                const key = node.params[i];\n                if (key.type !== 'Identifier') {\n                    return UNRESOLVED;\n                }\n\n                vars[key.name] = null;\n            }\n\n            for (let i in bodies) {\n                if (walk(bodies[i]) === UNRESOLVED) {\n                    return UNRESOLVED;\n                }\n            }\n\n            // restore the vars and scope after walk\n            vars = oldVars;\n\n            const keys = Object.keys(vars);\n            const vals = keys.map(key => {\n                return vars[key];\n            });\n\n            return Function(keys.join(', '), 'return ' + generate(node)).apply(null, vals); // eslint-disable-line no-new-func\n        }\n\n        if (node.type === 'TemplateLiteral') {\n            let str = '';\n            let i = 0;\n            for (i = 0; i < node.expressions.length; i++) {\n                str += walk(node.quasis[i]);\n                str += walk(node.expressions[i]);\n            }\n            str += walk(node.quasis[i]);\n            return str;\n        }\n\n        if (node.type === 'TaggedTemplateExpression') {\n            const tag = walk(node.tag);\n            const quasi = node.quasi;\n            const strings = quasi.quasis.map(walk);\n            const values = quasi.expressions.map(walk);\n            return tag.apply(null, [strings].concat(values));\n        }\n\n        if (node.type === 'TemplateElement') {\n            return node.value.cooked;\n        }\n\n        return UNRESOLVED;\n    };\n\n    let result = UNRESOLVED;\n\n    try {\n        let ast;\n\n        if (typeof src === 'string') {\n            ast = parse(src).body[0].expression;\n        } else {\n            ast = src;\n        }\n\n        result = walk(ast);\n    } catch (e) {\n        log.error(`src=\"${src}\", vars=${JSON.stringify(vars)}`);\n        log.error(e);\n    }\n\n    return (result === UNRESOLVED) ? undefined : result;\n};\n\nexport default evaluateExpression;\n","\nimport _set from 'lodash/set';\nimport { parse } from 'esprima';\nimport evaluateExpression from './evaluate-expression';\nimport logger from './logger';\n\nconst log = logger('evaluate-assignment-expression');\n\nconst isStaticMemberExpression = (node) => typeof node === 'object' && node.type === 'MemberExpression' && !node.computed;\nconst isComputedMemberExpression = (node) => typeof node === 'object' && node.type === 'MemberExpression' && !!node.computed;\n\nconst lookupObjectPath = (node, vars) => {\n    if (!node) {\n        return [];\n    }\n\n    /*\n     * Expression: 'x = value'\n     *\n     * Identifier { type: 'Identifier', name: 'x' }\n     */\n    if (node.type === 'Identifier') {\n        return [node.name];\n    }\n\n    if (isComputedMemberExpression(node)) {\n        return [...lookupObjectPath(node.object, vars), evaluateExpression(node.property, vars)];\n    }\n\n    if (isStaticMemberExpression(node)) {\n        /*\n         * Expression: 'x.y = value'\n         *\n         * StaticMemberExpression {\n         *   type: 'MemberExpression',\n         *   computed: false,\n         *   object: Identifier { type: 'Identifier', name: 'x' },\n         *   property: Identifier { type: 'Identifier', name: 'y' }\n         * }\n         *\n         * Expression: 'x[y] = value'\n         *\n         * ComputedMemberExpression {\n         *   type: 'MemberExpression',\n         *   computed: true,\n         *   object: Identifier { type: 'Identifier', name: 'x' },\n         *   property: Identifier { type: 'Identifier', name: 'y' }\n         * }\n         */\n        if (node.property.type === 'Identifier') {\n            return [...lookupObjectPath(node.object, vars), node.property.name];\n        }\n\n        /*\n         * Expression: 'x[\"y\"] = value'\n         *\n         * ComputedMemberExpression {\n         *   type: 'MemberExpression',\n         *   computed: true,\n         *   object: Identifier { type: 'Identifier', name: 'x' },\n         *   property: Literal { type: 'Literal', value: 'y', raw: '\"y\"' }\n         * }\n         */\n        if (node.property.type === 'Literal') {\n            return [...lookupObjectPath(node.object, vars), node.property.value];\n        }\n\n        return [...lookupObjectPath(node.object, vars), evaluateExpression(node.property, vars)];\n    }\n\n    return [node.name];\n};\n\nconst walkAssignmentExpression = (node, vars) => {\n    console.assert(node && node.type === 'AssignmentExpression');\n\n    const path = lookupObjectPath(node.left, vars);\n    if (path) {\n        const value = evaluateExpression(node.right, vars);\n        _set(vars, path, value);\n    }\n};\n\nconst walkSequenceExpression = (node, vars) => {\n    console.assert(node && node.type === 'SequenceExpression');\n\n    node.expressions.forEach(expr => {\n        if (expr.type === 'AssignmentExpression') {\n            walkAssignmentExpression(expr, vars);\n            return;\n        }\n\n        evaluateExpression(expr, vars);\n    });\n};\n\nconst evaluateAssignmentExpression = (src, vars = {}) => {\n    if (!src) {\n        return vars;\n    }\n\n    try {\n        const ast = parse(src).body[0].expression;\n\n        if (ast.type === 'AssignmentExpression') {\n            walkAssignmentExpression(ast, vars);\n        } else if (ast.type === 'SequenceExpression') {\n            walkSequenceExpression(ast, vars);\n        } else {\n            evaluateExpression(ast, vars);\n        }\n    } catch (e) {\n        log.error(`src=\"${src}\", vars=${JSON.stringify(vars)}`);\n        log.error(e);\n    }\n    return vars;\n};\n\nexport default evaluateAssignmentExpression;\n","\nimport evaluateExpression from './evaluate-expression';\nimport logger from './logger';\n\nconst log = logger('translate-expression');\nconst re = new RegExp(/\\[[^\\]]+\\]/g);\n\nconst translateExpression = (data, vars = {}) => {\n    if (!data) {\n        return '';\n    }\n\n    try {\n        data = String(data).replace(re, (match) => {\n            const src = match.slice(1, -1);\n            const value = evaluateExpression(src, vars);\n            return value !== undefined ? value : match;\n        });\n    } catch (e) {\n        log.error(`data=\"${data}\", vars=${JSON.stringify(vars)}`);\n        log.error(e);\n    }\n\n    return data;\n};\n\nexport default translateExpression;\n","\nimport Toolpath from 'gcode-toolpath';\nimport ch from 'hull.js';\nimport uniqBy from 'lodash/uniqBy';\nimport * as THREE from 'three';\nimport logger from './logger';\n\nconst log = logger('service:outline');\n\n// Generate an ordered pair - we don't care about Z index for outline purposes so it's removed\nfunction vertex(x, y) {\n    return [\n        x.toFixed(2),\n        y.toFixed(2)\n    ];\n}\n\nexport function getOutlineGcode(gcode, concavity = 60) {\n    const vertices = [];\n    const toolpath = new Toolpath({\n        addLine: ({ motion }, v1, v2) => {\n            // We ignore G0 movements since they generally aren't cutting movements\n            if (motion === 'G1') {\n                //vertices.push(vertex(v1.x, v1.y));\n                vertices.push(vertex(v2.x, v2.y));\n            }\n        },\n        addArcCurve: ({ motion, plane }, v1, v2, v0) => {\n            const isClockwise = (motion === 'G2');\n            const radius = Math.sqrt(\n                ((v1.x - v0.x) ** 2) + ((v1.y - v0.y) ** 2)\n            );\n            let startAngle = Math.atan2(v1.y - v0.y, v1.x - v0.x);\n            let endAngle = Math.atan2(v2.y - v0.y, v2.x - v0.x);\n\n            // Draw full circle if startAngle and endAngle are both zero\n            if (startAngle === endAngle) {\n                endAngle += (2 * Math.PI);\n            }\n\n            const arcCurve = new THREE.ArcCurve(\n                v0.x, // aX\n                v0.y, // aY\n                radius, // aRadius\n                startAngle, // aStartAngle\n                endAngle, // aEndAngle\n                isClockwise // isClockwise\n            );\n            const divisions = 30;\n            const points = arcCurve.getPoints(divisions);\n            vertices.push(vertex(v1.x, v1.y));\n\n            for (let i = 0; i < points.length; ++i) {\n                const point = points[i];\n                const z = ((v2.z - v1.z) / points.length) * i + v1.z;\n\n                if (plane === 'G17') { // XY-plane\n                    vertices.push(vertex(point.x, point.y));\n                } else if (plane === 'G18') { // ZX-plane\n                    vertices.push(vertex(point.y, z));\n                } else if (plane === 'G19') { // YZ-plane\n                    vertices.push(vertex(z, point.x));\n                }\n            }\n        }\n    });\n    log.debug('Parsing g-code');\n    toolpath.loadFromStringSync(gcode);\n    log.debug('Reducing to unique vertices');\n    const uniqueVertices = uniqBy(vertices, v => JSON.stringify(v));\n    log.debug(`Dataset reduced from ${vertices.length} to ${uniqueVertices.length} points.`);\n\n    log.debug(`Generating hull with accuracy of ${concavity}`);\n    const fileHull = ch(uniqueVertices, concavity);\n\n    const gCode = convertPointsToGCode(fileHull);\n\n    return gCode;\n}\n\nfunction convertPointsToGCode(points) {\n    const gCode = [];\n    gCode.push('G21 G91 G0 Z5');\n    points.forEach(point => {\n        const [x, y] = point;\n        gCode.push(`G21 G90 G0 X${x} Y${y}`);\n    });\n    gCode.push('G21 G91 G0 Z-5');\n    return gCode;\n}\n","\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\nexport const GLOBAL_OBJECTS = {\n    // Function properties\n    parseFloat,\n    parseInt,\n\n    // Fundamental objects\n    Object,\n    Function,\n    Boolean,\n\n    // Numbers and dates\n    Number,\n    Math,\n    Date,\n\n    // Text processing\n    String,\n    RegExp,\n\n    // Structured data\n    JSON,\n};\n\n// Write Source\nexport const WRITE_SOURCE_CLIENT = 'client';\nexport const WRITE_SOURCE_SERVER = 'server';\nexport const WRITE_SOURCE_FEEDER = 'feeder';\nexport const WRITE_SOURCE_SENDER = 'sender';\n","\n// http://stackoverflow.com/questions/10454518/javascript-how-to-retrieve-the-number-of-decimals-of-a-string-number\nconst decimalPlaces = (num) => {\n    const match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n    if (!match) {\n        return 0;\n    }\n\n    // Number of digits right of decimal point.\n    const digits = match[1] ? match[1].length : 0;\n\n    // Adjust for scientific notation.\n    const E = match[2] ? (+match[2]) : 0;\n\n    return Math.max(0, digits - E);\n};\n\nexport default decimalPlaces;\n","\n/* eslint no-bitwise: [\"error\", { \"allow\": [\"&\", \"<<\"] }] */\nimport _ from 'lodash';\n\n//https://github.com/grbl/grbl/blob/master/grbl/report.c\nclass GrblLineParserResultStatus {\n    // * Grbl v0.9\n    //   <Idle>\n    //   <Idle,MPos:5.529,0.560,7.000,WPos:1.529,-5.440,-0.000>\n    //   <Idle,MPos:5.529,0.560,7.000,0.000,WPos:1.529,-5.440,-0.000,0.000>\n    //   <Idle,MPos:0.000,0.000,0.000,WPos:0.000,0.000,0.000,Buf:0,RX:0,Lim:000>\n    //   <Idle,MPos:0.000,0.000,0.000,WPos:0.000,0.000,0.000,Buf:0,RX:0,Ln:0,F:0.>\n    // * Grbl v1.1\n    //   <Idle|MPos:3.000,2.000,0.000|FS:0,0>\n    //   <Hold:0|MPos:5.000,2.000,0.000|FS:0,0>\n    //   <Idle|MPos:5.000,2.000,0.000|FS:0,0|Ov:100,100,100>\n    //   <Idle|MPos:5.000,2.000,0.000|FS:0,0|WCO:0.000,0.000,0.000>\n    //   <Run|MPos:23.036,1.620,0.000|FS:500,0>\n    static parse(line) {\n        const r = line.match(/^<(.+)>$/);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {};\n        //const pattern = /[a-zA-Z]+(:[0-9\\.\\-]+(,[0-9\\.\\-]+){0,5})?/g;\n        const pattern = /[a-zA-Z]+(:[a-zA-Z0-9\\.\\-]+(,[0-9\\.\\-[a]+){0,5})?/g;\n        const params = r[1].match(pattern);\n        const result = {};\n\n\n        { // Active State (v0.9, v1.1)\n            // * Valid states types: Idle, Run, Hold, Jog, Alarm, Door, Check, Home, Sleep\n            // * Sub-states may be included via : a colon delimiter and numeric code.\n            // * Current sub-states are:\n            //   - Hold:0 Hold complete. Ready to resume.\n            //   - Hold:1 Hold in-progress. Reset will throw an alarm.\n            //   - Door:0 Door closed. Ready to resume.\n            //   - Door:1 Machine stopped. Door still ajar. Can't resume until closed.\n            //   - Door:2 Door opened. Hold (or parking retract) in-progress. Reset will throw an alarm.\n            //   - Door:3 Door closed and resuming. Restoring from park, if applicable. Reset will throw an alarm.\n            const states = (params.shift() || '').split(':');\n            payload.activeState = states[0] || '';\n            payload.subState = Number(states[1] || '');\n        }\n\n        for (let param of params) {\n            const nv = param.match(/^(.+):(.+)/);\n            if (nv) {\n                let type = nv[1];\n                let value = nv[2].split(',');\n                result[type] = value;\n            }\n        }\n        // Machine Position (v0.9, v1.1)\n        if (_.has(result, 'MPos')) {\n            const axes = ['x', 'y', 'z', 'a', 'b', 'c'];\n            const mPos = _.get(result, 'MPos', ['0.000', '0.000', '0.000']); // Defaults to [x, y, z]\n            payload.mpos = {};\n            for (let i = 0; i < mPos.length; ++i) {\n                payload.mpos[axes[i]] = mPos[i];\n            }\n        }\n\n        // Work Position (v0.9, v1.1)\n        if (_.has(result, 'WPos')) {\n            const axes = ['x', 'y', 'z', 'a', 'b', 'c'];\n            const wPos = _.get(result, 'WPos', ['0.000', '0.000', '0.000']); // Defaults to [x, y, z]\n            payload.wpos = {};\n            for (let i = 0; i < wPos.length; ++i) {\n                payload.wpos[axes[i]] = wPos[i];\n            }\n        }\n\n        // Work Coordinate Offset (v1.1)\n        if (_.has(result, 'WCO')) {\n            const axes = ['x', 'y', 'z', 'a', 'b', 'c'];\n            const wco = _.get(result, 'WCO', ['0.000', '0.000', '0.000']); // Defaults to [x, y, z]\n            payload.wco = {};\n            for (let i = 0; i < wco.length; ++i) {\n                payload.wco[axes[i]] = wco[i];\n            }\n        }\n\n        // Planner Buffer (v0.9)\n        if (_.has(result, 'Buf')) {\n            payload.buf = payload.buf || {};\n            payload.buf.planner = Number(_.get(result, 'Buf[0]', 0));\n        }\n\n        // RX Buffer (v0.9)\n        if (_.has(result, 'RX')) {\n            payload.buf = payload.buf || {};\n            payload.buf.rx = Number(_.get(result, 'RX[0]', 0));\n        }\n\n        // Buffer State (v1.1)\n        // Bf:15,128. The first value is the number of available blocks in the planner buffer and the second is number of available bytes in the serial RX buffer.\n        if (_.has(result, 'Bf')) {\n            payload.buf = payload.buf || {};\n            payload.buf.planner = Number(_.get(result, 'Bf[0]', 0));\n            payload.buf.rx = Number(_.get(result, 'Bf[1]', 0));\n        }\n\n        // Line Number (v0.9, v1.1)\n        // Ln:99999 indicates line 99999 is currently being executed.\n        if (_.has(result, 'Ln')) {\n            payload.ln = Number(_.get(result, 'Ln[0]', 0));\n        }\n\n        // Feed Rate (v0.9, v1.1)\n        // F:500 contains real-time feed rate data as the value.\n        // This appears only when VARIABLE_SPINDLE is disabled.\n        if (_.has(result, 'F')) {\n            payload.feedrate = Number(_.get(result, 'F[0]', 0));\n        }\n\n        // Current Feed and Speed (v1.1)\n        // FS:500,8000 contains real-time feed rate, followed by spindle speed, data as the values.\n        if (_.has(result, 'FS')) {\n            payload.feedrate = Number(_.get(result, 'FS[0]', 0));\n            payload.spindle = Number(_.get(result, 'FS[1]', 0));\n        }\n\n        // Limit Pins (v0.9)\n        // X_AXIS is (1<<0) or bit 0\n        // Y_AXIS is (1<<1) or bit 1\n        // Z_AXIS is (1<<2) or bit 2\n        if (_.has(result, 'Lim')) {\n            const value = Number(_.get(result, 'Lim[0]', 0));\n            payload.pinState = [\n                (value & (1 << 0)) ? 'X' : '',\n                (value & (1 << 1)) ? 'Y' : '',\n                (value & (1 << 2)) ? 'Z' : '',\n                (value & (1 << 2)) ? 'A' : ''\n            ].join('');\n        }\n\n        // Input Pin State (v1.1)\n        // * Pn:XYZPDHRS indicates which input pins Grbl has detected as 'triggered'.\n        // * Each letter of XYZPDHRS denotes a particular 'triggered' input pin.\n        //   - X Y Z XYZ limit pins, respectively\n        //   - P the probe pin.\n        //   - D H R S the door, hold, soft-reset, and cycle-start pins, respectively.\n        //   - Example: Pn:PZ indicates the probe and z-limit pins are 'triggered'.\n        //   - Note: A may be added in later versions for an A-axis limit pin.\n        if (_.has(result, 'Pn')) {\n            const pins = _.get(result, 'Pn[0]', '');\n            payload.pinState = {};\n            pins.split('').forEach(pin => {\n                payload.pinState[pin] = true;\n            });\n        }\n\n        // Override Values (v1.1)\n        // Ov:100,100,100 indicates current override values in percent of programmed values for feed, rapids, and spindle speed, respectively.\n        if (_.has(result, 'Ov')) {\n            payload.ov = _.get(result, 'Ov', []).map(v => Number(v));\n        }\n\n        // Accessory State (v1.1)\n        // * A:SFM indicates the current state of accessory machine components, such as the spindle and coolant.\n        // * Each letter after A: denotes a particular state. When it appears, the state is enabled. When it does not appear, the state is disabled.\n        //   - S indicates spindle is enabled in the CW direction. This does not appear with C.\n        //   - C indicates spindle is enabled in the CCW direction. This does not appear with S.\n        //   - F indicates flood coolant is enabled.\n        //   - M indicates mist coolant is enabled.\n        if (_.has(result, 'A')) {\n            payload.accessoryState = _.get(result, 'A[0]', '');\n        }\n\n        return {\n            type: GrblLineParserResultStatus,\n            payload: payload\n        };\n    }\n}\n\nexport default GrblLineParserResultStatus;\n","\nclass GrblLineParserResultOk {\n    static parse(line) {\n        const r = line.match(/^ok$/);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {};\n\n        return {\n            type: GrblLineParserResultOk,\n            payload: payload\n        };\n    }\n}\n\nexport default GrblLineParserResultOk;\n","\n// https://github.com/grbl/grbl/wiki/Interfacing-with-Grbl#grbl-response-meanings\nclass GrblLineParserResultError {\n    static parse(line) {\n        const r = line.match(/^error:\\s*(.+)$/);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {\n            message: r[1]\n        };\n\n        return {\n            type: GrblLineParserResultError,\n            payload: payload\n        };\n    }\n}\n\nexport default GrblLineParserResultError;\n","\n// https://github.com/grbl/grbl/wiki/Interfacing-with-Grbl#alarms\nclass GrblLineParserResultAlarm {\n    static parse(line) {\n        const r = line.match(/^ALARM:\\s*(.+)$/);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {\n            message: r[1]\n        };\n\n        return {\n            type: GrblLineParserResultAlarm,\n            payload: payload\n        };\n    }\n}\n\nexport default GrblLineParserResultAlarm;\n","\n/* eslint max-len: 0 */\n// Grbl\nexport const GRBL = 'Grbl';\n\n// Active State\nexport const GRBL_ACTIVE_STATE_IDLE = 'Idle';\nexport const GRBL_ACTIVE_STATE_RUN = 'Run';\nexport const GRBL_ACTIVE_STATE_HOLD = 'Hold';\nexport const GRBL_ACTIVE_STATE_DOOR = 'Door';\nexport const GRBL_ACTIVE_STATE_HOME = 'Home';\nexport const GRBL_ACTIVE_STATE_SLEEP = 'Sleep';\nexport const GRBL_ACTIVE_STATE_ALARM = 'Alarm';\nexport const GRBL_ACTIVE_STATE_CHECK = 'Check';\n\n// Real-time Commands: ~, !, ?, and Ctrl-x\nexport const GRBL_REALTIME_COMMANDS = [\n    '~', // Cycle Start\n    '!', // Feed Hold\n    '?', // Current Status\n    '\\x18' // Reset Grbl (Ctrl-X)\n];\n\n// https://github.com/grbl/grbl/wiki/Configuring-Grbl-v0.9\n// http://linuxcnc.org/docs/html/gcode/overview.html#cap:modal-groups\nexport const GRBL_MODAL_GROUPS = [\n    { // Motion Mode (Defaults to G0)\n        group: 'motion',\n        modes: ['G0', 'G1', 'G2', 'G3', 'G38.2', 'G38.3', 'G38.4', 'G38.5', 'G80']\n    },\n    { // Work Coordinate System Select (Defaults to G54)\n        group: 'wcs',\n        modes: ['G54', 'G55', 'G56', 'G57', 'G58', 'G59']\n    },\n    { // Plane Select (Defaults to G17)\n        group: 'plane',\n        modes: ['G17', 'G18', 'G19']\n    },\n    { // Units Mode (Defaults to G21)\n        group: 'units',\n        modes: ['G20', 'G21']\n    },\n    { // Distance Mode (Defaults to G90)\n        group: 'distance',\n        modes: ['G90', 'G91']\n    },\n    { // Feed Rate Mode (Defaults to G94)\n        group: 'feedrate',\n        modes: ['G93', 'G94']\n    },\n    { // Program Mode (Defaults to M0)\n        group: 'program',\n        modes: ['M0', 'M1', 'M2', 'M30']\n    },\n    { // Spindle State (Defaults to M5)\n        group: 'spindle',\n        modes: ['M3', 'M4', 'M5']\n    },\n    { // Coolant State (Defaults to M9)\n        group: 'coolant',\n        modes: ['M7', 'M8', 'M9']\n    }\n];\n\n// Errors\n// https://github.com/gnea/grbl/blob/master/doc/csv/error_codes_en_US.csv\nexport const GRBL_ERRORS = [\n    {\n        code: 1,\n        message: 'Expected command letter',\n        description: 'G-code words consist of a letter and a value. Letter was not found.'\n    },\n    {\n        code: 2,\n        message: 'Bad number format',\n        description: 'Missing the expected G-code word value or numeric value format is not valid.'\n    },\n    {\n        code: 3,\n        message: 'Invalid statement',\n        description: 'Grbl \\$\\' system command was not recognized or supported.'\n    },\n    {\n        code: 4,\n        message: 'Value < 0',\n        description: 'Negative value received for an expected positive value.'\n    },\n    {\n        code: 5,\n        message: 'Setting disabled',\n        description: 'Homing cycle failure. Homing is not enabled via settings.'\n    },\n    {\n        code: 6,\n        message: 'Value < 3 usec',\n        description: 'Minimum step pulse time must be greater than 3usec.'\n    },\n    {\n        code: 7,\n        message: 'EEPROM read fail. Using defaults',\n        description: 'An EEPROM read failed. Auto-restoring affected EEPROM to default values.'\n    },\n    {\n        code: 8,\n        message: 'Not idle',\n        description: 'Grbl \\'$\\' command cannot be used unless Grbl is IDLE. Ensures smooth operation during a job.'\n    },\n    {\n        code: 9,\n        message: 'G-code lock',\n        description: 'G-code commands are locked out during alarm or jog state.'\n    },\n    {\n        code: 10,\n        message: 'Homing not enabled',\n        description: 'Soft limits cannot be enabled without homing also enabled.'\n    },\n    {\n        code: 11,\n        message: 'Line overflow',\n        description: 'Max characters per line exceeded. Received command line was not executed.'\n    },\n    {\n        code: 12,\n        message: 'Step rate > 30kHz',\n        description: 'Grbl \\'$\\' setting value cause the step rate to exceed the maximum supported.'\n    },\n    {\n        code: 13,\n        message: 'Check Door',\n        description: 'Safety door detected as opened and door state initiated.'\n    },\n    {\n        code: 14,\n        message: 'Line length exceeded',\n        description: 'Build info or startup line exceeded EEPROM line length limit. Line not stored.'\n    },\n    {\n        code: 15,\n        message: 'Travel exceeded',\n        description: 'Jog target exceeds machine travel. Jog command has been ignored.'\n    },\n    {\n        code: 16,\n        message: 'Invalid jog command',\n        description: 'Jog command has no \\'=\\' or contains prohibited g-code.'\n    },\n    {\n        code: 17,\n        message: 'Setting disabled',\n        description: 'Laser mode requires PWM output.'\n    },\n    {\n        code: 20,\n        message: 'Unsupported command',\n        description: 'Unsupported or invalid g-code command found in block.'\n    },\n    {\n        code: 21,\n        message: 'Modal group violation',\n        description: 'More than one g-code command from same modal group found in block.'\n    },\n    {\n        code: 22,\n        message: 'Undefined feed rate',\n        description: 'Feed rate has not yet been set or is undefined.'\n    },\n    {\n        code: 23,\n        message: 'Invalid gcode ID:23',\n        description: 'G-code command in block requires an integer value.'\n    },\n    {\n        code: 24,\n        message: 'Invalid gcode ID:24',\n        description: 'More than one g-code command that requires axis words found in block.'\n    },\n    {\n        code: 25,\n        message: 'Invalid gcode ID:25',\n        description: 'Repeated g-code word found in block.'\n    },\n    {\n        code: 26,\n        message: 'Invalid gcode ID:26',\n        description: 'No axis words found in block for g-code command or current modal state which requires them.'\n    },\n    {\n        code: 27,\n        message: 'Invalid gcode ID:27',\n        description: 'Line number value is invalid.'\n    },\n    {\n        code: 28,\n        message: 'Invalid gcode ID:28',\n        description: 'G-code command is missing a required value word.'\n    },\n    {\n        code: 29,\n        message: 'Invalid gcode ID:29',\n        description: 'G59.x work coordinate systems are not supported.'\n    },\n    {\n        code: 30,\n        message: 'Invalid gcode ID:30',\n        description: 'G53 only allowed with G0 and G1 motion modes.'\n    },\n    {\n        code: 31,\n        message: 'Invalid gcode ID:31',\n        description: 'Axis words found in block when no command or current modal state uses them.'\n    },\n    {\n        code: 32,\n        message: 'Invalid gcode ID:32',\n        description: 'G2 and G3 arcs require at least one in-plane axis word.'\n    },\n    {\n        code: 33,\n        message: 'Invalid gcode ID:33',\n        description: 'Motion command target is invalid.'\n    },\n    {\n        code: 34,\n        message: 'Invalid gcode ID:34',\n        description: 'Arc radius value is invalid.'\n    },\n    {\n        code: 35,\n        message: 'Invalid gcode ID:35',\n        description: 'G2 and G3 arcs require at least one in-plane offset word.'\n    },\n    {\n        code: 36,\n        message: 'Invalid gcode ID:36',\n        description: 'Unused value words found in block.'\n    },\n    {\n        code: 37,\n        message: 'Invalid gcode ID:37',\n        description: 'G43.1 dynamic tool length offset is not assigned to configured tool length axis.'\n    },\n    {\n        code: 38,\n        message: 'Invalid gcode ID:38',\n        description: 'Tool number greater than max supported value.'\n    }\n];\n\n// Alarms\n// https://github.com/gnea/grbl/blob/master/doc/csv/alarm_codes_en_US.csv\nexport const GRBL_ALARMS = [\n    {\n        code: 1,\n        message: 'Hard limit',\n        description: 'Hard limit has been triggered. Machine position is likely lost due to sudden halt. Re-homing is highly recommended.'\n    },\n    {\n        code: 2,\n        message: 'Soft limit',\n        description: 'Soft limit alarm. G-code motion target exceeds machine travel. Machine position retained. Alarm may be safely unlocked.'\n    },\n    {\n        code: 3,\n        message: 'Abort during cycle',\n        description: 'Reset while in motion. Machine position is likely lost due to sudden halt. Re-homing is highly recommended.'\n    },\n    {\n        code: 4,\n        message: 'Probe fail',\n        description: 'Probe fail. Probe is not in the expected initial state before starting probe cycle when G38.2 and G38.3 is not triggered and G38.4 and G38.5 is triggered.'\n    },\n    {\n        code: 5,\n        message: 'Probe fail',\n        description: 'Probe fail. Probe did not contact the workpiece within the programmed travel for G38.2 and G38.4.'\n    },\n    {\n        code: 6,\n        message: 'Homing fail',\n        description: 'Homing fail. The active homing cycle was reset.'\n    },\n    {\n        code: 7,\n        message: 'Homing fail',\n        description: 'Homing fail. Safety door was opened during homing cycle.'\n    },\n    {\n        code: 8,\n        message: 'Homing fail',\n        description: 'Homing fail. Pull off travel failed to clear limit switch. Try increasing pull-off setting or check wiring.'\n    },\n    {\n        code: 9,\n        message: 'Homing fail',\n        description: 'Homing fail. Could not find limit switch within search distances. Try increasing max travel, decreasing pull-off distance, or check wiring.'\n    },\n    {\n        code: 'Homing',\n        message: 'Homing required',\n        description: 'Homing must be run if limit switches and homing cycle is enabled in EEPROM'\n    }\n];\n\n// Settings\n// https://github.com/gnea/grbl/blob/master/doc/csv/setting_codes_en_US.csv\nexport const GRBL_SETTINGS = [\n    {\n        setting: '$0',\n        message: 'Step pulse time',\n        category: 'Motors',\n        units: 'μs',\n        description: 'Sets time length per step. Minimum 3usec.',\n        inputType: 'number',\n        min: 3,\n        max: 12,\n        step: 1\n    },\n    {\n        setting: '$1',\n        message: 'Step idle delay',\n        category: 'Motors',\n        units: 'ms',\n        description: 'Sets a short hold delay when stopping to let dynamics settle before disabling steppers. Value 255 keeps motors enabled with no delay.',\n        inputType: 'number',\n        min: 25,\n        max: 255,\n        step: 5\n    },\n    {\n        setting: '$2',\n        message: 'Step pulse invert',\n        category: 'Motors',\n        units: 'mask',\n        description: 'Inverts the step signal. Set axis bit to invert (00000ZYX).',\n        inputType: 'mask2'\n    },\n    {\n        setting: '$3',\n        message: 'Step direction invert',\n        category: 'Motors',\n        units: 'mask',\n        description: 'Inverts the direction signal. Set axis bit to invert (00000ZYX).',\n        inputType: 'mask3'\n    },\n    {\n        setting: '$4',\n        message: 'Invert step enable pin',\n        category: 'Pins',\n        units: 'boolean',\n        description: 'Inverts the stepper driver enable pin signal.',\n        inputType: 'switch'\n    },\n    {\n        setting: '$5',\n        message: 'Invert limit pins',\n        category: 'Pins',\n        units: 'boolean',\n        description: 'Inverts the all of the limit input pins.',\n        inputType: 'switch'\n    },\n    {\n        setting: '$6',\n        message: 'Invert probe pin',\n        category: 'Pins',\n        units: 'boolean',\n        description: 'Inverts the probe input pin signal.',\n        inputType: 'switch'\n    },\n    {\n        setting: '$10',\n        message: 'Status report options',\n        category: 'GRBL',\n        units: 'mask',\n        description: 'Alters data included in status reports.',\n        inputType: 'mask10'\n    },\n    {\n        setting: '$11',\n        message: 'Junction deviation',\n        category: 'GRBL',\n        units: 'mm',\n        description: 'Sets how fast Grbl travels through consecutive motions. Lower value slows it down.',\n        inputType: 'number',\n        min: 0.001,\n        max: 0.020,\n        step: 0.001\n    },\n    {\n        setting: '$12',\n        message: 'Arc tolerance',\n        category: 'GRBL',\n        units: 'mm',\n        description: 'Sets the G2 and G3 arc tracing accuracy based on radial error. Beware: A very small value may effect performance.',\n        inputType: 'number',\n        min: 0.001,\n        max: 0.003,\n        step: 0.001\n    },\n    {\n        setting: '$13',\n        message: 'Report in inches',\n        category: 'GRBL',\n        units: 'boolean',\n        description: 'Enables inch units when returning any position and rate value that is not a settings value.',\n        inputType: 'switch'\n    },\n    {\n        setting: '$20',\n        message: 'Soft limits enable',\n        category: 'Homing',\n        units: 'boolean',\n        description: 'Enables soft limits checks within machine travel and sets alarm when exceeded. Requires homing.',\n        inputType: 'switch'\n    },\n    {\n        setting: '$21',\n        message: 'Hard limits enable',\n        category: 'Homing',\n        units: 'boolean',\n        description: 'Enables hard limits. Immediately halts motion and throws an alarm when switch is triggered.',\n        inputType: 'switch'\n    },\n    {\n        setting: '$22',\n        message: 'Homing cycle enable',\n        category: 'Homing',\n        units: 'boolean',\n        description: 'Enables homing cycle. Requires limit switches on all axes.',\n        inputType: 'switch'\n    },\n    {\n        setting: '$23',\n        message: 'Homing direction invert',\n        category: 'Homing',\n        units: 'mask',\n        description: 'Homing searches for a switch in the positive direction. Set axis bit (00000ZYX) to search in negative direction.',\n        inputType: 'mask23'\n    },\n    {\n        setting: '$24',\n        message: 'Homing locate feed rate',\n        category: 'Homing',\n        units: 'mm/min',\n        description: 'Feed rate to slowly engage limit switch to determine its location accurately.',\n        inputType: 'number',\n        min: 1,\n        max: 30,\n        step: 1\n    },\n    {\n        setting: '$25',\n        message: 'Homing search seek rate',\n        category: 'Homing',\n        units: 'mm/min',\n        description: 'Seek rate to quickly find the limit switch before the slower locating phase.',\n        inputType: 'number',\n        min: 100,\n        max: 1000,\n        step: 100\n    },\n    {\n        setting: '$26',\n        message: 'Homing switch debounce delay',\n        category: 'Homing',\n        units: 'ms',\n        description: 'Sets a short delay between phases of homing cycle to let a switch debounce.',\n        inputType: 'number',\n        min: 5,\n        max: 255,\n        step: 5\n    },\n    {\n        setting: '$27',\n        message: 'Homing switch pull-off distance',\n        category: 'Homing',\n        units: 'mm',\n        description: 'Retract distance after triggering switch to disengage it. Homing will fail if switch isn\\'t cleared.',\n        inputType: 'number',\n        min: 0,\n        max: 5,\n        step: 0.5\n    },\n    {\n        setting: '$30',\n        message: 'Maximum spindle speed',\n        category: 'Spindle',\n        units: 'rpm',\n        description: 'Maximum spindle speed. Sets PWM to 100% duty cycle.',\n        inputType: 'number',\n        min: 100,\n        max: 10000,\n        step: 100\n    },\n    {\n        setting: '$31',\n        message: 'Minimum spindle speed',\n        category: 'Spindle',\n        units: 'rpm',\n        description: 'Minimum spindle speed. Sets PWM to 0.4% or lowest duty cycle.',\n        inputType: 'number',\n        min: 1,\n        max: 100,\n        step: 1\n    },\n    {\n        setting: '$32',\n        message: 'Laser-mode enabled as spindle',\n        category: 'Spindle',\n        units: 'boolean',\n        description: 'Converts spindle commands into laser mode. Consecutive G1/2/3 commands will not halt when spindle speed is changed.',\n        inputType: 'switch'\n    },\n    {\n        setting: '$100',\n        message: 'X-axis travel resolution',\n        category: 'Motors',\n        units: 'step/mm',\n        description: 'X-axis travel resolution in steps per millimeter.',\n        inputType: 'number',\n        min: 10,\n        max: 500,\n        step: 10\n    },\n    {\n        setting: '$101',\n        message: 'Y-axis travel resolution',\n        category: 'Motors',\n        units: 'step/mm',\n        description: 'Y-axis travel resolution in steps per millimeter.',\n        inputType: 'number',\n        min: 10,\n        max: 500,\n        step: 10\n    },\n    {\n        setting: '$102',\n        message: 'Z-axis travel resolution',\n        category: 'Motors',\n        units: 'step/mm',\n        description: 'Z-axis travel resolution in steps per millimeter.',\n        inputType: 'number',\n        min: 10,\n        max: 500,\n        step: 10\n    },\n    {\n        setting: '$110',\n        message: 'X-axis maximum rate',\n        category: 'Motors',\n        units: 'mm/min',\n        description: 'X-axis maximum rate. Used as G0 rapid rate.',\n        inputType: 'number',\n        min: 100,\n        max: 1500,\n        step: 100\n    },\n    {\n        setting: '$111',\n        message: 'Y-axis maximum rate',\n        category: 'Motors',\n        units: 'mm/min',\n        description: 'Y-axis maximum rate. Used as G0 rapid rate.',\n        inputType: 'number',\n        min: 100,\n        max: 1500,\n        step: 100\n    },\n    {\n        setting: '$112',\n        message: 'Z-axis maximum rate',\n        category: 'Motors',\n        units: 'mm/min',\n        description: 'Z-axis maximum rate. Used as G0 rapid rate.',\n        inputType: 'number',\n        min: 10,\n        max: 1000,\n        step: 10\n    },\n    {\n        setting: '$120',\n        message: 'X-axis acceleration',\n        category: 'Motors',\n        units: 'mm/sec^2',\n        description: 'X-axis acceleration. Used for motion planning to not exceed motor torque and lose steps.',\n        inputType: 'number',\n        min: 1,\n        max: 15,\n        step: 1\n    },\n    {\n        setting: '$121',\n        message: 'Y-axis acceleration',\n        category: 'Motors',\n        units: 'mm/sec^2',\n        description: 'Y-axis acceleration. Used for motion planning to not exceed motor torque and lose steps.',\n        inputType: 'number',\n        min: 1,\n        max: 15,\n        step: 1\n    },\n    {\n        setting: '$122',\n        message: 'Z-axis acceleration',\n        category: 'Motors',\n        units: 'mm/sec^2',\n        description: 'Z-axis acceleration. Used for motion planning to not exceed motor torque and lose steps.',\n        inputType: 'number',\n        min: 1,\n        max: 15,\n        step: 1\n    },\n    {\n        setting: '$130',\n        message: 'X-axis maximum travel',\n        category: 'Limits',\n        units: 'mm',\n        description: 'Maximum X-axis travel distance from homing switch. Determines valid machine space for soft-limits and homing search distances.',\n        inputType: 'number',\n        min: 1,\n        max: 1500,\n        step: 10\n    },\n    {\n        setting: '$131',\n        message: 'Y-axis maximum travel',\n        category: 'Limits',\n        units: 'mm',\n        description: 'Maximum Y-axis travel distance from homing switch. Determines valid machine space for soft-limits and homing search distances.',\n        inputType: 'number',\n        min: 1,\n        max: 1500,\n        step: 10\n    },\n    {\n        setting: '$132',\n        message: 'Z-axis maximum travel',\n        category: 'Limits',\n        units: 'mm',\n        description: 'Maximum Z-axis travel distance from homing switch. Determines valid machine space for soft-limits and homing search distances.',\n        inputType: 'number',\n        min: 1,\n        max: 1500,\n        step: 10\n    }\n];\n","\nimport ensureArray from 'ensure-array';\nimport _compact from 'lodash/compact';\nimport _find from 'lodash/find';\nimport _get from 'lodash/get';\nimport _includes from 'lodash/includes';\nimport _set from 'lodash/set';\nimport _trim from 'lodash/trim';\nimport {\n    GRBL_MODAL_GROUPS\n} from './constants';\n\nclass GrblLineParserResultParserState {\n    // * Grbl v0.9\n    //   [G38.2 G54 G17 G21 G91 G94 M0 M5 M9 T0 F20. S0.]\n    // * Grbl v1.1\n    //   [GC:G0 G54 G17 G21 G90 G94 M0 M5 M9 T0 S0.0 F500.0]\n    static parse(line) {\n        const r = line.match(/^\\[(?:GC:)?((?:[a-zA-Z][0-9]+(?:\\.[0-9]*)?\\s*)+)\\]$/);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {};\n        const words = _compact(r[1].split(' '))\n            .map((word) => {\n                return _trim(word);\n            });\n\n        for (let i = 0; i < words.length; ++i) {\n            const word = words[i];\n\n            // Gx, Mx\n            if (word.indexOf('G') === 0 || word.indexOf('M') === 0) {\n                const r = _find(GRBL_MODAL_GROUPS, (group) => {\n                    return _includes(group.modes, word);\n                });\n\n                if (!r) {\n                    continue;\n                }\n\n                const prevWord = _get(payload, 'modal.' + r.group, '');\n                if (prevWord) {\n                    _set(payload, 'modal.' + r.group, ensureArray(prevWord).concat(word));\n                } else {\n                    _set(payload, 'modal.' + r.group, word);\n                }\n\n                continue;\n            }\n\n            // T: tool number\n            if (word.indexOf('T') === 0) {\n                _set(payload, 'tool', word.substring(1));\n                continue;\n            }\n\n            // F: feed rate\n            if (word.indexOf('F') === 0) {\n                _set(payload, 'feedrate', word.substring(1));\n                continue;\n            }\n\n            // S: spindle speed\n            if (word.indexOf('S') === 0) {\n                _set(payload, 'spindle', word.substring(1));\n                continue;\n            }\n        }\n\n        return {\n            type: GrblLineParserResultParserState,\n            payload: payload\n        };\n    }\n}\n\nexport default GrblLineParserResultParserState;\n","\nclass GrblLineParserResultParameters {\n    static parse(line) {\n        const r = line.match(/^\\[(G54|G55|G56|G57|G58|G59|G28|G30|G92|TLO|PRB):(.+)\\]$/);\n        if (!r) {\n            return null;\n        }\n\n        const name = r[1];\n        const value = r[2];\n        const payload = {\n            name: name,\n            value: ''\n        };\n\n        // [Gxx:0.000]\n        const re = /^G\\d+$/i;\n        if (re.test(name)) {\n            const axes = ['x', 'y', 'z', 'a', 'b', 'c'];\n            const list = value.split(',');\n            payload.value = {};\n            for (let i = 0; i < list.length; ++i) {\n                payload.value[axes[i]] = list[i];\n            }\n        }\n\n        // [TLO:0.000]\n        if (name === 'TLO') {\n            payload.value = value;\n        }\n\n        // [PRB:0.000,0.000,1.492:1]\n        if (name === 'PRB') {\n            const axes = ['x', 'y', 'z', 'a', 'b', 'c'];\n            const [str, result] = value.split(':');\n            const list = str.split(',');\n            payload.value = {};\n            payload.value.result = Number(result);\n            for (let i = 0; i < list.length; ++i) {\n                payload.value[axes[i]] = list[i];\n            }\n        }\n\n        return {\n            type: GrblLineParserResultParameters,\n            payload: payload\n        };\n    }\n}\n\nexport default GrblLineParserResultParameters;\n","\nclass GrblLineParserResultHelp {\n    static parse(line) {\n        // * Grbl v1.1\n        //   [HLP:]\n        const r = line.match(/^\\[(?:HLP:)(.+)\\]$/);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {\n            message: r[1]\n        };\n\n        return {\n            type: GrblLineParserResultHelp,\n            payload: payload\n        };\n    }\n}\n\nexport default GrblLineParserResultHelp;\n","\nclass GrblLineParserResultVersion {\n    static parse(line) {\n        // * Grbl v1.1\n        //   [VER:]\n        const r = line.match(/^\\[(?:VER:)(.+)\\]$/);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {\n            message: r[1]\n        };\n\n        return {\n            type: GrblLineParserResultVersion,\n            payload: payload\n        };\n    }\n}\n\nexport default GrblLineParserResultVersion;\n","\nclass GrblLineParserResultOption {\n    static parse(line) {\n        // * Grbl v1.1\n        //   [OPT:]\n        const r = line.match(/^\\[(?:OPT:)(.+)\\]$/);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {\n            message: r[1]\n        };\n\n        return {\n            type: GrblLineParserResultOption,\n            payload: payload\n        };\n    }\n}\n\nexport default GrblLineParserResultOption;\n","\nclass GrblLineParserResultEcho {\n    static parse(line) {\n        // * Grbl v1.1\n        //   [echo:]\n        const r = line.match(/^\\[(?:echo:)(.+)\\]$/);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {\n            message: r[1]\n        };\n\n        return {\n            type: GrblLineParserResultEcho,\n            payload: payload\n        };\n    }\n}\n\nexport default GrblLineParserResultEcho;\n","\n// https://github.com/grbl/grbl/wiki/Interfacing-with-Grbl#feedback-messages\nclass GrblLineParserResultFeedback {\n    // * Grbl v0.9\n    //   []\n    // * Grbl v1.1\n    //   [MSG:]\n    static parse(line) {\n        const r = line.match(/^\\[(?:MSG:)?(.+)\\]$/);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {\n            message: r[1]\n        };\n\n        return {\n            type: GrblLineParserResultFeedback,\n            payload: payload\n        };\n    }\n}\n\nexport default GrblLineParserResultFeedback;\n","\nimport _ from 'lodash';\n\nclass GrblLineParserResultSettings {\n    static parse(line) {\n        const r = line.match(/^(\\$[^=]+)=([^ ]*)\\s*(.*)/);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {\n            name: r[1],\n            value: r[2],\n            message: _.trim(r[3], '()')\n        };\n\n        return {\n            type: GrblLineParserResultSettings,\n            payload: payload\n        };\n    }\n}\n\nexport default GrblLineParserResultSettings;\n","\nimport _trim from 'lodash/trim';\n\nconst pattern = new RegExp(/^([a-zA-Z0-9]+)\\s+((?:\\d+\\.){1,2}\\d+[a-zA-Z0-9\\-\\.]*)([^\\[]*\\[[^\\]]+\\].*)?/);\n\nclass GrblLineParserResultStartup {\n    // Grbl 0.9j ['$' for help]\n    // Grbl 1.1d ['$' for help]\n    // Grbl 1.1\n    // Grbl 1.1h: LongMill build ['$' for help]\n    // Grbl 1.1h ['$' for help] LongMill build Feb 25, 2020\n    // gCarvin 2.0.0 ['$' for help]\n    static parse(line) {\n        const r = line.match(pattern);\n        if (!r) {\n            return null;\n        }\n\n        const firmware = r[1];\n        const version = r[2];\n        const message = _trim(r[3]);\n\n        const payload = {\n            firmware,\n            version,\n            message,\n        };\n\n        return {\n            type: GrblLineParserResultStartup,\n            payload: payload\n        };\n    }\n}\n\nexport default GrblLineParserResultStartup;\n","\nimport _ from 'lodash';\nimport GrblLineParserResultStatus from './GrblLineParserResultStatus';\nimport GrblLineParserResultOk from './GrblLineParserResultOk';\nimport GrblLineParserResultError from './GrblLineParserResultError';\nimport GrblLineParserResultAlarm from './GrblLineParserResultAlarm';\nimport GrblLineParserResultParserState from './GrblLineParserResultParserState';\nimport GrblLineParserResultParameters from './GrblLineParserResultParameters';\nimport GrblLineParserResultHelp from './GrblLineParserResultHelp';\nimport GrblLineParserResultVersion from './GrblLineParserResultVersion';\nimport GrblLineParserResultOption from './GrblLineParserResultOption';\nimport GrblLineParserResultEcho from './GrblLineParserResultEcho';\nimport GrblLineParserResultFeedback from './GrblLineParserResultFeedback';\nimport GrblLineParserResultSettings from './GrblLineParserResultSettings';\nimport GrblLineParserResultStartup from './GrblLineParserResultStartup';\n\n// Grbl v1.1\n// https://github.com/gnea/grbl/blob/edge/doc/markdown/interface.md\n\nclass GrblLineParser {\n    parse(line) {\n        const parsers = [\n            // <>\n            GrblLineParserResultStatus,\n\n            // ok\n            GrblLineParserResultOk,\n\n            // error:x\n            GrblLineParserResultError,\n\n            // ALARM:\n            GrblLineParserResultAlarm,\n\n            // [G38.2 G54 G17 G21 G91 G94 M0 M5 M9 T0 F20. S0.] (v0.9)\n            // [GC:G38.2 G54 G17 G21 G91 G94 M0 M5 M9 T0 F20. S0.] (v1.1)\n            GrblLineParserResultParserState,\n\n            // [G54:0.000,0.000,0.000]\n            // [G55:0.000,0.000,0.000]\n            // [G56:0.000,0.000,0.000]\n            // [G57:0.000,0.000,0.000]\n            // [G58:0.000,0.000,0.000]\n            // [G59:0.000,0.000,0.000]\n            // [G28:0.000,0.000,0.000]\n            // [G30:0.000,0.000,0.000]\n            // [G92:0.000,0.000,0.000]\n            // [TLO:0.000]\n            // [PRB:0.000,0.000,0.000:0]\n            GrblLineParserResultParameters,\n\n            // [HLP:] (v1.1)\n            GrblLineParserResultHelp,\n\n            // [VER:] (v1.1)\n            GrblLineParserResultVersion,\n\n            // [OPT:] (v1.1)\n            GrblLineParserResultOption,\n\n            // [echo:] (v1.1)\n            GrblLineParserResultEcho,\n\n            // [] (v0.9)\n            // [MSG:] (v1.1)\n            GrblLineParserResultFeedback,\n\n            // $xx\n            GrblLineParserResultSettings,\n\n            // Grbl X.Xx ['$' for help]\n            GrblLineParserResultStartup\n        ];\n\n        for (let parser of parsers) {\n            const result = parser.parse(line);\n            if (result) {\n                _.set(result, 'payload.raw', line);\n                return result;\n            }\n        }\n\n        return {\n            type: null,\n            payload: {\n                raw: line\n            }\n        };\n    }\n}\n\nexport default GrblLineParser;\n","\nimport events from 'events';\nimport _ from 'lodash';\nimport decimalPlaces from '../../lib/decimal-places';\nimport GrblLineParser from './GrblLineParser';\nimport GrblLineParserResultStatus from './GrblLineParserResultStatus';\nimport GrblLineParserResultOk from './GrblLineParserResultOk';\nimport GrblLineParserResultError from './GrblLineParserResultError';\nimport GrblLineParserResultAlarm from './GrblLineParserResultAlarm';\nimport GrblLineParserResultParserState from './GrblLineParserResultParserState';\nimport GrblLineParserResultParameters from './GrblLineParserResultParameters';\nimport GrblLineParserResultFeedback from './GrblLineParserResultFeedback';\nimport GrblLineParserResultSettings from './GrblLineParserResultSettings';\nimport GrblLineParserResultStartup from './GrblLineParserResultStartup';\nimport {\n    GRBL_ACTIVE_STATE_IDLE,\n    GRBL_ACTIVE_STATE_ALARM\n} from './constants';\n\n\nclass GrblRunner extends events.EventEmitter {\n    state = {\n        status: {\n            activeState: '',\n            mpos: {\n                x: '0.000',\n                y: '0.000',\n                z: '0.000'\n            },\n            wpos: {\n                x: '0.000',\n                y: '0.000',\n                z: '0.000'\n            },\n            ov: [],\n            alarmCode: 'Homing',\n            probeActive: false,\n            pinState: {}\n        },\n        parserstate: {\n            modal: {\n                motion: 'G0', // G0, G1, G2, G3, G38.2, G38.3, G38.4, G38.5, G80\n                wcs: 'G54', // G54, G55, G56, G57, G58, G59\n                plane: 'G17', // G17: xy-plane, G18: xz-plane, G19: yz-plane\n                units: 'G21', // G20: Inches, G21: Millimeters\n                distance: 'G90', // G90: Absolute, G91: Relative\n                feedrate: 'G94', // G93: Inverse time mode, G94: Units per minute\n                program: 'M0', // M0, M1, M2, M30\n                spindle: 'M5', // M3: Spindle (cw), M4: Spindle (ccw), M5: Spindle off\n                coolant: 'M9' // M7: Mist coolant, M8: Flood coolant, M9: Coolant off, [M7,M8]: Both on\n            },\n            tool: '',\n            feedrate: '',\n            spindle: '',\n        }\n    };\n\n    settings = {\n        version: '',\n        parameters: {\n        },\n        settings: {\n        }\n    };\n\n    parser = new GrblLineParser();\n\n    parse(data) {\n        data = ('' + data).replace(/\\s+$/, '');\n        if (!data) {\n            return;\n        }\n\n        this.emit('raw', { raw: data });\n\n        const result = this.parser.parse(data) || {};\n        const { type, payload } = result;\n        const { raw } = payload;\n\n        if (type === GrblLineParserResultStatus) {\n            // Grbl v1.1\n            // WCO:0.000,10.000,2.500\n            // A current work coordinate offset is now sent to easily convert\n            // between position vectors, where WPos = MPos - WCO for each axis.\n            if (_.has(payload, 'mpos') && !_.has(payload, 'wpos')) {\n                payload.wpos = payload.wpos || {};\n                _.each(payload.mpos, (mpos, axis) => {\n                    const digits = decimalPlaces(mpos);\n                    const wco = _.get((payload.wco || this.state.status.wco), axis, 0);\n                    payload.wpos[axis] = (Number(mpos) - Number(wco)).toFixed(digits);\n                });\n            } else if (_.has(payload, 'wpos') && !_.has(payload, 'mpos')) {\n                payload.mpos = payload.mpos || {};\n                _.each(payload.wpos, (wpos, axis) => {\n                    const digits = decimalPlaces(wpos);\n                    const wco = _.get((payload.wco || this.state.status.wco), axis, 0);\n                    payload.mpos[axis] = (Number(wpos) + Number(wco)).toFixed(digits);\n                });\n            }\n\n            const probeActive = raw.includes('Pn:P');\n\n            const nextState = {\n                ...this.state,\n                status: {\n                    ...this.state.status,\n                    probeActive: probeActive,\n                    ...payload\n                }\n            };\n\n            // Delete the raw key\n            delete nextState.status.raw;\n\n            if (!_.isEqual(this.state.status, nextState.status)) {\n                this.state = nextState; // enforce change\n            }\n            this.emit('status', payload);\n            return;\n        }\n        if (type === GrblLineParserResultOk) {\n            this.emit('ok', payload);\n            return;\n        }\n        if (type === GrblLineParserResultError) {\n            // https://nodejs.org/api/events.html#events_error_events\n            // As a best practice, listeners should always be added for the 'error' events.\n            this.emit('error', payload);\n            return;\n        }\n        if (type === GrblLineParserResultAlarm) {\n            const nextState = {\n                ...this.state,\n                status: {\n                    ...this.state.status,\n                    activeState: GRBL_ACTIVE_STATE_ALARM,\n                    alarmCode: Number(payload.message)\n                }\n            };\n            if (!_.isEqual(this.state.status, nextState.status)) {\n                this.state = nextState; // enforce change\n            }\n            this.emit('alarm', payload);\n            return;\n        }\n        if (type === GrblLineParserResultParserState) {\n            const { modal, tool, feedrate, spindle } = payload;\n            const nextState = {\n                ...this.state,\n                parserstate: {\n                    modal: modal,\n                    tool: tool,\n                    feedrate: feedrate,\n                    spindle: spindle\n                }\n            };\n            if (!_.isEqual(this.state.parserstate, nextState.parserstate)) {\n                this.state = nextState; // enforce change\n            }\n            this.emit('parserstate', payload);\n            return;\n        }\n        if (type === GrblLineParserResultParameters) {\n            const { name, value } = payload;\n            const nextSettings = {\n                ...this.settings,\n                parameters: {\n                    ...this.settings.parameters,\n                    [name]: value\n                }\n            };\n            if (!_.isEqual(this.settings.parameters[name], nextSettings.parameters[name])) {\n                this.settings = nextSettings; // enforce change\n            }\n            this.emit('parameters', payload);\n            return;\n        }\n        if (type === GrblLineParserResultFeedback) {\n            this.emit('feedback', payload);\n            return;\n        }\n        if (type === GrblLineParserResultSettings) {\n            const { name, value } = payload;\n            const nextSettings = {\n                ...this.settings,\n                settings: {\n                    ...this.settings.settings,\n                    [name]: value\n                }\n            };\n            if (this.settings.settings[name] !== nextSettings.settings[name]) {\n                this.settings = nextSettings; // enforce change\n            }\n            this.emit('settings', payload);\n            return;\n        }\n        if (type === GrblLineParserResultStartup) {\n            const { version } = payload;\n            const nextSettings = { // enforce change\n                ...this.settings,\n                version: version\n            };\n            if (!_.isEqual(this.settings.version, nextSettings.version)) {\n                this.settings = nextSettings; // enforce change\n            }\n            this.emit('startup', payload);\n            return;\n        }\n        if (data.length > 0) {\n            this.emit('others', payload);\n            return;\n        }\n    }\n\n    getMachinePosition(state = this.state) {\n        return _.get(state, 'status.mpos', {});\n    }\n\n    getWorkPosition(state = this.state) {\n        return _.get(state, 'status.wpos', {});\n    }\n\n    getModalGroup(state = this.state) {\n        return _.get(state, 'parserstate.modal', {});\n    }\n\n    getTool(state = this.state) {\n        return Number(_.get(state, 'parserstate.tool')) || 0;\n    }\n\n    isAlarm() {\n        const activeState = _.get(this.state, 'status.activeState');\n        return activeState === GRBL_ACTIVE_STATE_ALARM;\n    }\n\n    isIdle() {\n        const activeState = _.get(this.state, 'status.activeState');\n        return activeState === GRBL_ACTIVE_STATE_IDLE;\n    }\n}\n\nexport default GrblRunner;\n","\n// AXIS\nexport const AXIS_E = 'e';\nexport const AXIS_X = 'x';\nexport const AXIS_Y = 'y';\nexport const AXIS_Z = 'z';\nexport const AXIS_A = 'a';\nexport const AXIS_B = 'b';\nexport const AXIS_C = 'c';\n\n// Imperial System\nexport const IMPERIAL_UNITS = 'in';\nexport const IMPERIAL_STEPS = [\n    0.0001,\n    0.0002,\n    0.0003,\n    0.0005,\n    0.001,\n    0.002,\n    0.003,\n    0.005,\n    0.01,\n    0.02,\n    0.03,\n    0.05,\n    0.1,\n    0.2,\n    0.3,\n    0.5,\n    1, // Default\n    2,\n    3,\n    5,\n    10,\n    20\n];\n\n// Metric System\nexport const METRIC_UNITS = 'mm';\nexport const METRIC_STEPS = [\n    0.001,\n    0.002,\n    0.003,\n    0.005,\n    0.01,\n    0.02,\n    0.03,\n    0.05,\n    0.1,\n    0.2,\n    0.3,\n    0.5,\n    1, // Default\n    2,\n    3,\n    5,\n    10,\n    20,\n    30,\n    50,\n    100,\n    200,\n    300,\n    500\n];\n\n// Controller\nexport const GRBL = 'Grbl';\nexport const MARLIN = 'Marlin';\n\n// Workflow State\nexport const WORKFLOW_STATE_IDLE = 'idle';\nexport const WORKFLOW_STATE_PAUSED = 'paused';\nexport const WORKFLOW_STATE_RUNNING = 'running';\n\n// Grbl Active State\nexport const GRBL_ACTIVE_STATE_IDLE = 'Idle';\nexport const GRBL_ACTIVE_STATE_RUN = 'Run';\nexport const GRBL_ACTIVE_STATE_HOLD = 'Hold';\nexport const GRBL_ACTIVE_STATE_DOOR = 'Door';\nexport const GRBL_ACTIVE_STATE_HOME = 'Home';\nexport const GRBL_ACTIVE_STATE_SLEEP = 'Sleep';\nexport const GRBL_ACTIVE_STATE_ALARM = 'Alarm';\nexport const GRBL_ACTIVE_STATE_CHECK = 'Check';\nexport const GRBL_ACTIVE_STATE_JOG = 'Jog';\nexport const GRBL_ACTIVE_STATE_TESTING = 'Testing File';\n\nexport const LASER_MODE = 'laser';\nexport const SPINDLE_MODE = 'spindle';\n\nexport const CARVING_CATEGORY = 'Carving';\nexport const OVERRIDES_CATEGORY = 'Overrides';\nexport const VISUALIZER_CATEGORY = 'Visualizer';\nexport const LOCATION_CATEGORY = 'Location';\nexport const JOGGING_CATEGORY = 'Jogging';\nexport const MACRO_CATEGORY = 'Macros';\nexport const PROBING_CATEGORY = 'Probing';\nexport const SPINDLE_LASER_CATEGORY = 'Spindle/Laser';\nexport const GENERAL_CATEGORY = 'General';\nexport const TOOLBAR_CATEGORY = 'Toolbar';\n\nexport const RENDER_NO_FILE = 'RENDER_NO_FILE';\nexport const RENDER_LOADING = 'RENDER_LOADNG';\nexport const RENDER_RENDERING = 'RENDER_RENDERING';\nexport const RENDER_RENDERED = 'RENDER_RENDERED';\n\nexport const SPIRAL_MOVEMENT = 'SPIRAL_MOVEMENT';\nexport const ZIG_ZAG_MOVEMENT = 'ZIG_ZAG_MOVEMENT';\n\nexport const START_POSITION_BACK_LEFT = 'START_POSITION_BACK_LEFT';\nexport const START_POSITION_BACK_RIGHT = 'START_POSITION_BACK_RIGHT';\nexport const START_POSITION_FRONT_LEFT = 'START_POSITION_FRONT_LEFT';\nexport const START_POSITION_FRONT_RIGHT = 'START_POSITION_FRONT_RIGHT';\n\nexport const SURFACING_VISUALIZER_CONTAINER_ID = 'SURFACING_VISUALIZER_CONTAINER_ID';\nexport const VISUALIZER_PRIMARY = 'VISUALIZER_PRIMARY';\nexport const VISUALIZER_SECONDARY = 'VISUALIZER_SECONDARY';\n","\nimport AvrgirlArduino from 'avrgirl-arduino';\nimport hex from '!file-loader!./grblsept15.hex';\nimport logger from '../../logger';\nimport store from '../../../store';\n\nconst log = logger('FlashLib: ');\nconst FlashingFirmware = (recievedPortNumber) => {\n    if (!recievedPortNumber) {\n        log.error('No port specified');\n        return;\n    }\n    const controller = store.get('controllers[\"' + recievedPortNumber + '\"]');\n    try {\n        let avrgirl = new AvrgirlArduino({\n            board: 'uno',\n            port: recievedPortNumber,\n        });\n\n        avrgirl.flash(hex, (error) => {\n            if (error) {\n                if (controller) {\n                    controller.command('flashing:failed', error);\n                }\n                log.debug(`${error} Error flashing board`);\n            } else {\n                if (controller) {\n                    controller.command('flashing:success');\n                }\n                log.debug('Flash successful');\n            }\n        });\n    } catch (error) {\n        log.debug(`${error} Error flashing board`);\n    }\n};\n\n\nexport default FlashingFirmware;\n","export default \"{\\\"$0\\\":\\\"10\\\",\\\"$1\\\":\\\"255\\\",\\\"$2\\\":\\\"0\\\",\\\"$3\\\":\\\"3\\\",\\\"$4\\\":false,\\\"$5\\\":false,\\\"$6\\\":false,\\\"$10\\\":\\\"3\\\",\\\"$11\\\":\\\"0.020\\\",\\\"$12\\\":\\\"0.002\\\",\\\"$13\\\":false,\\\"$20\\\":false,\\\"$21\\\":false,\\\"$22\\\":false,\\\"$23\\\":\\\"0\\\",\\\"$24\\\":\\\"25.000\\\",\\\"$25\\\":\\\"750.000\\\",\\\"$26\\\":\\\"250\\\",\\\"$27\\\":\\\"1.000\\\",\\\"$30\\\":\\\"1000\\\",\\\"$31\\\":\\\"0\\\",\\\"$32\\\":false,\\\"$100\\\":\\\"40.000\\\",\\\"$101\\\":\\\"40.000\\\",\\\"$102\\\":\\\"200.000\\\",\\\"$110\\\":\\\"1800.000\\\",\\\"$111\\\":\\\"1800.000\\\",\\\"$112\\\":\\\"600.000\\\",\\\"$120\\\":\\\"30.000\\\",\\\"$121\\\":\\\"30.000\\\",\\\"$122\\\":\\\"15.000\\\",\\\"$130\\\":\\\"235.000\\\",\\\"$131\\\":\\\"185.000\\\",\\\"$132\\\":\\\"100.000\\\"}\";","export default \"{\\\"$0\\\":\\\"10\\\",\\\"$1\\\":\\\"100\\\",\\\"$2\\\":\\\"1\\\",\\\"$3\\\":\\\"5\\\",\\\"$4\\\":true,\\\"$5\\\":false,\\\"$6\\\":false,\\\"$10\\\":\\\"1\\\",\\\"$11\\\":\\\"0.010\\\",\\\"$12\\\":\\\"0.002\\\",\\\"$13\\\":false,\\\"$20\\\":false,\\\"$21\\\":false,\\\"$22\\\":false,\\\"$23\\\":\\\"0\\\",\\\"$24\\\":\\\"25.000\\\",\\\"$25\\\":\\\"500.000\\\",\\\"$26\\\":\\\"250\\\",\\\"$27\\\":\\\"1.000\\\",\\\"$30\\\":\\\"3000\\\",\\\"$31\\\":\\\"0\\\",\\\"$32\\\":false,\\\"$100\\\":\\\"200.000\\\",\\\"$101\\\":\\\"200.000\\\",\\\"$102\\\":\\\"200.000\\\",\\\"$110\\\":\\\"4000.000\\\",\\\"$111\\\":\\\"4000.000\\\",\\\"$112\\\":\\\"3000.000\\\",\\\"$120\\\":\\\"750.000\\\",\\\"$121\\\":\\\"750.000\\\",\\\"$122\\\":\\\"500.000\\\",\\\"$130\\\":\\\"304.000\\\",\\\"$131\\\":\\\"304.000\\\",\\\"$132\\\":\\\"105.000\\\"}\";","export default \"{\\\"$0\\\":\\\"10\\\",\\\"$1\\\":\\\"100\\\",\\\"$2\\\":\\\"1\\\",\\\"$3\\\":\\\"5\\\",\\\"$4\\\":true,\\\"$5\\\":false,\\\"$6\\\":false,\\\"$10\\\":\\\"1\\\",\\\"$11\\\":\\\"0.010\\\",\\\"$12\\\":\\\"0.002\\\",\\\"$13\\\":false,\\\"$20\\\":false,\\\"$21\\\":false,\\\"$22\\\":false,\\\"$23\\\":\\\"0\\\",\\\"$24\\\":\\\"25.000\\\",\\\"$25\\\":\\\"500.000\\\",\\\"$26\\\":\\\"250\\\",\\\"$27\\\":\\\"1.000\\\",\\\"$30\\\":\\\"3000\\\",\\\"$31\\\":\\\"0\\\",\\\"$32\\\":false,\\\"$100\\\":\\\"200.000\\\",\\\"$101\\\":\\\"200.000\\\",\\\"$102\\\":\\\"200.000\\\",\\\"$110\\\":\\\"4000.000\\\",\\\"$111\\\":\\\"4000.000\\\",\\\"$112\\\":\\\"3000.000\\\",\\\"$120\\\":\\\"750.000\\\",\\\"$121\\\":\\\"750.000\\\",\\\"$122\\\":\\\"500.000\\\",\\\"$130\\\":\\\"304.000\\\",\\\"$131\\\":\\\"812.000\\\",\\\"$132\\\":\\\"105.000\\\"}\";","export default \"{\\\"$0\\\":\\\"10\\\",\\\"$1\\\":\\\"100\\\",\\\"$2\\\":\\\"1\\\",\\\"$3\\\":\\\"5\\\",\\\"$4\\\":true,\\\"$5\\\":false,\\\"$6\\\":false,\\\"$10\\\":\\\"1\\\",\\\"$11\\\":\\\"0.010\\\",\\\"$12\\\":\\\"0.002\\\",\\\"$13\\\":false,\\\"$20\\\":false,\\\"$21\\\":false,\\\"$22\\\":false,\\\"$23\\\":\\\"3\\\",\\\"$24\\\":\\\"25.000\\\",\\\"$25\\\":\\\"1500.000\\\",\\\"$26\\\":\\\"250\\\",\\\"$27\\\":\\\"1.000\\\",\\\"$30\\\":\\\"3000\\\",\\\"$31\\\":\\\"0\\\",\\\"$32\\\":false,\\\"$100\\\":\\\"200.000\\\",\\\"$101\\\":\\\"200.000\\\",\\\"$102\\\":\\\"200.000\\\",\\\"$110\\\":\\\"4000.000\\\",\\\"$111\\\":\\\"4000.000\\\",\\\"$112\\\":\\\"3000.000\\\",\\\"$120\\\":\\\"750.000\\\",\\\"$121\\\":\\\"750.000\\\",\\\"$122\\\":\\\"500.000\\\",\\\"$130\\\":\\\"762.000\\\",\\\"$131\\\":\\\"812.000\\\",\\\"$132\\\":\\\"105.000\\\"}\";","export default \"{\\\"$0\\\":\\\"10\\\",\\\"$1\\\":\\\"25\\\",\\\"$2\\\":\\\"0\\\",\\\"$3\\\":\\\"6\\\",\\\"$4\\\":false,\\\"$5\\\":false,\\\"$6\\\":false,\\\"$10\\\":\\\"1\\\",\\\"$11\\\":\\\"0.010\\\",\\\"$12\\\":\\\"0.002\\\",\\\"$13\\\":false,\\\"$20\\\":false,\\\"$21\\\":false,\\\"$22\\\":false,\\\"$23\\\":\\\"0\\\",\\\"$24\\\":\\\"25.000\\\",\\\"$25\\\":\\\"500.000\\\",\\\"$26\\\":\\\"250\\\",\\\"$27\\\":\\\"1.000\\\",\\\"$30\\\":\\\"1000\\\",\\\"$31\\\":\\\"0\\\",\\\"$32\\\":false,\\\"$100\\\":\\\"200.000\\\",\\\"$101\\\":\\\"200.000\\\",\\\"$102\\\":\\\"200.000\\\",\\\"$110\\\":\\\"1800.000\\\",\\\"$111\\\":\\\"1800.000\\\",\\\"$112\\\":\\\"600.000\\\",\\\"$120\\\":\\\"30.000\\\",\\\"$121\\\":\\\"30.000\\\",\\\"$122\\\":\\\"15.000\\\",\\\"$130\\\":\\\"235.000\\\",\\\"$131\\\":\\\"185.000\\\",\\\"$132\\\":\\\"100.000\\\"}\";","export default \"{\\\"$0\\\":\\\"10\\\",\\\"$1\\\":\\\"25\\\",\\\"$2\\\":\\\"0\\\",\\\"$3\\\":\\\"6\\\",\\\"$4\\\":false,\\\"$5\\\":false,\\\"$6\\\":false,\\\"$10\\\":\\\"1\\\",\\\"$11\\\":\\\"0.010\\\",\\\"$12\\\":\\\"0.002\\\",\\\"$13\\\":false,\\\"$20\\\":false,\\\"$21\\\":false,\\\"$22\\\":false,\\\"$23\\\":\\\"0\\\",\\\"$24\\\":\\\"25.000\\\",\\\"$25\\\":\\\"500.000\\\",\\\"$26\\\":\\\"250\\\",\\\"$27\\\":\\\"1.000\\\",\\\"$30\\\":\\\"1000\\\",\\\"$31\\\":\\\"0\\\",\\\"$32\\\":false,\\\"$100\\\":\\\"200.000\\\",\\\"$101\\\":\\\"200.000\\\",\\\"$102\\\":\\\"200.000\\\",\\\"$110\\\":\\\"1800.000\\\",\\\"$111\\\":\\\"1800.000\\\",\\\"$112\\\":\\\"600.000\\\",\\\"$120\\\":\\\"30.000\\\",\\\"$121\\\":\\\"30.000\\\",\\\"$122\\\":\\\"15.000\\\",\\\"$130\\\":\\\"257.000\\\",\\\"$131\\\":\\\"185.000\\\",\\\"$132\\\":\\\"100.000\\\"}\";","import map from 'lodash/map';\nimport defaultGrbl from '!raw-loader!./EepromFiles/DefaultGrblSettings.txt';\nimport LongMill12x12 from '!raw-loader!./EepromFiles/Sienci Long Mill12X12.txt';\nimport LongMill12x30 from '!raw-loader!./EepromFiles/Sienci Long Mill12X30.txt';\nimport LongMill30x30 from '!raw-loader!./EepromFiles/Sienci Long Mill30X30.txt';\nimport MillOne from '!raw-loader!./EepromFiles/Sienci Mill One.txt';\nimport MillOneV3 from '!raw-loader!./EepromFiles/Sienci Mill OneV3.txt';\nimport store from '../../../store';\n\nconst ApplyFirmwareProfile = (nameOfMachine, typeOfMachine, recievedPortNumber) => {\n    const gcode = (cmd, params) => {\n        const s = map(params, (value, letter) => String(letter + value)).join('=');\n        return (s.length > 0) ? (cmd + '' + s) : cmd;\n    };\n\n    const controller = store.get('controllers[\"' + recievedPortNumber + '\"]');\n\n    let settings = defaultGrbl;\n\n    if (nameOfMachine === 'Mill One') {\n        if (typeOfMachine === 'V3') {\n            settings = MillOneV3;\n        } else {\n            settings = MillOne;\n        }\n    }\n\n    if (nameOfMachine === 'LongMill') {\n        if (typeOfMachine === '12x12') {\n            settings = LongMill12x12;\n        }\n        if (typeOfMachine === '12x30') {\n            settings = LongMill12x30;\n        }\n        if (typeOfMachine === '30x30') {\n            settings = LongMill30x30;\n        }\n    }\n\n    const obj = JSON.parse(settings);\n    let values = Object.values(obj);\n    if (values.length === 34) {\n        for (let i = 0; i < values.length; i++) {\n            if (values[i] === true) {\n                values[i] = '1';\n            } if (values[i] === false) {\n                values[i] = '0';\n            }\n        }\n\n        let keys = Object.keys(obj);\n        let finalStrings = [];\n        const valuesToSubmit = [];\n        for (let i = 0; i < keys.length; i++) {\n            valuesToSubmit.push([keys[i], values[i]]);\n        }\n        let gCoded = gcode(valuesToSubmit);\n\n        for (let j = 0; j < gCoded.length; j++) {\n            finalStrings[j] = gCoded[j].join('=');\n        }\n        controller.command('gcode', finalStrings);\n        controller.command('gcode', '$$');\n    }\n};\n\nexport default ApplyFirmwareProfile;\n","import get from 'lodash/get';\n\nexport const FRONT_RIGHT = 'FR';\nexport const FRONT_LEFT = 'FL';\nexport const BACK_RIGHT = 'BR';\nexport const BACK_LEFT = 'BL';\nexport const POSITIVE_DIRECTION = 1;\nexport const NEGATIVE_DIRECTION = -1;\n\nexport const getHomingLocation = (setting) => {\n    if (setting === '0') {\n        return BACK_RIGHT;\n    } else if (setting === '1') {\n        return BACK_LEFT;\n    } else if (setting === '2') {\n        return FRONT_RIGHT;\n    } else if (setting === '3') {\n        return FRONT_LEFT;\n    }\n    return BACK_RIGHT;\n};\n\nexport const determineMaxMovement = (position, movementDirection, limitLocation, limit) => {\n    const OFFSET = 0.1;\n    limit -= OFFSET; // We reduce limit to account for bumping into edges\n\n    if (position === 0) {\n        return ((limit) * movementDirection).toFixed(2);\n    }\n\n    if (movementDirection === POSITIVE_DIRECTION) {\n        if (limitLocation === POSITIVE_DIRECTION) {\n            return (limit - position).toFixed(2);\n        } else {\n            return (position - OFFSET).toFixed(2);\n        }\n    } else if (movementDirection === NEGATIVE_DIRECTION) {\n        if (limitLocation === POSITIVE_DIRECTION) {\n            return (-1 * (position - OFFSET)).toFixed(2);\n        } else {\n            return (-1 * (limit - position)).toFixed(2);\n        }\n    }\n    return 0;\n};\n\nexport const getAxisMaximumLocation = (homingMask) => {\n    const homingLocation = getHomingLocation(homingMask);\n    if (homingLocation === BACK_RIGHT) {\n        return [NEGATIVE_DIRECTION, NEGATIVE_DIRECTION];\n    } else if (homingLocation === BACK_LEFT) {\n        return [POSITIVE_DIRECTION, NEGATIVE_DIRECTION];\n    } else if (homingLocation === FRONT_RIGHT) {\n        return [NEGATIVE_DIRECTION, POSITIVE_DIRECTION];\n    }\n    return [POSITIVE_DIRECTION, POSITIVE_DIRECTION];\n};\n\nexport const determineMachineZeroFlagSet = (res, settings) => {\n    const homingMask = get(settings, 'settings.$23');\n    const mpos = get(res, 'mpos');\n    const homingLocation = getHomingLocation(homingMask);\n    const xPos = parseInt(mpos.x, 10);\n    const yPos = parseInt(mpos.y, 10);\n    const zPos = parseInt(mpos.z, 10);\n\n    if (homingLocation !== BACK_RIGHT) {\n        if (xPos === 0 && yPos === 0 && zPos === 0) {\n            return true;\n        }\n    }\n\n    return false;\n};\n","\nimport ensureArray from 'ensure-array';\nimport * as parser from 'gcode-parser';\nimport Toolpath from 'gcode-toolpath';\nimport _ from 'lodash';\nimport map from 'lodash/map';\nimport SerialConnection from '../../lib/SerialConnection';\nimport EventTrigger from '../../lib/EventTrigger';\nimport Feeder from '../../lib/Feeder';\nimport Sender, { SP_TYPE_CHAR_COUNTING } from '../../lib/Sender';\nimport Workflow, {\n    WORKFLOW_STATE_IDLE,\n    WORKFLOW_STATE_PAUSED,\n    WORKFLOW_STATE_RUNNING\n} from '../../lib/Workflow';\nimport delay from '../../lib/delay';\nimport ensurePositiveNumber from '../../lib/ensure-positive-number';\nimport evaluateAssignmentExpression from '../../lib/evaluate-assignment-expression';\nimport logger from '../../lib/logger';\nimport translateExpression from '../../lib/translate-expression';\nimport config from '../../services/configstore';\nimport monitor from '../../services/monitor';\nimport taskRunner from '../../services/taskrunner';\nimport { getOutlineGcode } from '../../lib/outlineService';\nimport store from '../../store';\nimport {\n    GLOBAL_OBJECTS as globalObjects,\n    WRITE_SOURCE_CLIENT,\n    WRITE_SOURCE_FEEDER\n} from '../constants';\nimport GrblRunner from './GrblRunner';\nimport {\n    GRBL,\n    GRBL_ACTIVE_STATE_RUN,\n    GRBL_ACTIVE_STATE_HOLD,\n    GRBL_REALTIME_COMMANDS,\n    GRBL_ALARMS,\n    GRBL_ERRORS,\n    GRBL_SETTINGS, GRBL_ACTIVE_STATE_HOME\n} from './constants';\nimport { METRIC_UNITS } from '../../../app/constants';\nimport FlashingFirmware from '../../lib/Firmware/Flashing/firmwareflashing';\nimport ApplyFirmwareProfile from '../../lib/Firmware/Profiles/ApplyFirmwareProfile';\nimport { determineMachineZeroFlagSet, determineMaxMovement, getAxisMaximumLocation } from '../../lib/homing';\n\n// % commands\nconst WAIT = '%wait';\nconst PREHOOK_COMPLETE = '%pre_complete';\nconst POSTHOOK_COMPLETE = '%post_complete';\n\nconst log = logger('controller:Grbl');\nconst noop = _.noop;\n\nclass GrblController {\n    type = GRBL;\n\n    // CNCEngine\n    engine = null;\n\n    // Sockets\n    sockets = {};\n\n    // Connection\n    connection = null;\n\n    connectionEventListener = {\n        data: (data) => {\n            log.silly(`< ${data}`);\n            this.runner.parse('' + data);\n        },\n        close: (err) => {\n            this.ready = false;\n            if (err) {\n                log.warn(`Disconnected from serial port \"${this.options.port}\":`, err);\n            }\n\n            this.close(err => {\n                // Remove controller from store\n                const port = this.options.port;\n                store.unset(`controllers[${JSON.stringify(port)}]`);\n\n                // Destroy controller\n                this.destroy();\n            });\n        },\n        error: (err) => {\n            this.ready = false;\n            if (err) {\n                log.error(`Unexpected error while reading/writing serial port \"${this.options.port}\":`, err);\n            }\n        }\n    };\n\n    // Grbl\n    controller = null;\n\n    ready = false;\n\n    initialized = false;\n\n    state = {};\n\n    settings = {};\n\n    toolChangeContext = {};\n\n    queryTimer = null;\n\n    actionMask = {\n        queryParserState: {\n            state: false, // wait for a message containing the current G-code parser modal state\n            reply: false // wait for an `ok` or `error` response\n        },\n        queryStatusReport: false,\n\n        // Respond to user input\n        replyParserState: false, // $G\n        replyStatusReport: false // ?\n    };\n\n    actionTime = {\n        queryParserState: 0,\n        queryStatusReport: 0,\n        senderFinishTime: 0\n    };\n\n    // Event Trigger\n    event = null;\n\n    // Feeder\n    feeder = null;\n\n    // Sender\n    sender = null;\n\n    // Shared context\n    sharedContext = {};\n\n    // Workflow\n    workflow = null;\n\n    // Homing information\n    homingStarted = false;\n    homingFlagSet = false;\n\n    constructor(engine, options) {\n        if (!engine) {\n            throw new Error('engine must be specified');\n        }\n        this.engine = engine;\n\n        const { port, baudrate, rtscts } = { ...options };\n        this.options = {\n            ...this.options,\n            port: port,\n            baudrate: baudrate,\n            rtscts: rtscts\n        };\n\n        // Connection\n        this.connection = new SerialConnection({\n            path: port,\n            baudRate: baudrate,\n            rtscts: rtscts,\n            writeFilter: (data) => {\n                const line = data.trim();\n\n                if (!line) {\n                    return data;\n                }\n\n                { // Grbl settings: $0-$255\n                    const r = line.match(/^(\\$\\d{1,3})=([\\d\\.]+)$/);\n                    if (r) {\n                        const name = r[1];\n                        const value = Number(r[2]);\n                        if ((name === '$13') && (value >= 0) && (value <= 65535)) {\n                            const nextSettings = {\n                                ...this.runner.settings,\n                                settings: {\n                                    ...this.runner.settings.settings,\n                                    [name]: value ? '1' : '0'\n                                }\n                            };\n                            this.runner.settings = nextSettings; // enforce change\n                        }\n                    }\n                }\n\n                return data;\n            }\n        });\n\n        // Event Trigger\n        this.event = new EventTrigger((event, trigger, commands) => {\n            log.debug(`EventTrigger: event=\"${event}\", trigger=\"${trigger}\", commands=\"${commands}\"`);\n            if (trigger === 'system') {\n                taskRunner.run(commands);\n            } else {\n                this.command('gcode', commands);\n            }\n        });\n\n        // Feeder\n        this.feeder = new Feeder({\n            dataFilter: (line, context) => {\n                // Remove comments that start with a semicolon `;`\n                line = line.replace(/\\s*;.*/g, '').trim();\n                context = this.populateContext(context);\n\n                if (line[0] === '%') {\n                    // %wait\n                    if (line === WAIT) {\n                        log.debug('Wait for the planner to empty');\n                        return 'G4 P0.5'; // dwell\n                    }\n                    if (line === PREHOOK_COMPLETE) {\n                        log.debug('Finished Pre-hook');\n                        this.feeder.hold({ data: '%toolchange' });\n                        this.emit('toolchange:preHookComplete');\n                        return '(Pre-Hook complete)';\n                    }\n                    if (line === POSTHOOK_COMPLETE) {\n                        log.debug('Finished Post-hook, resuming program');\n                        this.workflow.resume();\n                        return '(Post-Hook complete)';\n                    }\n\n                    // Expression\n                    // %_x=posx,_y=posy,_z=posz\n                    evaluateAssignmentExpression(line.slice(1), context);\n                    return '';\n                }\n\n                // line=\"G0 X[posx - 8] Y[ymax]\"\n                // > \"G0 X2 Y50\"\n                line = translateExpression(line, context);\n                const data = parser.parseLine(line, { flatten: true });\n                const words = ensureArray(data.words);\n\n                { // Program Mode: M0, M1\n                    const programMode = _.intersection(words, ['M0', 'M1'])[0];\n                    if (programMode === 'M0') {\n                        log.debug('M0 Program Pause');\n                        this.feeder.hold({ data: 'M0' }); // Hold reason\n                    } else if (programMode === 'M1') {\n                        log.debug('M1 Program Pause');\n                        this.feeder.hold({ data: 'M1' }); // Hold reason\n                    }\n                }\n\n                // More aggressive updating of spindle modals for safety\n                const spindleCommand = _.intersection(words, ['M3', 'M4'])[0];\n                if (spindleCommand) {\n                    this.updateSpindleModal(spindleCommand);\n                }\n\n                // // M6 Tool Change\n                // if (_.includes(words, 'M6')) {\n                //     log.debug('M6 Tool Change');\n                //     this.feeder.hold({ data: 'M6' }); // Hold reason\n\n                //     // Surround M6 with parentheses to ignore\n                //     // unsupported command error. If we nuke the whole\n                //     // line, then we'll likely lose other commands that\n                //     // share the line, like a T~.  This makes tool\n                //     // changes complicated.\n                //     line = line.replace('M6', '(M6)');\n                // }\n\n                return line;\n            }\n        });\n        this.feeder.on('data', (line = '', context = {}) => {\n            if (this.isClose()) {\n                log.error(`Serial port \"${this.options.port}\" is not accessible`);\n                return;\n            }\n\n            if (this.runner.isAlarm()) {\n                this.feeder.reset();\n                this.emit('workflow:state', this.workflow.state); // Propogate alarm code to UI\n                log.warn('Stopped sending G-code commands in Alarm mode');\n                return;\n            }\n\n            line = String(line).trim();\n            if (line.length === 0) {\n                return;\n            }\n\n            this.emit('serialport:write', line + '\\n', {\n                ...context,\n                source: WRITE_SOURCE_FEEDER\n            });\n\n            this.connection.write(line + '\\n');\n            log.silly(`> ${line}`);\n        });\n        this.feeder.on('hold', noop);\n        this.feeder.on('unhold', noop);\n\n        // Sender\n        this.sender = new Sender(SP_TYPE_CHAR_COUNTING, {\n            // Deduct the buffer size to prevent from buffer overrun\n            bufferSize: (128 - 8), // The default buffer size is 128 bytes\n            dataFilter: (line, context) => {\n                // Remove comments that start with a semicolon `;`\n                line = line.replace(/\\s*;.*/g, '').trim();\n                context = this.populateContext(context);\n\n                const { sent, received } = this.sender.state;\n\n                if (line[0] === '%') {\n                    // %wait\n                    if (line === WAIT) {\n                        log.debug(`Wait for the planner to empty: line=${sent + 1}, sent=${sent}, received=${received}`);\n                        this.sender.hold({ data: WAIT }); // Hold reason\n                        return 'G4 P0.5'; // dwell\n                    }\n\n                    // Expression\n                    // %_x=posx,_y=posy,_z=posz\n                    evaluateAssignmentExpression(line.slice(1), context);\n                    return '';\n                }\n\n                // line=\"G0 X[posx - 8] Y[ymax]\"\n                // > \"G0 X2 Y50\"\n                line = translateExpression(line, context);\n                const data = parser.parseLine(line, { flatten: true });\n                const words = ensureArray(data.words);\n\n                { // Program Mode: M0, M1\n                    const programMode = _.intersection(words, ['M0', 'M1'])[0];\n                    if (programMode === 'M0') {\n                        log.debug(`M0 Program Pause: line=${sent + 1}, sent=${sent}, received=${received}`);\n                        // Workaround for Carbide files - prevent M0 early from pausing program\n                        if (sent > 10) {\n                            this.workflow.pause({ data: 'M0' });\n                            this.emit('workflow:pause', { data: 'M0' });\n                        }\n                        return line.replace('M0', '(M0)');\n                    } else if (programMode === 'M1') {\n                        log.debug(`M1 Program Pause: line=${sent + 1}, sent=${sent}, received=${received}`);\n                        this.workflow.pause({ data: 'M1' });\n                        this.emit('workflow:pause', { data: 'M1' });\n                        return line.replace('M1', '(M1)');\n                    }\n                }\n\n                const machineProfile = store.get('machineProfile');\n                //const preferences = store.get('preferences');\n\n                /*if (line) {\n                    const regex = /([^NGMXYZIJKFPRST%\\-?\\.?\\d+\\.?\\s])/gi;\n                    if (regex.test(line)) {\n                        if (preferences === undefined) {\n                            this.emit('workflow:state', this.workflow.state, { validLine: false, line });\n                            return line;\n                        }\n                        if (preferences && preferences.showLineWarnings) {\n                            this.workflow.pause({ data: line });\n                            this.emit('workflow:state', this.workflow.state, { validLine: false, line });\n                        } if (!preferences && !preferences.showLineWarnings) {\n                            this.emit('workflow:state', this.workflow.state, { validLine: false, line });\n                        }\n                    }\n                }*/\n\n                if (_.includes(words, 'G28') && !machineProfile.endstops) {\n                    line = line.replace('G28', '(G28)');\n                }\n\n                // More aggressive updating of spindle modals for safety\n                const spindleCommand = _.intersection(words, ['M3', 'M4'])[0];\n                if (spindleCommand) {\n                    this.updateSpindleModal(spindleCommand);\n                }\n\n                /* Emit event to UI for toolchange handler */\n                if (_.includes(words, 'M6')) {\n                    log.debug(`M6 Tool Change: line=${sent + 1}, sent=${sent}, received=${received}`);\n\n                    const { toolChangeOption } = this.toolChangeContext;\n\n                    // Handle specific cases for macro and pause, ignore is default and comments line out with no other action\n                    if (toolChangeOption === 'Pause') {\n                        this.workflow.pause({ data: 'M6' });\n                        this.emit('gcode:toolChange', {\n                            line: sent + 1,\n                            block: line,\n                            option: toolChangeOption\n                        });\n                    } else if (toolChangeOption === 'Code') {\n                        this.workflow.pause({ data: 'M6' });\n                        this.emit('toolchange:start');\n                        this.runPreChangeHook(this.populateContext());\n                    }\n\n                    line = line.replace('M6', '(M6)');\n                }\n\n                return line;\n            }\n        });\n        this.sender.on('data', (line = '', context = {}) => {\n            if (this.isClose()) {\n                log.error(`Serial port \"${this.options.port}\" is not accessible`);\n                return;\n            }\n\n            // if (this.workflow.state === WORKFLOW_STATE_IDLE) {\n            //     log.error(`Unexpected workflow state: ${this.workflow.state}`);\n            //     return;\n            // }\n\n            line = String(line).trim();\n            if (line.length === 0) {\n                log.warn(`Expected non-empty line: N=${this.sender.state.sent}`);\n                return;\n            }\n\n            this.emit('serialport:read', line);\n\n            this.connection.write(line + '\\n');\n            log.silly(`> ${line}`);\n        });\n        this.sender.on('hold', noop);\n        this.sender.on('unhold', noop);\n        this.sender.on('start', (startTime) => {\n            this.actionTime.senderFinishTime = 0;\n        });\n\n        this.sender.on('end', (finishTime) => {\n            this.actionTime.senderFinishTime = finishTime;\n        });\n\n        // Workflow\n        this.workflow = new Workflow();\n        this.workflow.on('start', (...args) => {\n            this.emit('workflow:state', this.workflow.state);\n            this.sender.rewind();\n        });\n        this.workflow.on('stop', (...args) => {\n            this.emit('workflow:state', this.workflow.state);\n            this.sender.rewind();\n        });\n        this.workflow.on('pause', (...args) => {\n            this.emit('workflow:state', this.workflow.state);\n\n            if (args.length > 0) {\n                const reason = { ...args[0] };\n                this.sender.hold(reason); // Hold reason\n            } else {\n                this.sender.hold();\n            }\n        });\n        this.workflow.on('resume', (...args) => {\n            this.emit('workflow:state', this.workflow.state);\n\n            // Reset feeder prior to resume program execution\n            this.feeder.reset();\n\n            // Resume program execution\n            this.sender.unhold();\n            this.sender.next();\n        });\n\n        // Grbl\n        this.runner = new GrblRunner();\n\n        this.runner.on('raw', noop);\n\n        this.runner.on('status', (res) => {\n            if (this.homingStarted) {\n                this.homingFlagSet = determineMachineZeroFlagSet(res, this.settings);\n                this.emit('homing:flag', this.homingFlagSet);\n                this.homingStarted = false;\n            }\n\n            // console.log(`runner on status ${res}`);\n            this.actionMask.queryStatusReport = false;\n\n            if (this.actionMask.replyStatusReport) {\n                this.actionMask.replyStatusReport = false;\n                this.emit('serialport:read', res.raw);\n            }\n\n            // Check if the receive buffer is available in the status report\n            const rx = Number(_.get(res, 'buf.rx', 0)) || 0;\n            if (rx > 0) {\n                // Do not modify the buffer size when running a G-code program\n                if (this.workflow.state !== WORKFLOW_STATE_IDLE) {\n                    return;\n                }\n\n                // Check if the streaming protocol is character-counting streaming protocol\n                if (this.sender.sp.type !== SP_TYPE_CHAR_COUNTING) {\n                    return;\n                }\n\n                // Check if the queue is empty\n                if (this.sender.sp.dataLength !== 0) {\n                    return;\n                }\n\n                // Deduct the receive buffer length to prevent from buffer overrun\n                const bufferSize = (rx - 8); // TODO\n                if (bufferSize > this.sender.sp.bufferSize) {\n                    this.sender.sp.bufferSize = bufferSize;\n                }\n            }\n        });\n\n        this.runner.on('ok', (res) => {\n            if (this.actionMask.queryParserState.reply) {\n                if (this.actionMask.replyParserState) {\n                    this.actionMask.replyParserState = false;\n                    this.emit('serialport:read', res.raw);\n                }\n                this.actionMask.queryParserState.reply = false;\n                return;\n            }\n\n            const { hold, sent, received } = this.sender.state;\n            if (this.workflow.state === WORKFLOW_STATE_RUNNING) {\n                this.emit('serialport:read', res.raw);\n                if (hold && (received + 1 >= sent)) {\n                    log.debug(`Continue sending G-code: hold=${hold}, sent=${sent}, received=${received + 1}`);\n                    this.sender.unhold();\n                }\n                this.sender.ack();\n                this.sender.next();\n                return;\n            }\n\n            if ((this.workflow.state === WORKFLOW_STATE_PAUSED) && (received < sent)) {\n                this.emit('serialport:read', res.raw);\n                if (!hold) {\n                    log.error('The sender does not hold off during the paused state');\n                }\n                if (received + 1 >= sent) {\n                    log.debug(`Stop sending G-code: hold=${hold}, sent=${sent}, received=${received + 1}`);\n                }\n                this.sender.ack();\n                this.sender.next();\n                return;\n            }\n\n            this.emit('serialport:read', res.raw);\n\n            // Feeder\n            this.feeder.ack();\n            this.feeder.next();\n        });\n\n        this.runner.on('error', (res) => {\n            const code = Number(res.message) || undefined;\n            const error = _.find(GRBL_ERRORS, { code: code });\n\n            if (this.workflow.state === WORKFLOW_STATE_RUNNING || this.workflow.state === WORKFLOW_STATE_PAUSED) {\n                const { lines, received } = this.sender.state;\n                const line = lines[received] || '';\n\n                const preferences = store.get('preferences') || { showLineWarnings: false };\n                this.emit('serialport:read', `error:${code} (${error.message})`);\n\n                if (error) {\n                    if (preferences.showLineWarnings === false) {\n                        this.emit('gcode_error', error, code, line);\n                        this.workflow.pause({ err: `error:${code} (${error.message})` });\n                    }\n\n                    if (preferences.showLineWarnings) {\n                        this.workflow.pause({ err: `error:${code} (${error.message})` });\n                        this.emit('workflow:state', this.workflow.state, { validLine: false, line: `${lines.length} ${line}` });\n                        return;\n                    }\n                } else {\n                    this.emit('serialport:read', res.raw);\n                }\n                this.sender.ack();\n                this.sender.next();\n\n                return;\n            }\n\n            if (error) {\n                // Grbl v1.1\n                this.emit('serialport:read', `error:${code} (${error.message})`);\n            } else {\n                // Grbl v0.9\n                this.emit('serialport:read', res.raw);\n            }\n\n            // Feeder\n            this.feeder.ack();\n            this.feeder.next();\n        });\n\n        this.runner.on('alarm', (res) => {\n            const code = Number(res.message) || undefined;\n            const alarm = _.find(GRBL_ALARMS, { code: code });\n\n            if (alarm) {\n                // Grbl v1.1\n                this.emit('serialport:read', `ALARM:${code} (${alarm.message})`);\n                // Force propogation of current state on alarm\n                this.state = this.runner.state;\n\n                this.emit('controller:state', GRBL, this.state);\n            } else {\n                // Grbl v0.9\n                this.emit('serialport:read', res.raw);\n            }\n        });\n\n        this.runner.on('parserstate', (res) => {\n            //finished searching gCode file for errors\n            if (this.sender.state.finishTime > 0 && this.runner.state.status.activeState === 'Check') {\n                this.command('gcode', '$c');\n                this.workflow.stopTesting();\n                this.emit('gcode_error_checking_file', this.sender.state, 'finished');\n                return;\n            }\n\n\n            this.actionMask.queryParserState.state = false;\n            this.actionMask.queryParserState.reply = true;\n\n            if (this.actionMask.replyParserState) {\n                this.emit('serialport:read', res.raw);\n            }\n        });\n\n        this.runner.on('parameters', (res) => {\n            this.emit('serialport:read', res.raw);\n        });\n\n        this.runner.on('feedback', (res) => {\n            this.emit('serialport:read', res.raw);\n        });\n\n        this.runner.on('settings', (res) => {\n            const setting = _.find(GRBL_SETTINGS, { setting: res.name });\n\n            if (!res.message && setting) {\n                // Grbl v1.1\n                this.emit('serialport:read', `${res.name}=${res.value} (${setting.message}, ${setting.units})`);\n            } else {\n                // Grbl v0.9\n                this.emit('serialport:read', res.raw);\n            }\n        });\n\n        this.runner.on('startup', (res) => {\n            this.emit('serialport:read', res.raw);\n\n            // The startup message always prints upon startup, after a reset, or at program end.\n            // Setting the initial state when Grbl has completed re-initializing all systems.\n            this.clearActionValues();\n\n            // Set ready flag to true when a startup message has arrived\n            this.ready = true;\n\n            // Clear sender - for physical buttons\n            //this.sender.unload();\n\n            if (!this.initialized) {\n                this.initialized = true;\n\n                // Initialize controller\n                this.initController();\n            }\n        });\n\n        this.runner.on('others', (res) => {\n            this.emit('serialport:read', res.raw);\n        });\n\n        const queryStatusReport = () => {\n            // Check the ready flag\n            if (!(this.ready)) {\n                return;\n            }\n\n            const now = new Date().getTime();\n\n            // The status report query (?) is a realtime command, it does not consume the receive buffer.\n            const lastQueryTime = this.actionTime.queryStatusReport;\n            if (lastQueryTime > 0) {\n                const timespan = Math.abs(now - lastQueryTime);\n                const toleranceTime = 5000; // 5 seconds\n\n                // Check if it has not been updated for a long time\n                if (timespan >= toleranceTime) {\n                    log.debug(`Continue status report query: timespan=${timespan}ms`);\n                    this.actionMask.queryStatusReport = false;\n                }\n            }\n\n            if (this.actionMask.queryStatusReport) {\n                return;\n            }\n\n            if (this.isOpen()) {\n                this.actionMask.queryStatusReport = true;\n                this.actionTime.queryStatusReport = now;\n                this.connection.write('?');\n            }\n        };\n\n        const queryParserState = _.throttle(() => {\n            // Check the ready flag\n            if (!(this.ready)) {\n                return;\n            }\n\n            const now = new Date().getTime();\n\n            // Do not force query parser state ($G) when running a G-code program,\n            // it will consume 3 bytes from the receive buffer in each time period.\n            if ((this.workflow.state === WORKFLOW_STATE_IDLE) && this.runner.isIdle()) {\n                const lastQueryTime = this.actionTime.queryParserState;\n                if (lastQueryTime > 0) {\n                    const timespan = Math.abs(now - lastQueryTime);\n                    const toleranceTime = 10000; // 10 seconds\n\n                    // Check if it has not been updated for a long time\n                    if (timespan >= toleranceTime) {\n                        log.debug(`Continue parser state query: timespan=${timespan}ms`);\n                        this.actionMask.queryParserState.state = false;\n                        this.actionMask.queryParserState.reply = false;\n                    }\n                }\n            }\n\n            if (this.actionMask.queryParserState.state || this.actionMask.queryParserState.reply) {\n                return;\n            }\n\n            if (this.isOpen()) {\n                this.actionMask.queryParserState.state = true;\n                this.actionMask.queryParserState.reply = false;\n                this.actionTime.queryParserState = now;\n                this.connection.write('$G\\n');\n            }\n        }, 500);\n\n        this.queryTimer = setInterval(() => {\n            if (this.isClose()) {\n                // Serial port is closed\n                return;\n            }\n\n            // Feeder\n            if (this.feeder.peek()) {\n                this.emit('feeder:status', this.feeder.toJSON());\n            }\n\n            // Sender\n            if (this.sender.peek()) {\n                this.emit('sender:status', this.sender.toJSON());\n            }\n\n            const zeroOffset = _.isEqual(\n                this.runner.getWorkPosition(this.state),\n                this.runner.getWorkPosition(this.runner.state)\n            );\n\n            // Grbl settings\n            if (this.settings !== this.runner.settings) {\n                this.settings = this.runner.settings;\n                this.emit('controller:settings', GRBL, this.settings);\n                this.emit('Grbl:settings', this.settings); // Backward compatibility\n            }\n\n            // Grbl state\n            if (this.state !== this.runner.state) {\n                this.state = this.runner.state;\n                this.emit('controller:state', GRBL, this.state);\n                this.emit('Grbl:state', this.state); // Backward compatibility\n            }\n\n            // Check the ready flag\n            if (!(this.ready)) {\n                return;\n            }\n\n            // ? - Status Report\n            queryStatusReport();\n\n            // $G - Parser State\n            queryParserState();\n\n            // Check if the machine has stopped movement after completion\n            if (this.actionTime.senderFinishTime > 0) {\n                const machineIdle = zeroOffset && this.runner.isIdle();\n                const now = new Date().getTime();\n                const timespan = Math.abs(now - this.actionTime.senderFinishTime);\n                const toleranceTime = 500; // in milliseconds\n\n                if (!machineIdle) {\n                    // Extend the sender finish time\n                    this.actionTime.senderFinishTime = now;\n                } else if (timespan > toleranceTime) {\n                    log.silly(`Finished sending G-code: timespan=${timespan}`);\n\n                    this.actionTime.senderFinishTime = 0;\n\n                    // Stop workflow\n                    this.command('gcode:stop');\n                }\n            }\n        }, 250);\n\n        // Load file if it exists in CNC engine (AKA it was loaded before connection\n    }\n\n    async initController() {\n        // $13=0 (report in mm)\n        // $13=1 (report in inches)\n        this.writeln('$$');\n\n        await delay(50);\n        this.event.trigger('controller:ready');\n    }\n\n    populateContext(context = {}) {\n        // Machine position\n        const {\n            x: mposx,\n            y: mposy,\n            z: mposz,\n            a: mposa,\n            b: mposb,\n            c: mposc\n        } = this.runner.getMachinePosition();\n\n        // Work position\n        const {\n            x: posx,\n            y: posy,\n            z: posz,\n            a: posa,\n            b: posb,\n            c: posc\n        } = this.runner.getWorkPosition();\n\n        // Modal group\n        const modal = this.runner.getModalGroup();\n\n        // Tool\n        const tool = this.runner.getTool();\n\n        return Object.assign(context || {}, {\n            // User-defined global variables\n            global: this.sharedContext,\n\n            // Bounding box\n            xmin: Number(context.xmin) || 0,\n            xmax: Number(context.xmax) || 0,\n            ymin: Number(context.ymin) || 0,\n            ymax: Number(context.ymax) || 0,\n            zmin: Number(context.zmin) || 0,\n            zmax: Number(context.zmax) || 0,\n\n            // Machine position\n            mposx: Number(mposx) || 0,\n            mposy: Number(mposy) || 0,\n            mposz: Number(mposz) || 0,\n            mposa: Number(mposa) || 0,\n            mposb: Number(mposb) || 0,\n            mposc: Number(mposc) || 0,\n\n            // Work position\n            posx: Number(posx) || 0,\n            posy: Number(posy) || 0,\n            posz: Number(posz) || 0,\n            posa: Number(posa) || 0,\n            posb: Number(posb) || 0,\n            posc: Number(posc) || 0,\n\n            // Modal group\n            modal: {\n                motion: modal.motion,\n                wcs: modal.wcs,\n                plane: modal.plane,\n                units: modal.units,\n                distance: modal.distance,\n                feedrate: modal.feedrate,\n                program: modal.program,\n                spindle: modal.spindle,\n                // M7 and M8 may be active at the same time, but a modal group violation might occur when issuing M7 and M8 together on the same line. Using the new line character (\\n) to separate lines can avoid this issue.\n                coolant: ensureArray(modal.coolant).join('\\n'),\n            },\n\n            // Tool\n            tool: Number(tool) || 0,\n\n            // Global objects\n            ...globalObjects,\n        });\n    }\n\n    clearActionValues() {\n        this.actionMask.queryParserState.state = false;\n        this.actionMask.queryParserState.reply = false;\n        this.actionMask.queryStatusReport = false;\n        this.actionMask.replyParserState = false;\n        this.actionMask.replyStatusReport = false;\n        this.actionTime.queryParserState = 0;\n        this.actionTime.queryStatusReport = 0;\n        this.actionTime.senderFinishTime = 0;\n    }\n\n    destroy() {\n        if (this.queryTimer) {\n            clearInterval(this.queryTimer);\n            this.queryTimer = null;\n        }\n\n        if (this.runner) {\n            this.runner.removeAllListeners();\n            this.runner = null;\n        }\n\n        this.sockets = {};\n\n        if (this.connection) {\n            this.connection = null;\n        }\n\n        if (this.event) {\n            this.event = null;\n        }\n\n        if (this.feeder) {\n            this.feeder = null;\n        }\n\n        if (this.sender) {\n            this.sender = null;\n        }\n\n        if (this.workflow) {\n            this.workflow = null;\n        }\n    }\n\n    get status() {\n        return {\n            port: this.options.port,\n            baudrate: this.options.baudrate,\n            rtscts: this.options.rtscts,\n            sockets: Object.keys(this.sockets),\n            ready: this.ready,\n            controller: {\n                type: this.type,\n                settings: this.settings,\n                state: this.state\n            },\n            feeder: this.feeder.toJSON(),\n            sender: this.sender.toJSON(),\n            workflow: {\n                state: this.workflow.state\n            }\n        };\n    }\n\n    open(callback = noop) {\n        const { port, baudrate } = this.options;\n\n        // Assertion check\n        if (this.isOpen()) {\n            log.error(`Cannot open serial port \"${port}\"`);\n            return;\n        }\n\n        this.connection.on('data', this.connectionEventListener.data);\n        this.connection.on('close', this.connectionEventListener.close);\n        this.connection.on('error', this.connectionEventListener.error);\n\n        this.connection.open((err) => {\n            if (err) {\n                log.error(`Error opening serial port \"${port}\":`, err);\n                this.emit('serialport:error', { err: err, port: port });\n                callback(err); // notify error\n                return;\n            }\n\n            this.emit('serialport:open', {\n                port: port,\n                baudrate: baudrate,\n                controllerType: this.type,\n                inuse: true\n            });\n\n            // Emit a change event to all connected sockets\n            if (this.engine.io) {\n                this.engine.io.emit('serialport:change', {\n                    port: port,\n                    inuse: true\n                });\n            }\n\n            callback(); // register controller\n\n            log.debug(`Connected to serial port \"${port}\"`);\n\n            this.workflow.stop();\n\n            // Clear action values\n            this.clearActionValues();\n        });\n    }\n\n    close(callback) {\n        const { port } = this.options;\n\n        // Assertion check\n        if (!this.connection) {\n            const err = `Serial port \"${port}\" is not available`;\n            callback(new Error(err));\n            return;\n        }\n\n        // Stop status query\n        this.ready = false;\n\n        // Clear initialized flag\n        this.initialized = false;\n\n        this.emit('serialport:close', {\n            port: port,\n            inuse: false\n        });\n\n        // Emit a change event to all connected sockets\n        if (this.engine.io) {\n            this.engine.io.emit('serialport:change', {\n                port: port,\n                inuse: false\n            });\n        }\n\n        if (this.isClose()) {\n            callback(null);\n            return;\n        }\n\n        this.connection.removeAllListeners();\n        this.connection.close(callback);\n    }\n\n    isOpen() {\n        return this.connection && this.connection.isOpen;\n    }\n\n    isClose() {\n        return !(this.isOpen());\n    }\n\n    loadFile(gcode, { name }) {\n        log.debug(`Loading file '${name}' to controller`);\n        this.command('gcode:load', name, gcode);\n    }\n\n    addConnection(socket) {\n        if (!socket) {\n            log.error('The socket parameter is not specified');\n            return;\n        }\n\n        log.debug(`Add socket connection: id=${socket.id}`);\n        this.sockets[socket.id] = socket;\n\n        //\n        // Send data to newly connected client\n        //\n        if (this.isOpen()) {\n            socket.emit('serialport:open', {\n                port: this.options.port,\n                baudrate: this.options.baudrate,\n                controllerType: this.type,\n                inuse: true\n            });\n        }\n        if (!_.isEmpty(this.settings)) {\n            // controller settings\n            socket.emit('controller:settings', GRBL, this.settings);\n            socket.emit('Grbl:settings', this.settings); // Backward compatibility\n        }\n        if (!_.isEmpty(this.state)) {\n            // controller state\n            socket.emit('controller:state', GRBL, this.state);\n            socket.emit('Grbl:state', this.state); // Backward compatibility\n        }\n        if (this.feeder) {\n            // feeder status\n            socket.emit('feeder:status', this.feeder.toJSON());\n        }\n        if (this.sender) {\n            // sender status\n            socket.emit('sender:status', this.sender.toJSON());\n            log.info('Emitting Sender');\n        }\n        if (this.workflow) {\n            // workflow state\n            socket.emit('workflow:state', this.workflow.state);\n        }\n    }\n\n    removeConnection(socket) {\n        if (!socket) {\n            log.error('The socket parameter is not specified');\n            return;\n        }\n\n        log.debug(`Remove socket connection: id=${socket.id}`);\n        this.sockets[socket.id] = undefined;\n        delete this.sockets[socket.id];\n    }\n\n    emit(eventName, ...args) {\n        Object.keys(this.sockets).forEach(id => {\n            const socket = this.sockets[id];\n            socket.emit(eventName, ...args);\n        });\n    }\n\n    command(cmd, ...args) {\n        const handler = {\n            'flash:start': () => {\n                let [port] = args;\n                if (!port) {\n                    this.emit('task:error', 'No port specified - make sure you connect to you device at least once before attempting flashing');\n                    return;\n                }\n                this.close(() => {\n                    FlashingFirmware(port);\n                });\n            },\n            'flashing:success': () => {\n                let [data] = args;\n                this.emit('message', data);\n            },\n            'flashing:failed': () => {\n                let [error] = args;\n                this.emit('task:error', error);\n            },\n            'firmware:recievedProfiles': () => {\n                let [files] = args;\n                this.emit('task:finish', files);\n            },\n            'firmware:applyProfileSettings': () => {\n                let [nameOfMachine, typeOfMachine, port] = args;\n                ApplyFirmwareProfile(nameOfMachine, typeOfMachine, port);\n            },\n            'firmware:grabMachineProfile': () => {\n                // let [values] = args;\n                const machineProfile = store.get('machineProfile');\n                this.emit('sender:status', machineProfile);\n            },\n            'gcode:load': () => {\n                let [name, gcode, context = {}, callback = noop] = args;\n                if (typeof context === 'function') {\n                    callback = context;\n                    context = {};\n                }\n\n                // G4 P0 or P with a very small value will empty the planner queue and then\n                // respond with an ok when the dwell is complete. At that instant, there will\n                // be no queued motions, as long as no more commands were sent after the G4.\n                // This is the fastest way to do it without having to check the status reports.\n                const dwell = '%wait ; Wait for the planner to empty';\n                const ok = this.sender.load(name, gcode + '\\n' + dwell, context);\n                if (!ok) {\n                    callback(new Error(`Invalid G-code: name=${name}`));\n                    return;\n                }\n\n                //this.emit('gcode:load', name, gcode, context);\n                //this.event.trigger('gcode:load');\n\n                log.debug(`Load G-code: name=\"${this.sender.state.name}\", size=${this.sender.state.gcode.length}, total=${this.sender.state.total}`);\n\n                this.workflow.stop();\n\n                callback(null, this.sender.toJSON());\n            },\n            'gcode:unload': () => {\n                this.workflow.stop();\n                this.engine.unload();\n\n                // Sender\n                this.sender.unload();\n\n                this.emit('file:unload');\n                this.event.trigger('file:unload');\n            },\n            'start': () => {\n                log.warn(`Warning: The \"${cmd}\" command is deprecated and will be removed in a future release.`);\n                this.command('gcode:start');\n            },\n            'gcode:start': () => {\n                const [lineToStartFrom] = args;\n                const totalLines = this.sender.state.total;\n\n\n                if (lineToStartFrom && lineToStartFrom <= totalLines) {\n                    const { lines = [] } = this.sender.state;\n                    const firstHalf = lines.slice(0, lineToStartFrom);\n                    let feedRate = 200;\n                    let spindleRate = 0;\n\n                    const getWordValue = (token, words) => {\n                        for (let wordPair of words) {\n                            const [word, value] = wordPair;\n                            if (word === token) {\n                                return value;\n                            }\n                        }\n                        return 0;\n                    };\n\n                    const toolpath = new Toolpath();\n                    toolpath.loadFromStringSync(firstHalf.join('\\n'), (data) => {\n                        const { words, line } = data;\n                        if (line.includes('F')) {\n                            feedRate = getWordValue('F', words);\n                        }\n                        if (line.includes('S')) {\n                            spindleRate = getWordValue('S', words);\n                        }\n                    });\n\n                    const modal = toolpath.getModal();\n                    const position = toolpath.getPosition();\n\n                    const {\n                        x: xVal,\n                        y: yVal,\n                        z: zVal,\n                    } = position;\n\n                    const modalGCode = [];\n\n                    // Move up and then to cut start position\n                    modalGCode.push('G0 G90 G21 Z10');\n                    modalGCode.push(`G0 G90 G21 X${xVal} Y${yVal}`);\n                    modalGCode.push(`G0 G90 G21 Z${zVal}`);\n                    // Set modals based on what's parsed so far in the file\n                    modalGCode.push(`${modal.units} ${modal.distance} ${modal.arc} ${modal.feedrate} ${modal.wcs} ${modal.plane}`);\n                    modalGCode.push(`F${feedRate} S${spindleRate}`);\n\n                    this.command('gcode', modalGCode);\n                }\n\n                //Allow the prepend commands to register before resuming job\n                setTimeout(() => {\n                    this.event.trigger('gcode:start');\n\n                    this.workflow.start();\n\n                    // Feeder\n                    this.feeder.reset();\n\n                    // Sender\n                    this.sender.next({ lineToStartFrom });\n                }, 100);\n            },\n            'stop': () => {\n                log.warn(`Warning: The \"${cmd}\" command is deprecated and will be removed in a future release.`);\n                this.command('gcode:stop', ...args);\n            },\n            // @param {object} options The options object.\n            // @param {boolean} [options.force] Whether to force stop a G-code program. Defaults to false.\n            'gcode:stop': async () => {\n                this.event.trigger('gcode:stop');\n\n                this.workflow.stop();\n\n                const [options] = args;\n                const { force = false } = { ...options };\n                if (force) {\n                    let activeState;\n\n                    activeState = _.get(this.state, 'status.activeState', '');\n                    if (activeState === GRBL_ACTIVE_STATE_RUN) {\n                        this.write('!'); // hold\n                    }\n\n                    await delay(500); // delay 500ms\n\n                    activeState = _.get(this.state, 'status.activeState', '');\n                    if (activeState === GRBL_ACTIVE_STATE_HOLD) {\n                        this.write('\\x18'); // ^x\n                    }\n                }\n            },\n            'pause': () => {\n                log.warn(`Warning: The \"${cmd}\" command is deprecated and will be removed in a future release.`);\n                this.command('gcode:pause');\n            },\n            'gcode:pause': () => {\n                this.event.trigger('gcode:pause');\n\n                this.workflow.pause();\n                this.write('!');\n            },\n            'resume': () => {\n                log.warn(`Warning: The \"${cmd}\" command is deprecated and will be removed in a future release.`);\n                this.command('gcode:resume');\n            },\n            'gcode:resume': () => {\n                this.event.trigger('gcode:resume');\n\n                this.write('~');\n                this.workflow.resume();\n            },\n            'feeder:feed': () => {\n                const [commands, context = {}] = args;\n                this.command('gcode', commands, context);\n            },\n            'feeder:start': () => {\n                if (this.workflow.state === WORKFLOW_STATE_RUNNING) {\n                    return;\n                }\n                this.write('~');\n                this.feeder.unhold();\n                this.feeder.next();\n            },\n            'feeder:stop': () => {\n                this.feeder.reset();\n            },\n            'feedhold': () => {\n                this.event.trigger('feedhold');\n\n                this.write('!');\n            },\n            'cyclestart': () => {\n                this.event.trigger('cyclestart');\n\n                this.write('~');\n            },\n            'statusreport': () => {\n                this.write('?');\n            },\n            'homing': () => {\n                this.event.trigger('homing');\n                this.homingStarted = true; // Update homing cycle as having started\n\n                this.writeln('$H');\n                this.state.status.activeState = GRBL_ACTIVE_STATE_HOME;\n                this.emit('controller:state', GRBL, this.state);\n            },\n            'sleep': () => {\n                this.event.trigger('sleep');\n\n                this.writeln('$SLP');\n            },\n            'unlock': () => {\n                this.writeln('$X');\n            },\n            'reset': () => {\n                this.workflow.stop();\n\n                this.feeder.reset();\n\n                this.write('\\x18'); // ^x\n            },\n            'reset:limit': () => {\n                this.workflow.stop();\n                this.feeder.reset();\n                this.write('\\x18'); // ^x\n                this.writeln('$X');\n            },\n            // Feed Overrides\n            // @param {number} value The amount of percentage increase or decrease.\n            //   0: Set 100% of programmed rate.\n            //  10: Increase 10%\n            // -10: Decrease 10%\n            //   1: Increase 1%\n            //  -1: Decrease 1%\n            'feedOverride': () => {\n                const [value] = args;\n\n                if (value === 0) {\n                    this.write('\\x90');\n                } else if (value === 10) {\n                    this.write('\\x91');\n                } else if (value === -10) {\n                    this.write('\\x92');\n                } else if (value === 1) {\n                    this.write('\\x93');\n                } else if (value === -1) {\n                    this.write('\\x94');\n                }\n            },\n            // Spindle Speed Overrides\n            // @param {number} value The amount of percentage increase or decrease.\n            //   0: Set 100% of programmed spindle speed\n            //  10: Increase 10%\n            // -10: Decrease 10%\n            //   1: Increase 1%\n            //  -1: Decrease 1%\n            'spindleOverride': () => {\n                const [value] = args;\n\n                if (value === 0) {\n                    this.write('\\x99');\n                } else if (value === 10) {\n                    this.write('\\x9a');\n                } else if (value === -10) {\n                    this.write('\\x9b');\n                } else if (value === 1) {\n                    this.write('\\x9c');\n                } else if (value === -1) {\n                    this.write('\\x9d');\n                }\n            },\n            // Rapid Overrides\n            // @param {number} value A percentage value of 25, 50, or 100. A value of zero will reset to 100%.\n            // 100: Set to 100% full rapid rate.\n            //  50: Set to 50% of rapid rate.\n            //  25: Set to 25% of rapid rate.\n            'rapidOverride': () => {\n                const [value] = args;\n\n                if (value === 0 || value === 100) {\n                    this.write('\\x95');\n                } else if (value === 50) {\n                    this.write('\\x96');\n                } else if (value === 25) {\n                    this.write('\\x97');\n                }\n            },\n            'lasertest:on': () => {\n                const [power = 0, duration = 0, maxS = 1000] = args;\n                const commands = [\n                    // https://github.com/gnea/grbl/wiki/Grbl-v1.1-Laser-Mode\n                    // The laser will only turn on when Grbl is in a G1, G2, or G3 motion mode.\n                    'G1F1 M3 S' + ensurePositiveNumber(maxS * (power / 100))\n                ];\n                if (duration > 0) {\n                    commands.push('G4P' + ensurePositiveNumber(duration));\n                    commands.push('M5 S0');\n                }\n                this.state.parserstate.modal.spindle = 'M3';\n                this.emit('controller:state', GRBL, this.state);\n                this.command('gcode', commands);\n            },\n            'lasertest:off': () => {\n                const commands = [\n                    'M5S0'\n                ];\n                this.command('gcode', commands);\n            },\n            'gcode': () => {\n                const [commands, context] = args;\n                const data = ensureArray(commands)\n                    .join('\\n')\n                    .split(/\\r?\\n/)\n                    .filter(line => {\n                        if (typeof line !== 'string') {\n                            return false;\n                        }\n\n                        return line.trim().length > 0;\n                    });\n\n                this.feeder.feed(data, context);\n\n                if (!this.feeder.isPending()) {\n                    this.feeder.next();\n                }\n            },\n            'gcode:safe': () => {\n                const [commands, prefUnits] = args;\n                const deviceUnits = this.state.parserstate.modal.units;\n                let code = [];\n\n                if (!deviceUnits) {\n                    log.error('Unable to determine device unit modal');\n                    return;\n                }\n                // Force command in preferred units\n                if (prefUnits !== deviceUnits) {\n                    code.push(prefUnits);\n                }\n                code = code.concat(commands);\n                // return modal to previous state if they were different previously\n                if (prefUnits !== deviceUnits) {\n                    code = code.concat(deviceUnits);\n                }\n                this.command('gcode', code);\n            },\n            'jog:start': () => {\n                let [axes, feedrate = 1000, units = METRIC_UNITS] = args;\n                //const JOG_COMMAND_INTERVAL = 80;\n                let unitModal = (units === METRIC_UNITS) ? 'G21' : 'G20';\n                let { $20, $130, $131, $132, $23 } = this.settings.settings;\n\n                let jogFeedrate;\n                if ($20 === '1') {\n                    $130 = Number($130);\n                    $131 = Number($131);\n                    $132 = Number($132);\n\n                    // Convert feedrate to metric if working in imperial - easier to convert feedrate and treat everything else as MM than opposite\n                    if (units !== METRIC_UNITS) {\n                        feedrate = (feedrate * 25.4).toFixed(2);\n                        unitModal = 'G21';\n                    }\n\n                    const OFFSET = 0.1;\n                    const FIXED = 2;\n\n                    //If we are moving on the positive direction, we don't need to subtract\n                    //the max travel by it as we are moving towards the zero position, but if\n                    //we are moving in the negative direction we need to subtract the max travel\n                    //by it to reach the maximum amount in that direction\n                    const calculateAxisValue = ({ direction, position, maxTravel }) => {\n                        if (position === 0) {\n                            return ((maxTravel - OFFSET) * direction).toFixed(FIXED);\n                        }\n\n                        if (direction === 1) {\n                            return Number(((position * direction) - OFFSET).toFixed(FIXED));\n                        } else {\n                            return Number(-((maxTravel - position) - OFFSET).toFixed(FIXED));\n                        }\n                    };\n\n\n                    let { mpos } = this.state.status;\n                    Object.keys(mpos).forEach((axis) => {\n                        mpos[axis] = Number(mpos[axis]);\n                    });\n\n                    if (this.homingFlagSet) {\n                        const [xMaxLoc, yMaxLoc] = getAxisMaximumLocation($23);\n\n                        if (axes.X) {\n                            axes.X = determineMaxMovement(Math.abs(mpos.x), axes.X, xMaxLoc, $130);\n                        }\n                        if (axes.Y) {\n                            axes.Y = determineMaxMovement(Math.abs(mpos.y), axes.Y, yMaxLoc, $131);\n                        }\n                    } else {\n                        if (axes.X) {\n                            axes.X = calculateAxisValue({ direction: axes.X, position: Math.abs(mpos.x), maxTravel: $130 });\n                        }\n                        if (axes.Y) {\n                            axes.Y = calculateAxisValue({ direction: axes.Y, position: Math.abs(mpos.y), maxTravel: $131 });\n                        }\n                    }\n\n                    if (axes.Z) {\n                        axes.Z = calculateAxisValue({ direction: axes.Z, position: Math.abs(mpos.z), maxTravel: $132 });\n                    }\n                } else {\n                    jogFeedrate = 1000;\n                    Object.keys(axes).forEach((axis) => {\n                        axes[axis] *= jogFeedrate;\n                    });\n                }\n\n                axes.F = feedrate;\n                if (axes.Z) {\n                    axes.F *= 0.8;\n                    axes.F = axes.F.toFixed(3);\n                }\n\n                const jogCommand = `$J=${unitModal}G91 ` + map(axes, (value, letter) => ('' + letter.toUpperCase() + value)).join(' ');\n                this.command('gcode', jogCommand);\n            },\n            'jog:stop': () => {\n                this.feeder.reset();\n                this.command('jog:cancel');\n                this.feeder.reset();\n            },\n            'jog:cancel': () => {\n                this.command('gcode', '\\x85');\n            },\n            'macro:run': () => {\n                let [id, context = {}, callback = noop] = args;\n                if (typeof context === 'function') {\n                    callback = context;\n                    context = {};\n                }\n\n                const macros = config.get('macros');\n                const macro = _.find(macros, { id: id });\n\n                if (!macro) {\n                    log.error(`Cannot find the macro: id=${id}`);\n                    return;\n                }\n\n                this.event.trigger('macro:run');\n\n                this.command('gcode', macro.content, context);\n                callback(null);\n            },\n            'macro:load': () => {\n                let [id, context = {}, callback = noop] = args;\n                if (typeof context === 'function') {\n                    callback = context;\n                    context = {};\n                }\n\n                const macros = config.get('macros');\n                const macro = _.find(macros, { id: id });\n\n                if (!macro) {\n                    log.error(`Cannot find the macro: id=${id}`);\n                    return;\n                }\n\n                this.event.trigger('macro:load');\n\n                this.command('gcode:load', macro.name, macro.content, context, callback);\n            },\n            'watchdir:load': () => {\n                const [file, callback = noop] = args;\n                const context = {}; // empty context\n\n                monitor.readFile(file, (err, data) => {\n                    if (err) {\n                        callback(err);\n                        return;\n                    }\n\n                    this.command('gcode:load', file, data, context, callback);\n                });\n            },\n            'machineprofile:load': () => {\n                const [machineProfile] = args;\n\n                store.set('machineProfile', machineProfile);\n            },\n            'settings:updated': () => {\n                const [newSettings = {}] = args;\n\n                const currentSettings = store.get('preferences') || {};\n\n                const updated = {\n                    ...currentSettings,\n                    ...newSettings,\n                };\n\n                store.set('preferences', updated);\n            },\n            'toolchange:context': () => {\n                const [context] = args;\n                this.toolChangeContext = context;\n            },\n            'toolchange:pre': () => {\n                log.debug('Starting pre hook');\n                this.runPreChangeHook();\n            },\n            'toolchange:post': () => {\n                log.debug('starting post hook');\n                this.command('feeder:start');\n                this.runPostChangeHook();\n            },\n            'gcode:outline': () => {\n                const [gcode = '', concavity = Infinity] = args;\n                const toRun = getOutlineGcode(gcode, concavity);\n                log.debug('Running outline');\n                this.emit('outline:start');\n                this.command('gcode', toRun);\n            }\n        }[cmd];\n\n        if (!handler) {\n            log.error(`Unknown command: ${cmd}`);\n            return;\n        }\n\n        handler();\n    }\n\n    write(data, context) {\n        // Assertion check\n        if (this.isClose()) {\n            log.error(`Serial port \"${this.options.port}\" is not accessible`);\n            return;\n        }\n\n        const cmd = data.trim();\n        this.actionMask.replyStatusReport = (cmd === '?') || this.actionMask.replyStatusReport;\n        this.actionMask.replyParserState = (cmd === '$G') || this.actionMask.replyParserState;\n\n        this.emit('serialport:write', data, {\n            ...context,\n            source: WRITE_SOURCE_CLIENT\n        });\n        this.connection.write(data);\n        log.silly(`> ${data}`);\n    }\n\n    writeln(data, context) {\n        if (_.includes(GRBL_REALTIME_COMMANDS, data)) {\n            this.write(data, context);\n        } else {\n            this.write(data + '\\n', context);\n        }\n    }\n\n    convertGcodeToArray(gcode) {\n        //Clean up lines and remove ones that are comments and headers\n        const lines = gcode\n            .split('\\n')\n            .filter(line => (line.trim().length > 0));\n        return lines;\n    }\n\n    updateSpindleModal(modal) {\n        this.state.parserstate.modal.spindle = modal;\n        this.emit('controller:state', GRBL, this.state);\n    }\n\n    /* Runs specified code segment on M6 command before alerting the UI as to what's happened */\n    runPreChangeHook() {\n        const { preHook } = this.toolChangeContext || '';\n        const block = this.convertGcodeToArray(preHook);\n        block.push(PREHOOK_COMPLETE);\n\n        this.command('gcode', block);\n    }\n\n    runPostChangeHook() {\n        const { postHook } = this.toolChangeContext || '';\n        const block = this.convertGcodeToArray(postHook);\n        block.push(POSTHOOK_COMPLETE);\n\n        this.command('gcode', block);\n    }\n}\n\nexport default GrblController;\n","class MarlinLineParserResultEcho {\n    // echo:\n    static parse(line) {\n        const r = line.match(/^echo:\\s*(.+)$/i);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {\n            message: r[1]\n        };\n\n        return {\n            type: MarlinLineParserResultEcho,\n            payload: payload\n        };\n    }\n}\n\nexport default MarlinLineParserResultEcho;\n","class MarlinLineParserResultError {\n    // Error:Printer halted. kill() called!\n    static parse(line) {\n        const r = line.match(/^Error:\\s*(.+)$/i);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {\n            message: r[1]\n        };\n\n        return {\n            type: MarlinLineParserResultError,\n            payload: payload\n        };\n    }\n}\n\nexport default MarlinLineParserResultError;\n","class MarlinLineParserResultFirmware {\n    // FIRMWARE_NAME:Marlin 1.1.0 (Github) SOURCE_CODE_URL:https://github.com/MarlinFirmware/Marlin PROTOCOL_VERSION:1.0 MACHINE_TYPE:RepRap EXTRUDER_COUNT:1 UUID:cede2a2f-41a2-4748-9b12-c55c62f367ff\n    static parse(line) {\n        let r = line.match(/^FIRMWARE_NAME:.*/i);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {};\n\n        { // FIRMWARE_NAME\n            const r = line.match(/FIRMWARE_NAME:([a-zA-Z\\_\\-]+(\\s+[\\d\\.]+)?)/);\n            if (r) {\n                payload.firmwareName = r[1];\n            }\n        }\n\n        { // PROTOCOL_VERSION\n            const r = line.match(/PROTOCOL_VERSION:([\\d\\.]+)/);\n            if (r) {\n                payload.protocolVersion = r[1];\n            }\n        }\n\n        { // MACHINE_TYPE\n            const r = line.match(/MACHINE_TYPE:(\\w+)/);\n            if (r) {\n                payload.machineType = r[1];\n            }\n        }\n\n        { // EXTRUDER_COUNT\n            const r = line.match(/EXTRUDER_COUNT:(\\d+)/);\n            if (r) {\n                payload.extruderCount = Number(r[1]);\n            }\n        }\n\n        { // UUID\n            const r = line.match(/UUID:([a-zA-Z0-9\\-]+)/);\n            if (r) {\n                payload.uuid = r[1];\n            }\n        }\n\n        return {\n            type: MarlinLineParserResultFirmware,\n            payload: payload\n        };\n    }\n}\n\nexport default MarlinLineParserResultFirmware;\n","class MarlinLineParserResultOk {\n    // ok\n    static parse(line) {\n        const r = line.match(/^ok$/);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {};\n\n        return {\n            type: MarlinLineParserResultOk,\n            payload: payload\n        };\n    }\n}\n\nexport default MarlinLineParserResultOk;\n","import decimalPlaces from '../../lib/decimal-places';\n\nclass MarlinLineParserResultPosition {\n    // X:0.00 Y:0.00 Z:0.00 E:0.00 Count X:0 Y:0 Z:0\n    static parse(line) {\n        const r = line.match(/^(?:(?:X|Y|Z|E):[0-9\\.\\-]+\\s+)+/i);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {\n            pos: {}\n        };\n        const pattern = /((X|Y|Z|E):[0-9\\.\\-]+)+/gi;\n        const params = r[0].match(pattern);\n\n        for (let param of params) {\n            const nv = param.match(/^(.+):(.+)/);\n            if (nv) {\n                const axis = nv[1].toLowerCase();\n                const pos = nv[2];\n                const digits = decimalPlaces(pos);\n                payload.pos[axis] = Number(pos).toFixed(digits);\n            }\n        }\n\n        return {\n            type: MarlinLineParserResultPosition,\n            payload: payload\n        };\n    }\n}\n\nexport default MarlinLineParserResultPosition;\n","class MarlinLineParserResultStart {\n    // start\n    static parse(line) {\n        const r = line.match(/^(?:echo:)?start$/i);\n        if (!r) {\n            return null;\n        }\n\n        const payload = {};\n\n        return {\n            type: MarlinLineParserResultStart,\n            payload: payload\n        };\n    }\n}\n\nexport default MarlinLineParserResultStart;\n","import _ from 'lodash';\nimport MarlinLineParserResultEcho from './MarlinLineParserResultEcho';\nimport MarlinLineParserResultError from './MarlinLineParserResultError';\nimport MarlinLineParserResultFirmware from './MarlinLineParserResultFirmware';\nimport MarlinLineParserResultOk from './MarlinLineParserResultOk';\nimport MarlinLineParserResultPosition from './MarlinLineParserResultPosition';\nimport MarlinLineParserResultStart from './MarlinLineParserResultStart';\n\nclass MarlinLineParser {\n    parse(line) {\n        const parsers = [\n            // start\n            MarlinLineParserResultStart,\n\n            // FIRMWARE_NAME:Marlin 1.1.0 (Github) SOURCE_CODE_URL:https://github.com/MarlinFirmware/Marlin PROTOCOL_VERSION:1.0 MACHINE_TYPE:RepRap EXTRUDER_COUNT:1 UUID:cede2a2f-41a2-4748-9b12-c55c62f367ff\n            MarlinLineParserResultFirmware,\n\n            // X:0.00 Y:0.00 Z:0.00 E:0.00 Count X:0 Y:0 Z:0\n            MarlinLineParserResultPosition,\n\n            // ok\n            MarlinLineParserResultOk,\n\n            // echo:\n            MarlinLineParserResultEcho,\n\n            // Error:Printer halted. kill() called!\n            MarlinLineParserResultError,\n        ];\n\n        for (let parser of parsers) {\n            const result = parser.parse(line);\n            if (result) {\n                _.set(result, 'payload.raw', line);\n                return result;\n            }\n        }\n\n        return {\n            type: null,\n            payload: {\n                raw: line\n            }\n        };\n    }\n}\n\nexport default MarlinLineParser;\n","import events from 'events';\nimport _ from 'lodash';\nimport MarlinLineParser from './MarlinLineParser';\nimport MarlinLineParserResultStart from './MarlinLineParserResultStart';\nimport MarlinLineParserResultFirmware from './MarlinLineParserResultFirmware';\nimport MarlinLineParserResultPosition from './MarlinLineParserResultPosition';\nimport MarlinLineParserResultOk from './MarlinLineParserResultOk';\nimport MarlinLineParserResultEcho from './MarlinLineParserResultEcho';\nimport MarlinLineParserResultError from './MarlinLineParserResultError';\n\nclass MarlinRunner extends events.EventEmitter {\n    state = {\n        pos: {\n            x: '0.000',\n            y: '0.000',\n            z: '0.000',\n            e: '0.000'\n        },\n        modal: {\n            motion: 'G0', // G0, G1, G2, G3, G38.2, G38.3, G38.4, G38.5, G80\n            wcs: 'G54', // G54, G55, G56, G57, G58, G59\n            plane: 'G17', // G17: xy-plane, G18: xz-plane, G19: yz-plane\n            units: 'G20', // G20: Inches, G21: Millimeters\n            distance: 'G90', // G90: Absolute, G91: Relative\n            feedrate: 'G94', // G93: Inverse time mode, G94: Units per minute\n            program: 'M0', // M0, M1, M2, M30\n            spindle: 'M5', // M3: Spindle (cw), M4: Spindle (ccw), M5: Spindle off\n            coolant: 'M9' // M7: Mist coolant, M8: Flood coolant, M9: Coolant off, [M7,M8]: Both on\n        },\n        ovF: 100,\n        ovS: 100,\n        rapidFeedrate: 0, // Related to G0\n        feedrate: 0, // Related to G1, G2, G3, G38.2, G38.3, G38.4, G38.5, G80\n        spindle: 0 // Related to M3, M4, M5\n    };\n\n    settings = {\n    };\n\n    parser = new MarlinLineParser();\n\n    parse(data) {\n        data = ('' + data).replace(/\\s+$/, '');\n        if (!data) {\n            return;\n        }\n\n        this.emit('raw', { raw: data });\n\n        const result = this.parser.parse(data) || {};\n        const { type, payload } = result;\n        // const { raw } = payload;\n\n        if (type === MarlinLineParserResultStart) {\n            this.emit('start', payload);\n            return;\n        }\n        if (type === MarlinLineParserResultFirmware) {\n            const {\n                firmwareName,\n                protocolVersion,\n                machineType,\n                extruderCount,\n                uuid\n            } = payload;\n            const nextSettings = {\n                ...this.settings,\n                firmwareName,\n                protocolVersion,\n                machineType,\n                extruderCount,\n                uuid\n            };\n            if (!_.isEqual(this.settings, nextSettings)) {\n                this.settings = nextSettings; // enforce change\n            }\n\n            this.emit('firmware', payload);\n            return;\n        }\n        if (type === MarlinLineParserResultPosition) {\n            const nextState = {\n                ...this.state,\n                pos: {\n                    ...this.state.pos,\n                    ...payload.pos\n                }\n            };\n\n            if (!_.isEqual(this.state.pos, nextState.pos)) {\n                this.state = nextState; // enforce change\n            }\n            this.emit('pos', payload);\n            return;\n        }\n        if (type === MarlinLineParserResultOk) {\n            this.emit('ok', payload);\n            return;\n        }\n        if (type === MarlinLineParserResultError) {\n            this.emit('error', payload);\n            return;\n        }\n        if (type === MarlinLineParserResultEcho) {\n            this.emit('echo', payload);\n            return;\n        }\n        if (data.length > 0) {\n            this.emit('others', payload);\n            return;\n        }\n    }\n\n    getPosition(state = this.state) {\n        return _.get(state, 'pos', {});\n    }\n\n    getModalGroup(state = this.state) {\n        return _.get(state, 'modal', {});\n    }\n\n    getTool(state = this.state) {\n        // Not supported\n        return 0;\n    }\n\n    isAlarm() {\n        // Not supported\n        return false;\n    }\n\n    isIdle() {\n        // Not supported\n        return false;\n    }\n}\n\nexport default MarlinRunner;\n","import ensureArray from 'ensure-array';\nimport { parseLine } from 'gcode-parser';\n\nconst fromPairs = (pairs) => {\n    let index = -1;\n    const length = (!pairs) ? 0 : pairs.length;\n    const result = {};\n\n    while (++index < length) {\n        const pair = pairs[index];\n        result[pair[0]] = pair[1];\n    }\n\n    return result;\n};\n\nconst partitionWordsByGroup = (words = []) => {\n    const groups = [];\n\n    for (let i = 0; i < words.length; ++i) {\n        const word = words[i];\n        const letter = word[0];\n\n        if ((letter === 'G') || (letter === 'M')) {\n            groups.push([word]);\n            continue;\n        }\n\n        if (groups.length > 0) {\n            groups[groups.length - 1].push(word);\n        } else {\n            groups.push([word]);\n        }\n    }\n\n    return groups;\n};\n\nconst interpret = (function() {\n    let cmd = '';\n\n    return function (line, callback) {\n        const data = parseLine(line);\n        const groups = partitionWordsByGroup(ensureArray(data.words));\n\n        for (let i = 0; i < groups.length; ++i) {\n            const words = groups[i];\n            const word = words[0] || [];\n            const letter = word[0];\n            const arg = word[1];\n\n            if (letter === 'G' || letter === 'M') {\n                cmd = letter + arg;\n                const params = fromPairs(words.slice(1));\n                callback(cmd, params);\n            } else {\n                // Use previous command if the line does not start with Gxx or Mxx\n                // G0 XZ0.25\n                //   X-0.5 Y0\n                //   Z0.1\n                const params = fromPairs(words);\n                callback(cmd, params);\n            }\n        }\n    };\n}());\n\nexport default interpret;\n","// Marlin\nexport const MARLIN = 'Marlin';\n\nexport const QUERY_TYPE_POSITION = 'position';\nexport const QUERY_TYPE_TEMPERATURE = 'temperature';\n","import ensureArray from 'ensure-array';\nimport * as parser from 'gcode-parser';\n// import Toolpath from 'gcode-toolpath';\nimport _ from 'lodash';\nimport map from 'lodash/map';\nimport SerialConnection from '../../lib/SerialConnection';\nimport EventTrigger from '../../lib/EventTrigger';\nimport Feeder from '../../lib/Feeder';\nimport Sender, { SP_TYPE_CHAR_COUNTING } from '../../lib/Sender';\nimport Workflow, {\n    WORKFLOW_STATE_IDLE,\n    WORKFLOW_STATE_PAUSED,\n    WORKFLOW_STATE_RUNNING\n} from '../../lib/Workflow';\n// import delay from '../../lib/delay';\nimport ensurePositiveNumber from '../../lib/ensure-positive-number';\nimport evaluateAssignmentExpression from '../../lib/evaluate-assignment-expression';\nimport logger from '../../lib/logger';\nimport translateExpression from '../../lib/translate-expression';\nimport config from '../../services/configstore';\nimport monitor from '../../services/monitor';\nimport taskRunner from '../../services/taskrunner';\nimport { getOutlineGcode } from '../../lib/outlineService';\nimport store from '../../store';\nimport {\n    GLOBAL_OBJECTS as globalObjects,\n    WRITE_SOURCE_CLIENT,\n    WRITE_SOURCE_SERVER,\n    WRITE_SOURCE_FEEDER,\n    WRITE_SOURCE_SENDER\n} from '../constants';\nimport MarlinRunner from './MarlinRunner';\nimport interpret from './interpret';\nimport {\n    MARLIN,\n    QUERY_TYPE_POSITION,\n} from './constants';\nimport { METRIC_UNITS } from '../../../app/constants';\nimport { determineMaxMovement, getAxisMaximumLocation } from '../../lib/homing';\n\n// % commands\nconst WAIT = '%wait';\n\nconst log = logger('controller:Marlin');\nconst noop = _.noop;\n\nclass MarlinController {\n    type = MARLIN;\n\n    // CNCEngine\n    engine = null;\n\n    // Sockets\n    sockets = {};\n\n    // Connection\n    connection = null;\n\n    connectionEventListener = {\n        data: (data) => {\n            log.silly(`< ${data}`);\n            this.runner.parse('' + data);\n        },\n        close: (err) => {\n            this.ready = false;\n            if (err) {\n                log.warn(`Disconnected from serial port \"${this.options.port}\":`, err);\n            }\n\n            this.close(err => {\n                // Remove controller from store\n                const port = this.options.port;\n                store.unset(`controllers[${JSON.stringify(port)}]`);\n\n                // Destroy controller\n                this.destroy();\n            });\n        },\n        error: (err) => {\n            this.ready = false;\n            if (err) {\n                log.error(`Unexpected error while reading/writing serial port \"${this.options.port}\":`, err);\n            }\n        }\n    };\n\n    // Marlin\n    controller = null;\n\n    ready = false;\n\n    initialized = false;\n\n    state = {};\n\n    settings = {};\n\n    feedOverride = 100;\n\n    spindleOverride = 100;\n\n    history = {\n        // The write source is one of the following:\n        // * WRITE_SOURCE_CLIENT\n        // * WRITE_SOURCE_SERVER\n        // * WRITE_SOURCE_FEEDER\n        // * WRITE_SOURCE_SENDER\n        writeSource: null,\n\n        writeLine: ''\n    };\n\n    // Event Trigger\n    event = null;\n\n    // Feeder\n    feeder = null;\n\n    // Sender\n    sender = null;\n\n    senderFinishTime = 0;\n\n    // Shared context\n    sharedContext = {};\n\n    // Workflow\n    workflow = null;\n\n    // Query\n    queryTimer = null;\n\n    query = {\n        // state\n        type: null,\n        lastQueryTime: 0,\n\n        // action\n        issue: () => {\n            if (!this.query.type) {\n                return;\n            }\n\n            const now = new Date().getTime();\n\n            if (this.query.type === QUERY_TYPE_POSITION) {\n                this.connection.write('M114\\n', {\n                    source: WRITE_SOURCE_SERVER\n                });\n                this.query.lastQueryTime = now;\n            } else {\n                log.error('Unsupported query type:', this.query.type);\n            }\n\n            this.query.type = null;\n        }\n    };\n\n    // Get the current position of the steppers.\n    queryPosition = (() => {\n        let lastQueryTime = 0;\n\n        return _.throttle(() => {\n            // Check the ready flag\n            if (!(this.ready)) {\n                return;\n            }\n\n            const now = new Date().getTime();\n\n            if (!this.query.type) {\n                this.query.type = QUERY_TYPE_POSITION;\n                lastQueryTime = now;\n            } else if (lastQueryTime > 0) {\n                const timespan = Math.abs(now - lastQueryTime);\n                const toleranceTime = 5000; // 5 seconds\n\n                if (timespan >= toleranceTime) {\n                    log.silly(`Reschedule current position query: now=${now}ms, timespan=${timespan}ms`);\n                    this.query.type = QUERY_TYPE_POSITION;\n                    lastQueryTime = now;\n                }\n            }\n        }, 500);\n    })();\n\n    constructor(engine, options) {\n        if (!engine) {\n            throw new Error('engine must be specified');\n        }\n        this.engine = engine;\n\n        const { port, baudrate, rtscts } = { ...options };\n        this.options = {\n            ...this.options,\n            port: port,\n            baudrate: baudrate,\n            rtscts: rtscts\n        };\n\n        // Connection\n        this.connection = new SerialConnection({\n            path: port,\n            baudRate: baudrate,\n            rtscts: rtscts,\n            writeFilter: (data, context) => {\n                const { source = null } = { ...context };\n                const line = data.trim();\n\n                // Update write history\n                this.history.writeSource = source;\n                this.history.writeLine = line;\n\n                if (!line) {\n                    return data;\n                }\n\n                const nextState = {\n                    ...this.runner.state,\n                    modal: {\n                        ...this.runner.state.modal\n                    }\n                };\n\n                interpret(line, (cmd, params) => {\n                    // motion\n                    if (_.includes(['G0', 'G1', 'G2', 'G3', 'G38.2', 'G38.3', 'G38.4', 'G38.5', 'G80'], cmd)) {\n                        nextState.modal.motion = cmd;\n\n                        if (params.F !== undefined) {\n                            if (cmd === 'G0') {\n                                nextState.rapidFeedrate = params.F;\n                            } else {\n                                nextState.feedrate = params.F;\n                            }\n                        }\n                    }\n\n                    // wcs\n                    if (_.includes(['G54', 'G55', 'G56', 'G57', 'G58', 'G59'], cmd)) {\n                        nextState.modal.wcs = cmd;\n                    }\n\n                    // plane\n                    if (_.includes(['G17', 'G18', 'G19'], cmd)) {\n                        // G17: xy-plane, G18: xz-plane, G19: yz-plane\n                        nextState.modal.plane = cmd;\n                    }\n\n                    // units\n                    if (_.includes(['G20', 'G21'], cmd)) {\n                        // G20: Inches, G21: Millimeters\n                        nextState.modal.units = cmd;\n                    }\n\n                    // distance\n                    if (_.includes(['G90', 'G91'], cmd)) {\n                        // G90: Absolute, G91: Relative\n                        nextState.modal.distance = cmd;\n                    }\n\n                    // feedrate\n                    if (_.includes(['G93', 'G94'], cmd)) {\n                        // G93: Inverse time mode, G94: Units per minute\n                        nextState.modal.feedrate = cmd;\n                    }\n\n                    // program\n                    if (_.includes(['M0', 'M1', 'M2', 'M30'], cmd)) {\n                        nextState.modal.program = cmd;\n                    }\n\n                    // spindle or head\n                    if (_.includes(['M3', 'M4', 'M5'], cmd)) {\n                        // M3: Spindle (cw), M4: Spindle (ccw), M5: Spindle off\n                        nextState.modal.spindle = cmd;\n\n                        if (cmd === 'M3' || cmd === 'M4') {\n                            if (params.S !== undefined) {\n                                nextState.spindle = params.S;\n                            }\n                        }\n                    }\n\n                    // coolant\n                    if (_.includes(['M7', 'M8', 'M9'], cmd)) {\n                        const coolant = nextState.modal.coolant;\n\n                        // M7: Mist coolant, M8: Flood coolant, M9: Coolant off, [M7,M8]: Both on\n                        if (cmd === 'M9' || coolant === 'M9') {\n                            nextState.modal.coolant = cmd;\n                        } else {\n                            nextState.modal.coolant = _.uniq(ensureArray(coolant).concat(cmd)).sort();\n                            if (nextState.modal.coolant.length === 1) {\n                                nextState.modal.coolant = nextState.modal.coolant[0];\n                            }\n                        }\n                    }\n                });\n\n                if (!_.isEqual(this.runner.state, nextState)) {\n                    this.runner.state = nextState; // enforce change\n                }\n\n                return data;\n            }\n        });\n\n        // Event Trigger\n        this.event = new EventTrigger((event, trigger, commands) => {\n            log.debug(`EventTrigger: event=\"${event}\", trigger=\"${trigger}\", commands=\"${commands}\"`);\n            if (trigger === 'system') {\n                taskRunner.run(commands);\n            } else {\n                this.command('gcode', commands);\n            }\n        });\n\n        // Feeder\n        this.feeder = new Feeder({\n            dataFilter: (line, context) => {\n                // Remove comments that start with a semicolon `;`\n                line = line.replace(/\\s*;.*/g, '').trim();\n                context = this.populateContext(context);\n\n                if (line[0] === '%') {\n                    // %wait\n                    if (line === WAIT) {\n                        log.debug('Wait for the planner to empty');\n                        // G4 [P<time in ms>] [S<time in sec>]\n                        // If both S and P are included, S takes precedence.\n                        return 'G4 P500'; // dwell\n                    }\n\n                    // Expression\n                    // %_x=posx,_y=posy,_z=posz\n                    evaluateAssignmentExpression(line.slice(1), context);\n                    return '';\n                }\n\n                // line=\"G0 X[posx - 8] Y[ymax]\"\n                // > \"G0 X2 Y50\"\n                line = translateExpression(line, context);\n                const data = parser.parseLine(line, { flatten: true });\n                const words = ensureArray(data.words);\n\n                { // Program Mode: M0, M1\n                    const programMode = _.intersection(words, ['M0', 'M1'])[0];\n                    if (programMode === 'M0') {\n                        log.debug('M0 Program Pause');\n                        this.workflow.pause({ data: 'M0' });\n                        this.emit('workflow:pause', { data: 'M0' });\n                        return line.replace('M0', '(M0)');\n                    } else if (programMode === 'M1') {\n                        log.debug('M1 Program Pause');\n                        this.workflow.pause({ data: 'M1' });\n                        this.emit('workflow:pause', { data: 'M1' });\n                        return line.replace('M1', '(M1)');\n                    }\n                }\n\n                // M6 Tool Change\n                if (_.includes(words, 'M6')) {\n                    log.debug('M6 Tool Change');\n                    this.feeder.hold({ data: 'M6' }); // Hold reason\n                }\n\n                // More aggressive updating of spindle modals for safety\n                const spindleCommand = _.intersection(words, ['M3', 'M4'])[0];\n                if (spindleCommand) {\n                    this.updateSpindleModal(spindleCommand);\n                }\n                return line;\n            }\n        });\n        this.feeder.on('data', (line = '', context = {}) => {\n            if (this.isClose()) {\n                log.error(`Serial port \"${this.options.port}\" is not accessible`);\n                return;\n            }\n\n            if (this.runner.isAlarm()) {\n                this.feeder.reset();\n                this.emit('workflow:state', this.workflow.state); // Propogate alarm code to UI\n                log.warn('Stopped sending G-code commands in Alarm mode');\n                return;\n            }\n\n            line = String(line).trim();\n            if (line.length === 0) {\n                return;\n            }\n\n            this.emit('serialport:write', line + '\\n', {\n                ...context,\n                source: WRITE_SOURCE_FEEDER\n            });\n\n            this.connection.write(line + '\\n', {\n                source: WRITE_SOURCE_FEEDER\n            });\n            log.silly(`> ${line}`);\n        });\n        this.feeder.on('hold', noop);\n        this.feeder.on('unhold', noop);\n\n        // Sender\n        this.sender = new Sender(SP_TYPE_CHAR_COUNTING, {\n            //            // Deduct the buffer size to prevent from buffer overrun\n            //            bufferSize: (128 - 8), // The default buffer size is 128 bytes\n            dataFilter: (line, context) => {\n                // Remove comments that start with a semicolon `;`\n                line = line.replace(/\\s*;.*/g, '').trim();\n                context = this.populateContext(context);\n\n                const { sent, received } = this.sender.state;\n\n                if (line[0] === '%') {\n                    // %wait\n                    if (line === WAIT) {\n                        log.debug(`Wait for the planner to empty: line=${sent + 1}, sent=${sent}, received=${received}`);\n                        this.sender.hold({ data: WAIT }); // Hold reason\n\n                        // G4 [P<time in ms>] [S<time in sec>]\n                        // If both S and P are included, S takes precedence.\n                        return 'G4 P500'; // dwell\n                    }\n\n                    // Expression\n                    // %_x=posx,_y=posy,_z=posz\n                    evaluateAssignmentExpression(line.slice(1), context);\n                    return '';\n                }\n\n                // line=\"G0 X[posx - 8] Y[ymax]\"\n                // > \"G0 X2 Y50\"\n                line = translateExpression(line, context);\n                const data = parser.parseLine(line, { flatten: true });\n                const words = ensureArray(data.words);\n\n                { // Program Mode: M0, M1\n                    const programMode = _.intersection(words, ['M0', 'M1'])[0];\n                    if (programMode === 'M0') {\n                        log.debug(`M0 Program Pause: line=${sent + 1}, sent=${sent}, received=${received}`);\n                        // Workaround for Carbide files - prevent M0 early from pausing program\n                        if (sent > 10) {\n                            this.workflow.pause({ data: 'M0' });\n                            this.emit('workflow:pause', { data: 'M0' });\n                        }\n                        return line.replace('M0', '(M0)');\n                    } else if (programMode === 'M1') {\n                        log.debug(`M1 Program Pause: line=${sent + 1}, sent=${sent}, received=${received}`);\n                        this.workflow.pause({ data: 'M1' });\n                        this.emit('workflow:pause', { data: 'M1' });\n                        return line.replace('M1', '(M1)');\n                    }\n                }\n\n                // M6 Tool Change\n                if (_.includes(words, 'M6')) {\n                    log.debug(`M6 Tool Change: line=${sent + 1}, sent=${sent}, received=${received}`);\n                    this.workflow.pause({ data: 'M6' });\n                }\n\n                return line;\n            }\n        });\n        this.sender.on('data', (line = '', context = {}) => {\n            if (this.isClose()) {\n                log.error(`Serial port \"${this.options.port}\" is not accessible`);\n                return;\n            }\n\n            if (this.workflow.state === WORKFLOW_STATE_IDLE) {\n                log.error(`Unexpected workflow state: ${this.workflow.state}`);\n                return;\n            }\n\n            line = String(line).trim();\n            if (line.length === 0) {\n                log.warn(`Expected non-empty line: N=${this.sender.state.sent}`);\n                return;\n            }\n\n            this.emit('serialport:read', line);\n\n            this.connection.write(line + '\\n', {\n                source: WRITE_SOURCE_SENDER\n            });\n            log.silly(`> ${line}`);\n        });\n        this.sender.on('hold', noop);\n        this.sender.on('unhold', noop);\n        this.sender.on('start', (startTime) => {\n            this.senderFinishTime = 0;\n        });\n        this.sender.on('end', (finishTime) => {\n            this.senderFinishTime = finishTime;\n        });\n\n        // Workflow\n        this.workflow = new Workflow();\n        this.workflow.on('start', (...args) => {\n            this.emit('workflow:state', this.workflow.state);\n            this.sender.rewind();\n        });\n        this.workflow.on('stop', (...args) => {\n            this.emit('workflow:state', this.workflow.state);\n            this.sender.rewind();\n        });\n        this.workflow.on('pause', (...args) => {\n            this.emit('workflow:state', this.workflow.state);\n\n            if (args.length > 0) {\n                const reason = { ...args[0] };\n                this.sender.hold(reason); // Hold reason\n            } else {\n                this.sender.hold();\n            }\n        });\n        this.workflow.on('resume', (...args) => {\n            this.emit('workflow:state', this.workflow.state);\n\n            // Reset feeder prior to resume program execution\n            this.feeder.reset();\n\n            // Resume program execution\n            this.sender.unhold();\n            this.sender.next();\n        });\n\n        // Marlin\n        this.runner = new MarlinRunner();\n\n        this.runner.on('raw', noop);\n\n        this.runner.on('start', (res) => {\n            this.emit('serialport:read', res.raw);\n            // Marlin sends 'start' as the first message after\n            // power-on, but not when the serial port is closed and\n            // then re-opened.  Marlin has no software-initiated\n            // restart, so 'start' is not dependable as a readiness\n            // indicator.  Instead, we send M115 on connection open\n            // to request a firmware report, whose response signals\n            // Marlin readiness.  On initial power-up, Marlin might\n            // miss that first M115 as it boots, so we send this\n            // possibly-redundant M115 when we see 'start'.\n            this.connection.write('M115\\n', {\n                source: WRITE_SOURCE_SERVER\n            });\n        });\n\n        this.runner.on('echo', (res) => {\n            this.emit('serialport:read', res.raw);\n        });\n\n        this.runner.on('firmware', (res) => {\n            this.emit('serialport:read', res.raw);\n            if (!this.ready) {\n                this.ready = true;\n                // Initialize controller\n                this.event.trigger('controller:ready');\n            }\n        });\n\n        this.runner.on('pos', (res) => {\n            log.silly(`controller.on('pos'): source=${this.history.writeSource}, line=${JSON.stringify(this.history.writeLine)}, res=${JSON.stringify(res)}`);\n\n            if (_.includes([WRITE_SOURCE_CLIENT, WRITE_SOURCE_FEEDER], this.history.writeSource)) {\n                this.emit('serialport:read', res.raw);\n            }\n        });\n\n        this.runner.on('temperature', (res) => {\n            log.silly(`controller.on('temperature'): source=${this.history.writeSource}, line=${JSON.stringify(this.history.writeLine)}, res=${JSON.stringify(res)}`);\n\n            if (_.includes([WRITE_SOURCE_CLIENT, WRITE_SOURCE_FEEDER], this.history.writeSource)) {\n                this.emit('serialport:read', res.raw);\n            }\n        });\n\n        this.runner.on('ok', (res) => {\n            log.silly(`controller.on('ok'): source=${this.history.writeSource}, line=${JSON.stringify(this.history.writeLine)}, res=${JSON.stringify(res)}`);\n\n            if (res) {\n                if (_.includes([WRITE_SOURCE_CLIENT, WRITE_SOURCE_FEEDER], this.history.writeSource)) {\n                    this.emit('serialport:read', res.raw);\n                } else if (!this.history.writeSource) {\n                    this.emit('serialport:read', res.raw);\n                    log.error('\"history.writeSource\" should not be empty');\n                }\n            }\n\n            this.history.writeSource = null;\n            this.history.writeLine = '';\n\n            // Perform preemptive query to prevent starvation\n            const now = new Date().getTime();\n            const timespan = Math.abs(now - this.query.lastQueryTime);\n            if (this.query.type && timespan > 2000) {\n                this.query.issue();\n                return;\n            }\n\n            const { hold, sent, received } = this.sender.state;\n\n            if (this.workflow.state === WORKFLOW_STATE_RUNNING) {\n                this.emit('serialport:read', res.raw);\n                if (hold && (received + 1 >= sent)) {\n                    log.debug(`Continue sending G-code: hold=${hold}, sent=${sent}, received=${received + 1}`);\n                    this.sender.unhold();\n                }\n                this.sender.ack();\n                this.sender.next();\n                return;\n            }\n\n            if ((this.workflow.state === WORKFLOW_STATE_PAUSED) && (received < sent)) {\n                this.emit('serialport:read', res.raw);\n                if (!hold) {\n                    log.error('The sender does not hold off during the paused state');\n                }\n                if (received + 1 >= sent) {\n                    log.debug(`Stop sending G-code: hold=${hold}, sent=${sent}, received=${received + 1}`);\n                }\n                this.sender.ack();\n                this.sender.next();\n                return;\n            }\n\n            // Feeder\n            if (this.feeder.next()) {\n                return;\n            }\n\n            this.query.issue();\n        });\n\n        this.runner.on('error', (res) => {\n            // Sender\n            if (this.workflow.state === WORKFLOW_STATE_RUNNING) {\n                const ignoreErrors = config.get('state.controller.exception.ignoreErrors');\n                const pauseError = !ignoreErrors;\n                const { lines, received } = this.sender.state;\n                const line = lines[received] || '';\n\n                this.emit('serialport:read', `> ${line.trim()} (line=${received + 1})`);\n                this.emit('serialport:read', res.raw);\n\n                if (pauseError) {\n                    this.workflow.pause({ err: res.raw });\n                }\n\n                this.sender.ack();\n                this.sender.next();\n\n                return;\n            }\n\n            this.emit('serialport:read', res.raw);\n\n            // Feeder\n            this.feeder.next();\n        });\n\n        this.runner.on('others', (res) => {\n            this.emit('serialport:read', res.raw);\n        });\n\n        this.queryTimer = setInterval(() => {\n            if (this.isClose()) {\n                // Serial port is closed\n                return;\n            }\n\n            // Feeder\n            if (this.feeder.peek()) {\n                this.emit('feeder:status', this.feeder.toJSON());\n            }\n\n            // Sender\n            if (this.sender.peek()) {\n                this.emit('sender:status', this.sender.toJSON());\n            }\n\n            const zeroOffset = _.isEqual(\n                this.runner.getPosition(this.state),\n                this.runner.getPosition(this.runner.state)\n            );\n\n            // Marlin settings\n            if (this.settings !== this.runner.settings) {\n                this.settings = this.runner.settings;\n                this.emit('controller:settings', MARLIN, this.settings);\n                this.emit('Marlin:settings', this.settings); // Backward compatibility\n            }\n\n            // Marlin state\n            if (this.state !== this.runner.state) {\n                this.state = this.runner.state;\n                this.emit('controller:state', MARLIN, this.state);\n                this.emit('Marlin:state', this.state); // Backward compatibility\n            }\n\n            // Check the ready flag\n            if (!(this.ready)) {\n                return;\n            }\n\n            // M114: Get Current Position\n            this.queryPosition();\n\n            { // The following criteria must be met to issue a query\n                const notBusy = !(this.history.writeSource);\n                const senderIdle = (this.sender.state.sent === this.sender.state.received);\n                const feederEmpty = (this.feeder.size() === 0);\n\n                if (notBusy && senderIdle && feederEmpty) {\n                    this.query.issue();\n                }\n            }\n\n            // Check if the machine has stopped movement after completion\n            if (this.senderFinishTime > 0) {\n                const machineIdle = zeroOffset;\n                const now = new Date().getTime();\n                const timespan = Math.abs(now - this.senderFinishTime);\n                const toleranceTime = 500; // in milliseconds\n\n                if (!machineIdle) {\n                    // Extend the sender finish time\n                    this.senderFinishTime = now;\n                } else if (timespan > toleranceTime) {\n                    log.silly(`Finished sending G-code: timespan=${timespan}`);\n\n                    this.senderFinishTime = 0;\n\n                    // Stop workflow\n                    this.command('gcode:stop');\n                }\n            }\n        }, 250);\n\n        // Load file if it exists in CNC engine (AKA it was loaded before connection\n    }\n\n    populateContext(context) {\n        // Work position\n        const {\n            x: posx,\n            y: posy,\n            z: posz,\n            e: pose\n        } = this.runner.getPosition();\n\n        // Modal group\n        const modal = this.runner.getModalGroup();\n\n        // Tool\n        const tool = this.runner.getTool();\n\n        return Object.assign(context || {}, {\n            // User-defined global variables\n            global: this.sharedContext,\n\n            // Bounding box\n            xmin: Number(context.xmin) || 0,\n            xmax: Number(context.xmax) || 0,\n            ymin: Number(context.ymin) || 0,\n            ymax: Number(context.ymax) || 0,\n            zmin: Number(context.zmin) || 0,\n            zmax: Number(context.zmax) || 0,\n\n            // Work position\n            posx: Number(posx) || 0,\n            posy: Number(posy) || 0,\n            posz: Number(posz) || 0,\n            pose: Number(pose) || 0,\n\n            // Modal group\n            modal: {\n                motion: modal.motion,\n                wcs: modal.wcs,\n                plane: modal.plane,\n                units: modal.units,\n                distance: modal.distance,\n                feedrate: modal.feedrate,\n                program: modal.program,\n                spindle: modal.spindle,\n                // M7 and M8 may be active at the same time, but a modal group violation might occur when issuing M7 and M8 together on the same line. Using the new line character (\\n) to separate lines can avoid this issue.\n                coolant: ensureArray(modal.coolant).join('\\n'),\n            },\n\n            // Tool\n            tool: Number(tool) || 0,\n\n            // Global objects\n            ...globalObjects,\n        });\n    }\n\n    destroy() {\n        if (this.queryTimer) {\n            clearInterval(this.queryTimer);\n            this.queryTimer = null;\n        }\n\n        if (this.runner) {\n            this.runner.removeAllListeners();\n            this.runner = null;\n        }\n\n        this.sockets = {};\n\n        if (this.connection) {\n            this.connection = null;\n        }\n\n        if (this.event) {\n            this.event = null;\n        }\n\n        if (this.feeder) {\n            this.feeder = null;\n        }\n\n        if (this.sender) {\n            this.sender = null;\n        }\n\n        if (this.workflow) {\n            this.workflow = null;\n        }\n    }\n\n    get status() {\n        return {\n            port: this.options.port,\n            baudrate: this.options.baudrate,\n            rtscts: this.options.rtscts,\n            sockets: Object.keys(this.sockets),\n            ready: this.ready,\n            controller: {\n                type: this.type,\n                settings: this.settings,\n                state: this.state\n            },\n            feeder: this.feeder.toJSON(),\n            sender: this.sender.toJSON(),\n            workflow: {\n                state: this.workflow.state\n            }\n        };\n    }\n\n    open(callback = noop) {\n        const { port, baudrate } = this.options;\n\n        // Assertion check\n        if (this.isOpen()) {\n            log.error(`Cannot open serial port \"${port}\"`);\n            return;\n        }\n\n        this.connection.on('data', this.connectionEventListener.data);\n        this.connection.on('close', this.connectionEventListener.close);\n        this.connection.on('error', this.connectionEventListener.error);\n\n        this.connection.open((err) => {\n            if (err) {\n                log.error(`Error opening serial port \"${port}\":`, err);\n                this.emit('serialport:error', { err: err, port: port });\n                callback(err); // notify error\n                return;\n            }\n\n            this.emit('serialport:open', {\n                port: port,\n                baudrate: baudrate,\n                controllerType: this.type,\n                inuse: true\n            });\n\n            // Emit a change event to all connected sockets\n            if (this.engine.io) {\n                this.engine.io.emit('serialport:change', {\n                    port: port,\n                    inuse: true\n                });\n            }\n\n            callback(); // register controller\n\n            log.debug(`Connected to serial port \"${port}\"`);\n\n            // M115: Get firmware version and capabilities\n            // The response to this will take us to the ready state\n            this.connection.write('M115\\n', {\n                source: WRITE_SOURCE_SERVER\n            });\n\n            this.workflow.stop();\n\n            if (this.sender.state.gcode) {\n                // Unload G-code\n                this.command('unload');\n            }\n        });\n    }\n\n    close(callback) {\n        const { port } = this.options;\n\n        // Assertion check\n        if (!this.connection) {\n            const err = `Serial port \"${port}\" is not available`;\n            callback(new Error(err));\n            return;\n        }\n\n        // Stop status query\n        this.ready = false;\n\n        // Clear initialized flag\n        this.initialized = false;\n\n        this.emit('serialport:close', {\n            port: port,\n            inuse: false\n        });\n\n        // Emit a change event to all connected sockets\n        if (this.engine.io) {\n            this.engine.io.emit('serialport:change', {\n                port: port,\n                inuse: false\n            });\n        }\n\n        if (this.isClose()) {\n            callback(null);\n            return;\n        }\n\n        this.connection.removeAllListeners();\n        this.connection.close(callback);\n    }\n\n    isOpen() {\n        return this.connection && this.connection.isOpen;\n    }\n\n    isClose() {\n        return !(this.isOpen());\n    }\n\n    loadFile(gcode, { name }) {\n        log.debug(`Loading file '${name}' to controller`);\n        this.command('gcode:load', name, gcode);\n    }\n\n    addConnection(socket) {\n        if (!socket) {\n            log.error('The socket parameter is not specified');\n            return;\n        }\n\n        log.debug(`Add socket connection: id=${socket.id}`);\n        this.sockets[socket.id] = socket;\n\n        //\n        // Send data to newly connected client\n        //\n        if (this.isOpen()) {\n            socket.emit('serialport:open', {\n                port: this.options.port,\n                baudrate: this.options.baudrate,\n                controllerType: this.type,\n                inuse: true\n            });\n        }\n        if (!_.isEmpty(this.settings)) {\n            // controller settings\n            socket.emit('controller:settings', MARLIN, this.settings);\n            socket.emit('Marlin:settings', this.settings); // Backward compatibility\n        }\n        if (!_.isEmpty(this.state)) {\n            // controller state\n            socket.emit('controller:state', MARLIN, this.state);\n            socket.emit('Marlin:state', this.state); // Backward compatibility\n        }\n        if (this.feeder) {\n            // feeder status\n            socket.emit('feeder:status', this.feeder.toJSON());\n        }\n        if (this.sender) {\n            // sender status\n            socket.emit('sender:status', this.sender.toJSON());\n\n            const { name, gcode, context } = this.sender.state;\n            if (gcode) {\n                socket.emit('gcode:load', name, gcode, context);\n            }\n            log.info('Emitting Sender');\n        }\n        if (this.workflow) {\n            // workflow state\n            socket.emit('workflow:state', this.workflow.state);\n        }\n    }\n\n    removeConnection(socket) {\n        if (!socket) {\n            log.error('The socket parameter is not specified');\n            return;\n        }\n\n        log.debug(`Remove socket connection: id=${socket.id}`);\n        this.sockets[socket.id] = undefined;\n        delete this.sockets[socket.id];\n    }\n\n    emit(eventName, ...args) {\n        Object.keys(this.sockets).forEach(id => {\n            const socket = this.sockets[id];\n            socket.emit.apply(socket, [eventName].concat(args));\n        });\n    }\n\n    command(cmd, ...args) {\n        const handler = {\n            'flash:start': () => {\n                // unsupported\n            },\n            'flashing:success': () => {\n                // unsupported\n            },\n            'flashing:failed': () => {\n                // unsupported\n            },\n            'firmware:recievedProfiles': () => {\n                // unsupported\n            },\n            'firmware:applyProfileSettings': () => {\n                // unsupported\n            },\n            'firmware:grabMachineProfile': () => {\n                // unsupported\n            },\n            'gcode:load': () => {\n                let [name, gcode, context = {}, callback = noop] = args;\n                if (typeof context === 'function') {\n                    callback = context;\n                    context = {};\n                }\n\n                // G4 P0 or P with a very small value will empty the planner queue and then\n                // respond with an ok when the dwell is complete. At that instant, there will\n                // be no queued motions, as long as no more commands were sent after the G4.\n                // This is the fastest way to do it without having to check the status reports.\n                const dwell = '%wait ; Wait for the planner to empty';\n                const ok = this.sender.load(name, gcode + '\\n' + dwell, context);\n                if (!ok) {\n                    callback(new Error(`Invalid G-code: name=${name}`));\n                    return;\n                }\n\n                //this.emit('gcode:load', name, gcode, context);\n                //this.event.trigger('gcode:load');\n\n                log.debug(`Load G-code: name=\"${this.sender.state.name}\", size=${this.sender.state.gcode.length}, total=${this.sender.state.total}`);\n\n                this.workflow.stop();\n\n                callback(null, this.sender.toJSON());\n            },\n            'gcode:unload': () => {\n                this.workflow.stop();\n                this.engine.unload();\n\n                // Sender\n                this.sender.unload();\n\n                this.emit('file:unload');\n                this.event.trigger('file:unload');\n            },\n            'start': () => {\n                log.warn(`Warning: The \"${cmd}\" command is deprecated and will be removed in a future release.`);\n                this.command('gcode:start');\n            },\n            'gcode:start': () => {\n                this.event.trigger('gcode:start');\n\n                this.workflow.start();\n\n                // Feeder\n                this.feeder.reset();\n\n                // Sender\n                this.sender.next();\n            },\n            'stop': () => {\n                log.warn(`Warning: The \"${cmd}\" command is deprecated and will be removed in a future release.`);\n                this.command('gcode:stop', ...args);\n            },\n            // @param {object} options The options object.\n            // @param {boolean} [options.force] Whether to force stop a G-code program. Defaults to false.\n            'gcode:stop': () => {\n                this.event.trigger('gcode:stop');\n\n                this.workflow.stop();\n            },\n            'pause': () => {\n                log.warn(`Warning: The \"${cmd}\" command is deprecated and will be removed in a future release.`);\n                this.command('gcode:pause');\n            },\n            'gcode:pause': () => {\n                this.event.trigger('gcode:pause');\n\n                this.workflow.pause();\n            },\n            'resume': () => {\n                log.warn(`Warning: The \"${cmd}\" command is deprecated and will be removed in a future release.`);\n                this.command('gcode:resume');\n            },\n            'gcode:resume': () => {\n                this.event.trigger('gcode:resume');\n\n                this.workflow.resume();\n            },\n            'feeder:feed': () => {\n                const [commands, context = {}] = args;\n                this.command('gcode', commands, context);\n            },\n            'feeder:start': () => {\n                if (this.workflow.state === WORKFLOW_STATE_RUNNING) {\n                    return;\n                }\n                this.feeder.unhold();\n                this.feeder.next();\n            },\n            'feeder:stop': () => {\n                this.feeder.reset();\n            },\n            'feedhold': () => {\n                this.event.trigger('feedhold');\n            },\n            'cyclestart': () => {\n                this.event.trigger('cyclestart');\n            },\n            'homing': () => {\n                this.event.trigger('homing');\n\n                this.writeln('G28.2 X Y Z');\n            },\n            'sleep': () => {\n                this.event.trigger('sleep');\n\n                // Unupported\n            },\n            'unlock': () => {\n                // Unsupported\n            },\n            'reset': () => {\n                this.workflow.stop();\n\n                this.feeder.reset();\n\n                // M112: Emergency Stop\n                this.writeln('M112');\n            },\n            // Feed Overrides\n            // @param {number} value A percentage value between 10 and 500. A value of zero will reset to 100%.\n            'feedOverride': () => {\n                const [value] = args;\n                let feedOverride = this.runner.state.ovF;\n\n                if (value === 0) {\n                    feedOverride = 100;\n                } else if ((feedOverride + value) > 500) {\n                    feedOverride = 500;\n                } else if ((feedOverride + value) < 10) {\n                    feedOverride = 10;\n                } else {\n                    feedOverride += value;\n                }\n                // M220: Set speed factor override percentage\n                this.command('gcode', 'M220 S' + feedOverride);\n\n                // enforce state change\n                this.runner.state = {\n                    ...this.runner.state,\n                    ovF: feedOverride\n                };\n            },\n            // Spindle Speed Overrides\n            // @param {number} value A percentage value between 10 and 500. A value of zero will reset to 100%.\n            'spindleOverride': () => {\n                const [value] = args;\n                let spindleOverride = this.runner.state.ovS;\n\n                if (value === 0) {\n                    spindleOverride = 100;\n                } else if ((spindleOverride + value) > 500) {\n                    spindleOverride = 500;\n                } else if ((spindleOverride + value) < 10) {\n                    spindleOverride = 10;\n                } else {\n                    spindleOverride += value;\n                }\n                // M221: Set extruder factor override percentage\n                this.command('gcode', 'M221 S' + spindleOverride);\n\n                // enforce state change\n                this.runner.state = {\n                    ...this.runner.state,\n                    ovS: spindleOverride\n                };\n            },\n            'rapidOverride': () => {\n                // Unsupported\n            },\n            'motor:enable': () => {\n                // M17 Enable all stepper motors\n                this.command('gcode', 'M17');\n            },\n            'motor:disable': () => {\n                // M18/M84 Disable steppers immediately (until the next move)\n                this.command('gcode', 'M18');\n            },\n            'laser:on': () => {\n                const [power = 0, maxS = 255] = args;\n                const commands = [\n                    'M3 S' + ensurePositiveNumber(maxS * (power / 100))\n                ];\n\n                this.command('gcode', commands);\n            },\n            'lasertest:on': () => {\n                const [power = 0, duration = 0, maxS = 255] = args;\n                const commands = [\n                    'M3 S' + ensurePositiveNumber(maxS * (power / 100))\n                ];\n                if (duration > 0) {\n                    // G4 [P<time in ms>] [S<time in sec>]\n                    // If both S and P are included, S takes precedence.\n                    commands.push('G4 P' + ensurePositiveNumber(duration));\n                    commands.push('M5');\n                }\n                this.command('gcode', commands);\n            },\n            'lasertest:off': () => {\n                this.writeln('M5');\n            },\n            'gcode': () => {\n                const [commands, context] = args;\n                const data = ensureArray(commands)\n                    .join('\\n')\n                    .split(/\\r?\\n/)\n                    .filter(line => {\n                        if (typeof line !== 'string') {\n                            return false;\n                        }\n\n                        return line.trim().length > 0;\n                    });\n\n                this.feeder.feed(data, context);\n\n                { // The following criteria must be met to trigger the feeder\n                    const notBusy = !(this.history.writeSource);\n                    const senderIdle = (this.sender.state.sent === this.sender.state.received);\n                    const feederIdle = !(this.feeder.isPending());\n\n                    if (notBusy && senderIdle && feederIdle) {\n                        this.feeder.next();\n                    }\n                }\n            },\n            'gcode:safe': () => {\n                const [commands, prefUnits] = args;\n                const deviceUnits = this.state.parserstate.modal.units;\n                let code = [];\n\n                if (!deviceUnits) {\n                    log.error('Unable to determine device unit modal');\n                    return;\n                }\n                // Force command in preferred units\n                if (prefUnits !== deviceUnits) {\n                    code.push(prefUnits);\n                }\n                code = code.concat(commands);\n                // return modal to previous state if they were different previously\n                if (prefUnits !== deviceUnits) {\n                    code = code.concat(deviceUnits);\n                }\n                this.command('gcode', code);\n            },\n            'jog:start': () => {\n                let [axes, feedrate = 1000, units = METRIC_UNITS] = args;\n                //const JOG_COMMAND_INTERVAL = 80;\n                let unitModal = (units === METRIC_UNITS) ? 'G21' : 'G20';\n                let { $20, $130, $131, $132, $23 } = this.settings.settings;\n\n                let jogFeedrate;\n                if ($20 === '1') {\n                    $130 = Number($130);\n                    $131 = Number($131);\n                    $132 = Number($132);\n\n                    // Convert feedrate to metric if working in imperial - easier to convert feedrate and treat everything else as MM than opposite\n                    if (units !== METRIC_UNITS) {\n                        feedrate = (feedrate * 25.4).toFixed(2);\n                        unitModal = 'G21';\n                    }\n\n                    const OFFSET = 0.1;\n                    const FIXED = 2;\n\n                    //If we are moving on the positive direction, we don't need to subtract\n                    //the max travel by it as we are moving towards the zero position, but if\n                    //we are moving in the negative direction we need to subtract the max travel\n                    //by it to reach the maximum amount in that direction\n                    const calculateAxisValue = ({ direction, position, maxTravel }) => {\n                        if (position === 0) {\n                            return ((maxTravel - OFFSET) * direction).toFixed(FIXED);\n                        }\n\n                        if (direction === 1) {\n                            return Number(((position * direction) - OFFSET).toFixed(FIXED));\n                        } else {\n                            return Number(-((maxTravel - position) - OFFSET).toFixed(FIXED));\n                        }\n                    };\n\n\n                    let { mpos } = this.state.status;\n                    Object.keys(mpos).forEach((axis) => {\n                        mpos[axis] = Number(mpos[axis]);\n                    });\n\n                    if (this.homingFlagSet) {\n                        const [xMaxLoc, yMaxLoc] = getAxisMaximumLocation($23);\n\n                        if (axes.X) {\n                            axes.X = determineMaxMovement(Math.abs(mpos.x), axes.X, xMaxLoc, $130);\n                        }\n                        if (axes.Y) {\n                            axes.Y = determineMaxMovement(Math.abs(mpos.y), axes.Y, yMaxLoc, $131);\n                        }\n                    } else {\n                        if (axes.X) {\n                            axes.X = calculateAxisValue({ direction: axes.X, position: Math.abs(mpos.x), maxTravel: $130 });\n                        }\n                        if (axes.Y) {\n                            axes.Y = calculateAxisValue({ direction: axes.Y, position: Math.abs(mpos.y), maxTravel: $131 });\n                        }\n                    }\n\n                    if (axes.Z) {\n                        axes.Z = calculateAxisValue({ direction: axes.Z, position: Math.abs(mpos.z), maxTravel: $132 });\n                    }\n                } else {\n                    jogFeedrate = 1000;\n                    Object.keys(axes).forEach((axis) => {\n                        axes[axis] *= jogFeedrate;\n                    });\n                }\n\n                axes.F = feedrate;\n                if (axes.Z) {\n                    axes.F *= 0.8;\n                    axes.F = axes.F.toFixed(3);\n                }\n\n                const jogCommand = `$J=${unitModal}G91 ` + map(axes, (value, letter) => ('' + letter.toUpperCase() + value)).join(' ');\n                this.command('gcode', jogCommand);\n            },\n            'jog:stop': () => {\n                this.feeder.reset();\n                this.command('jog:cancel');\n                this.feeder.reset();\n            },\n            'jog:cancel': () => {\n                this.command('gcode', '\\x85');\n            },\n\n            'macro:run': () => {\n                let [id, context = {}, callback = noop] = args;\n                if (typeof context === 'function') {\n                    callback = context;\n                    context = {};\n                }\n\n                const macros = config.get('macros');\n                const macro = _.find(macros, { id: id });\n\n                if (!macro) {\n                    log.error(`Cannot find the macro: id=${id}`);\n                    return;\n                }\n\n                this.event.trigger('macro:run');\n\n                this.command('gcode', macro.content, context);\n                callback(null);\n            },\n            'macro:load': () => {\n                let [id, context = {}, callback = noop] = args;\n                if (typeof context === 'function') {\n                    callback = context;\n                    context = {};\n                }\n\n                const macros = config.get('macros');\n                const macro = _.find(macros, { id: id });\n\n                if (!macro) {\n                    log.error(`Cannot find the macro: id=${id}`);\n                    return;\n                }\n\n                this.event.trigger('macro:load');\n\n                this.command('gcode:load', macro.name, macro.content, context, callback);\n            },\n            'watchdir:load': () => {\n                const [file, callback = noop] = args;\n                const context = {}; // empty context\n\n                monitor.readFile(file, (err, data) => {\n                    if (err) {\n                        callback(err);\n                        return;\n                    }\n\n                    this.command('gcode:load', file, data, context, callback);\n                });\n            },\n            'machineprofile:load': () => {\n                const [machineProfile] = args;\n\n                store.set('machineProfile', machineProfile);\n            },\n            'settings:updated': () => {\n                const [newSettings = {}] = args;\n\n                const currentSettings = store.get('preferences') || {};\n\n                const updated = {\n                    ...currentSettings,\n                    ...newSettings,\n                };\n\n                store.set('preferences', updated);\n            },\n            'toolchange:context': () => {\n                const [context] = args;\n                this.toolChangeContext = context;\n            },\n            'toolchange:pre': () => {\n            },\n            'toolchange:post': () => {\n            },\n            'gcode:outline': () => {\n                const [gcode = '', concavity = Infinity] = args;\n                const toRun = getOutlineGcode(gcode, concavity);\n                log.debug('Running outline');\n                this.emit('outline:start');\n                this.command('gcode', toRun);\n            }\n        }[cmd];\n\n        if (!handler) {\n            log.error(`Unknown command: ${cmd}`);\n            return;\n        }\n\n        handler();\n    }\n\n    write(data, context) {\n        // Assertion check\n        if (this.isClose()) {\n            log.error(`Serial port \"${this.options.port}\" is not accessible`);\n            return;\n        }\n\n        this.emit('serialport:write', data, {\n            ...context,\n            source: WRITE_SOURCE_CLIENT\n        });\n        this.connection.write(data, {\n            source: WRITE_SOURCE_CLIENT\n        });\n        log.silly(`> ${data}`);\n    }\n\n    writeln(data, context) {\n        this.write(data + '\\n', context);\n    }\n}\n\nexport default MarlinController;\n","\nimport GrblController from './Grbl/GrblController';\nimport MarlinController from './Marlin/MarlinController';\n\nexport { GrblController, MarlinController };\n","\nimport ensureArray from 'ensure-array';\nimport noop from 'lodash/noop';\n// import partition from 'lodash/partition';\nimport SerialPort from 'serialport';\nimport socketIO from 'socket.io';\n//import socketioJwt from 'socketio-jwt';\nimport EventTrigger from '../../lib/EventTrigger';\nimport logger from '../../lib/logger';\n//import settings from '../../config/settings';\nimport store from '../../store';\nimport config from '../configstore';\nimport taskRunner from '../taskrunner';\nimport {\n    GrblController,\n    MarlinController\n} from '../../controllers';\nimport { GRBL } from '../../controllers/Grbl/constants';\nimport { MARLIN } from '../../controllers/Marlin/constants';\nimport {\n    authorizeIPAddress,\n    //validateUser\n} from '../../access-control';\n\nconst log = logger('service:cncengine');\n\n// Case-insensitive equality checker.\n// @param {string} str1 First string to check.\n// @param {string} str2 Second string to check.\n// @return {boolean} True if str1 and str2 are the same string, ignoring case.\nconst caseInsensitiveEquals = (str1, str2) => {\n    str1 = str1 ? (str1 + '').toUpperCase() : '';\n    str2 = str2 ? (str2 + '').toUpperCase() : '';\n    return str1 === str2;\n};\n\nconst isValidController = (controller) => (\n    // Grbl\n    caseInsensitiveEquals(GRBL, controller) ||\n    // Marlin\n    caseInsensitiveEquals(MARLIN, controller)\n);\n\nclass CNCEngine {\n    controllerClass = {};\n\n    listener = {\n        taskStart: (...args) => {\n            if (this.io) {\n                this.io.emit('task:start', ...args);\n            }\n        },\n        taskFinish: (...args) => {\n            if (this.io) {\n                this.io.emit('task:finish', ...args);\n            }\n        },\n        taskError: (...args) => {\n            if (this.io) {\n                this.io.emit('task:error', ...args);\n            }\n        },\n        configChange: (...args) => {\n            if (this.io) {\n                this.io.emit('config:change', ...args);\n            }\n        }\n    };\n\n    server = null;\n\n    io = null;\n\n    sockets = [];\n\n    // File content and metadata\n    gcode = null;\n    meta = null;\n\n    // Event Trigger\n    event = new EventTrigger((event, trigger, commands) => {\n        log.debug(`EventTrigger: event=\"${event}\", trigger=\"${trigger}\", commands=\"${commands}\"`);\n        if (trigger === 'system') {\n            taskRunner.run(commands);\n        }\n    });\n\n    // @param {object} server The HTTP server instance.\n    // @param {string} controller Specify CNC controller.\n    start(server, controller = '') {\n        // Fallback to an empty string if the controller is not valid\n        if (!isValidController(controller)) {\n            controller = '';\n        }\n\n        // Marlin\n        if (!controller || caseInsensitiveEquals(MARLIN, controller)) {\n            this.controllerClass[MARLIN] = MarlinController;\n        }\n        // Grbl\n        if (caseInsensitiveEquals(GRBL, controller)) {\n            this.controllerClass[GRBL] = GrblController;\n        }\n\n        if (Object.keys(this.controllerClass).length === 0) {\n            throw new Error(`No valid CNC controller specified (${controller})`);\n        }\n\n        const loadedControllers = Object.keys(this.controllerClass);\n        log.debug(`Loaded controllers: ${loadedControllers}`);\n\n        this.stop();\n\n        taskRunner.on('start', this.listener.taskStart);\n        taskRunner.on('finish', this.listener.taskFinish);\n        taskRunner.on('error', this.listener.taskError);\n        config.on('change', this.listener.configChange);\n\n        // System Trigger: Startup\n        this.event.trigger('startup');\n\n        this.server = server;\n        this.io = socketIO(this.server, {\n            serveClient: true,\n            path: '/socket.io',\n            pingTimeout: 60000,\n            pingInterval: 25000,\n            maxHttpBufferSize: 40e6\n        });\n\n        this.io.use(async (socket, next) => {\n            try {\n                // IP Address Access Control\n                const ipaddr = socket.handshake.address;\n                await authorizeIPAddress(ipaddr);\n\n                // User Validation\n                //const user = socket.decoded_token || {};\n                //await validateUser(user);\n            } catch (err) {\n                log.warn(err);\n                next(err);\n                return;\n            }\n\n            next();\n        });\n\n        this.io.on('connection', (socket) => {\n            const address = socket.handshake.address;\n            const user = socket.decoded_token || {};\n            log.debug(`New connection from ${address}: id=${socket.id}, user.id=${user.id}, user.name=${user.name}`);\n\n            // Add to the socket pool\n            this.sockets.push(socket);\n\n            socket.emit('startup', {\n                loadedControllers: Object.keys(this.controllerClass),\n\n                // User-defined baud rates and ports\n                baudrates: ensureArray(config.get('baudrates', [])),\n                ports: ensureArray(config.get('ports', []))\n            });\n            socket.on('disconnect', () => {\n                log.debug(`Disconnected from ${address}: id=${socket.id}, user.id=${user.id}, user.name=${user.name}`);\n\n                const controllers = store.get('controllers', {});\n                Object.keys(controllers).forEach(port => {\n                    const controller = controllers[port];\n                    if (!controller) {\n                        return;\n                    }\n                    controller.removeConnection(socket);\n                });\n\n                // Remove from socket pool\n                this.sockets.splice(this.sockets.indexOf(socket), 1);\n            });\n\n            socket.on('reconnect', (port) => {\n                let controller = store.get(`controllers[\"${port}\"]`);\n                if (!controller) {\n                    log.info(`No controller found on port ${port} to reconnect to`);\n                    return;\n                }\n                log.info(`Reconnecting to open controller on port ${port} with socket ID ${socket.id}`);\n                controller.addConnection(socket);\n                log.info(`Controller state: ${controller.isOpen()}`);\n                if (controller.isOpen()) {\n                    log.info('Joining port room on socket');\n                    socket.join(port);\n                } else {\n                    log.info('Controller no longer open');\n                }\n            });\n\n            // List the available serial ports\n            socket.on('list', () => {\n                log.debug(`socket.list(): id=${socket.id}`);\n\n                SerialPort.list()\n                    .then(ports => {\n                        ports = ports.concat(ensureArray(config.get('ports', [])));\n\n                        const controllers = store.get('controllers', {});\n                        const portsInUse = Object.keys(controllers)\n                            .filter(port => {\n                                const controller = controllers[port];\n                                return controller && controller.isOpen();\n                            });\n\n                        ports = ports.map(port => {\n                            return {\n                                port: port.path,\n                                manufacturer: port.manufacturer,\n                                inuse: portsInUse.indexOf(port.path) >= 0\n                            };\n                        });\n\n                        socket.emit('serialport:list', ports);\n                    })\n                    .catch(err => {\n                        log.error(err);\n                    });\n            });\n\n            // Open serial port\n            socket.on('open', (port, options, callback = noop) => {\n                if (typeof callback !== 'function') {\n                    callback = noop;\n                }\n\n                log.debug(`socket.open(\"${port}\", ${JSON.stringify(options)}): id=${socket.id}`);\n\n                let controller = store.get(`controllers[\"${port}\"]`);\n                if (!controller) {\n                    let { controllerType = MARLIN, baudrate, rtscts } = { ...options };\n\n                    const Controller = this.controllerClass[controllerType];\n                    if (!Controller) {\n                        const err = `Not supported controller: ${controllerType}`;\n                        log.error(err);\n                        callback(new Error(err));\n                        return;\n                    }\n\n                    const engine = this;\n                    controller = new Controller(engine, {\n                        port: port,\n                        baudrate: baudrate,\n                        rtscts: !!rtscts\n                    });\n                }\n\n                controller.addConnection(socket);\n                // Load file to controller if it exists\n                if (this.hasFileLoaded()) {\n                    controller.loadFile(this.gcode, this.meta);\n                } else {\n                    log.debug('No file in CNCEngine to load to sender');\n                }\n\n                if (controller.isOpen()) {\n                    // Join the room\n                    socket.join(port);\n\n                    callback(null);\n                    return;\n                }\n\n                controller.open((err = null) => {\n                    if (err) {\n                        callback(err);\n                        return;\n                    }\n\n                    // System Trigger: Open a serial port\n                    this.event.trigger('port:open');\n\n                    if (store.get(`controllers[\"${port}\"]`)) {\n                        log.error(`Serial port \"${port}\" was not properly closed`);\n                    }\n                    store.set(`controllers[${JSON.stringify(port)}]`, controller);\n\n                    // Join the room\n                    socket.join(port);\n\n                    callback(null);\n                });\n            });\n\n            // Close serial port\n            socket.on('close', (port, callback = noop) => {\n                if (typeof callback !== 'function') {\n                    callback = noop;\n                }\n\n                log.debug(`socket.close(\"${port}\"): id=${socket.id}`);\n\n                const controller = store.get(`controllers[\"${port}\"]`);\n                if (!controller) {\n                    const err = `Serial port \"${port}\" not accessible`;\n                    log.error(err);\n                    callback(new Error(err));\n                    return;\n                }\n\n                // System Trigger: Close a serial port\n                this.event.trigger('port:close');\n\n                // Leave the room\n                socket.leave(port);\n\n                controller.close(err => {\n                    // Remove controller from store\n                    store.unset(`controllers[${JSON.stringify(port)}]`);\n\n                    // Destroy controller\n                    controller.destroy();\n\n                    callback(null);\n                });\n            });\n\n            socket.on('command', (port, cmd, ...args) => {\n                log.debug(`socket.command(\"${port}\", \"${cmd}\"): id=${socket.id}`);\n\n                const controller = store.get(`controllers[\"${port}\"]`);\n                if (!controller || controller.isClose()) {\n                    log.error(`Serial port \"${port}\" not accessible`);\n                    return;\n                }\n\n                controller.command.apply(controller, [cmd].concat(args));\n            });\n\n            socket.on('write', (port, data, context = {}) => {\n                log.debug(`socket.write(\"${port}\", \"${data}\", ${JSON.stringify(context)}): id=${socket.id}`);\n\n                const controller = store.get(`controllers[\"${port}\"]`);\n                if (!controller || controller.isClose()) {\n                    log.error(`Serial port \"${port}\" not accessible`);\n                    return;\n                }\n\n                controller.write(data, context);\n            });\n\n            socket.on('writeln', (port, data, context = {}) => {\n                log.debug(`socket.writeln(\"${port}\", \"${data}\", ${JSON.stringify(context)}): id=${socket.id}`);\n\n                const controller = store.get(`controllers[\"${port}\"]`);\n                if (!controller || controller.isClose()) {\n                    log.error(`Serial port \"${port}\" not accessible`);\n                    return;\n                }\n\n                controller.writeln(data, context);\n            });\n\n            socket.on('hPing', () => {\n                log.debug(`Health check received at ${new Date().toLocaleTimeString()}`);\n                socket.emit('hPong');\n            });\n\n            socket.on('file:fetch', () => {\n                socket.emit('file:fetch', this.gcode, this.meta);\n            });\n\n            socket.on('file:unload', () => {\n                log.debug('Socket unload called');\n                this.unload();\n            });\n        });\n    }\n\n    stop() {\n        if (this.io) {\n            this.io.close();\n            this.io = null;\n        }\n        this.sockets = [];\n        this.server = null;\n\n        taskRunner.removeListener('start', this.listener.taskStart);\n        taskRunner.removeListener('finish', this.listener.taskFinish);\n        taskRunner.removeListener('error', this.listener.taskError);\n        config.removeListener('change', this.listener.configChange);\n    }\n\n    // Emit message across all sockets\n    emit(msg, ...args) {\n        this.sockets.forEach((socket) => {\n            socket.emit(msg, ...args);\n        });\n    }\n\n    /* Functions related to loading file through server */\n    // If gcode is going to live in CNCengine, we need functions to access or unload it.\n    load({ port, gcode, ...meta }) {\n        this.gcode = gcode;\n        this.meta = meta;\n\n        // Load the file to the sender if controller connection exists\n        if (port) {\n            const controller = store.get(`controllers[\"${port}\"]`);\n            if (controller) {\n                controller.loadFile(this.gcode, this.meta);\n            }\n        }\n\n        log.info(`Loaded file '${meta.name}' to CNCEngine`);\n        this.emit('file:load', gcode, meta.size, meta.name, meta.visualizer);\n    }\n\n    unload() {\n        log.info('Unloading file from CNCEngine');\n        this.gcode = null;\n        this.meta = null;\n        this.emit('file:unload');\n    }\n\n    fetchGcode() {\n        return [this.gcode, this.meta];\n    }\n\n    hasFileLoaded() {\n        return this.gcode !== null;\n    }\n}\n\nexport default CNCEngine;\n","\nimport CNCEngine from './CNCEngine';\n\nconst cncengine = new CNCEngine();\n\nconst start = (server, controller) => {\n    cncengine.start(server, controller);\n};\n\nconst stop = () => {\n    cncengine.stop();\n};\n\nconst load = (gcode) => {\n    cncengine.load(gcode);\n};\n\nconst unload = () => {\n    cncengine.unload();\n};\n\nexport default {\n    start,\n    stop,\n    load,\n    unload\n};\n","\nimport path from 'path';\nimport pkg from '../../package.json';\nimport { languages } from '../../../build.config';\n\nconst RC_FILE = '.cnc_rc';\nconst SESSION_PATH = '.cncjs-sessions';\n\n// Secret\nconst secret = pkg.version;\n\nconst getUserHome = () => (process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME']);\n\nexport default {\n    rcfile: path.resolve(getUserHome(), RC_FILE),\n    verbosity: 0,\n    version: pkg.version,\n\n    // The secret key is loaded from the config file (defaults to \"~/.cncrc\")\n    // @see \"src/app/index.js\"\n    secret: secret,\n\n    // Access Token Lifetime\n    accessTokenLifetime: '30d', // https://github.com/zeit/ms\n\n    // Allow Remote Access\n    allowRemoteAccess: false,\n\n    // Express view engine\n    view: {\n        // Set html (w/o dot) as the default extension\n        defaultExtension: 'html',\n\n        // Format: <extension>: <template>\n        engines: [\n            { // Hogan template with .html extension\n                extension: 'html',\n                template: 'hogan'\n            },\n            { // Hogan template with .hbs extension\n                extension: 'hbs',\n                template: 'hogan'\n            },\n            { // Hogan template with .hogan extension\n                extension: 'hogan',\n                template: 'hogan'\n            }\n        ]\n    },\n    // Middleware (https://github.com/senchalabs/connect)\n    middleware: {\n        // https://github.com/expressjs/body-parser\n        'body-parser': {\n            'json': {\n                // maximum request body size. (default: <100kb>)\n                limit: '256mb'\n            },\n            'urlencoded': {\n                extended: true,\n                // maximum request body size. (default: <100kb>)\n                limit: '256mb'\n            }\n        },\n        // https://github.com/mscdex/connect-busboy\n        'busboy': {\n            limits: {\n                fileSize: 256 * 1024 * 1024 // 256MB\n            },\n            // immediate\n            //   false: no immediate parsing\n            //   true: immediately start reading from the request stream and parsing\n            immediate: false\n        },\n        // https://github.com/andrewrk/node-multiparty/\n        'multiparty': {\n            // Limits the amount of memory a field (not a file) can allocate in bytes. If this value is exceeded, an error event is emitted. The default size is 2MB.\n            maxFieldsSize: 50 * 1024 * 1024, // 50MB\n\n            // Limits the number of fields that will be parsed before emitting an error event. A file counts as a field in this case. Defaults to 1000.\n            maxFields: 1000\n        },\n        // https://github.com/expressjs/morgan\n        'morgan': {\n            // The ':id' token is defined at app.js\n            format: ':id \\x1b[1m:method\\x1b[0m \\x1b[33m:url\\x1b[0m \\x1b[34m:status\\x1b[0m :response-time ms'\n        },\n        // https://github.com/expressjs/compression\n        'compression': {\n            // response is only compressed if the byte size is at or above this threshold.\n            threshold: 512\n        },\n        // https://github.com/expressjs/session\n        'session': {\n            path: path.resolve(getUserHome(), SESSION_PATH)\n        }\n    },\n    siofu: { // SocketIOFileUploader\n        dir: './tmp/siofu'\n    },\n    i18next: {\n        lowerCaseLng: true,\n\n        // logs out more info (console)\n        debug: false,\n\n        // language to lookup key if not found on set language\n        fallbackLng: 'en',\n\n        // string or array of namespaces\n        ns: [\n            'config',\n            'resource' // default\n        ],\n\n        // default namespace used if not passed to translation function\n        defaultNS: 'resource',\n\n        whitelist: languages,\n\n        // array of languages to preload\n        preload: [],\n\n        // language codes to lookup, given set language is 'en-US':\n        // 'all' --> ['en-US', 'en', 'dev']\n        // 'currentOnly' --> 'en-US'\n        // 'languageOnly' --> 'en'\n        load: 'currentOnly',\n\n        // char to separate keys\n        keySeparator: '.',\n\n        // char to split namespace from key\n        nsSeparator: ':',\n\n        interpolation: {\n            prefix: '{{',\n            suffix: '}}'\n        },\n\n        detection: {\n            // order and from where user language should be detected\n            order: ['session', 'querystring', 'cookie', 'header'],\n\n            // keys or params to lookup language from\n            lookupQuerystring: 'lang',\n            lookupCookie: 'lang',\n            lookupSession: 'lang',\n\n            // cache user language\n            caches: ['cookie']\n        },\n\n        backend: {\n            // path where resources get loaded from\n            loadPath: path.resolve(__dirname, '..', 'i18n', '{{lng}}', '{{ns}}.json'),\n\n            // path to post missing resources\n            addPath: path.resolve(__dirname, '..', 'i18n', '{{lng}}', '{{ns}}.savedMissing.json'),\n\n            // jsonIndent to use when storing json files\n            jsonIndent: 4\n        }\n    }\n};\n","module.exports = require(\"body-parser\");","module.exports = require(\"multer\");","module.exports = require(\"express-session\");","module.exports = require(\"i18next\");","module.exports = require(\"morgan\");","module.exports = require(\"i18next-express-middleware\");","module.exports = require(\"util\");","module.exports = require(\"lodash/without\");","module.exports = require(\"lodash/each\");","module.exports = require(\"dns\");","module.exports = require(\"expand-tilde\");","module.exports = require(\"http-proxy\");","module.exports = require(\"lodash/escapeRegExp\");","module.exports = require(\"lodash/size\");","module.exports = require(\"lodash/trimEnd\");","module.exports = require(\"lodash/uniqWith\");","module.exports = require(\"webappengine\");","module.exports = {\n    languages: [\n        'en', // English (default)\n    ],\n    analytics: {\n        trackingId: 'UA-107017110-1'\n    }\n};\n","\nimport os from 'os';\nimport path from 'path';\n\nconst maxAge = 0;\n\nexport default {\n    route: '/', // with trailing slash\n    assets: {\n        app: {\n            routes: [\n                '' // empty path\n            ],\n            path: path.resolve(__dirname, '..', '..', 'app'),\n            maxAge: maxAge\n        }\n    },\n    backend: {\n        enable: true,\n        host: 'localhost',\n        port: 80,\n        route: 'api/'\n    },\n    cluster: {\n        // note. node-inspector cannot debug child (forked) process\n        enable: false,\n        maxWorkers: os.cpus().length || 1\n    },\n    winston: {\n        // https://github.com/winstonjs/winston#logging-levels\n        level: 'debug'\n    }\n};\n","\nimport os from 'os';\nimport path from 'path';\nimport urljoin from '../lib/urljoin';\n\nconst publicPath = global.PUBLIC_PATH || ''; // see gulp/task/app.js\nconst maxAge = (365 * 24 * 60 * 60 * 1000); // one year\n\nexport default {\n    route: '/', // with trailing slash\n    assets: {\n        app: {\n            routes: [ // with trailing slash\n                urljoin(publicPath, '/'),\n                '/' // fallback\n            ],\n            path: path.resolve(__dirname, '..', '..', 'app'),\n            maxAge: maxAge\n        }\n    },\n    backend: {\n        enable: false, // disable backend service in production\n        host: 'localhost',\n        port: 80,\n        route: 'api/'\n    },\n    cluster: {\n        // note. node-inspector cannot debug child (forked) process\n        enable: false,\n        maxWorkers: os.cpus().length || 1\n    },\n    winston: {\n        // https://github.com/winstonjs/winston#logging-levels\n        level: 'info'\n    }\n};\n","\n/* eslint callback-return: 0 */\nimport fs from 'fs';\nimport path from 'path';\nimport bodyParser from 'body-parser';\nimport compress from 'compression';\nimport cookieParser from 'cookie-parser';\nimport multer from 'multer';\n//import multiparty from 'connect-multiparty';\nimport connectRestreamer from 'connect-restreamer';\nimport engines from 'consolidate';\nimport errorhandler from 'errorhandler';\nimport express from 'express';\nimport expressJwt from 'express-jwt';\nimport session from 'express-session';\nimport 'hogan.js'; // required by consolidate\nimport i18next from 'i18next';\nimport i18nextBackend from 'i18next-node-fs-backend';\nimport jwt from 'jsonwebtoken';\nimport methodOverride from 'method-override';\nimport morgan from 'morgan';\nimport favicon from 'serve-favicon';\nimport serveStatic from 'serve-static';\nimport sessionFileStore from 'session-file-store';\nimport _get from 'lodash/get';\nimport _noop from 'lodash/noop';\nimport rimraf from 'rimraf';\nimport {\n    LanguageDetector as i18nextLanguageDetector,\n    handle as i18nextHandle\n} from 'i18next-express-middleware';\nimport urljoin from './lib/urljoin';\nimport logger from './lib/logger';\nimport settings from './config/settings';\nimport * as api from './api';\nimport errclient from './lib/middleware/errclient';\nimport errlog from './lib/middleware/errlog';\nimport errnotfound from './lib/middleware/errnotfound';\nimport errserver from './lib/middleware/errserver';\nimport config from './services/configstore';\nimport {\n    authorizeIPAddress,\n    validateUser\n} from './access-control';\nimport {\n    ERR_FORBIDDEN\n} from './constants';\n\nconst log = logger('app');\n\nconst renderPage = (view = 'index', cb = _noop) => (req, res, next) => {\n    // Override IE's Compatibility View Settings\n    // http://stackoverflow.com/questions/6156639/x-ua-compatible-is-set-to-ie-edge-but-it-still-doesnt-stop-compatibility-mode\n    res.set({ 'X-UA-Compatible': 'IE=edge' });\n\n    const locals = { ...cb(req, res) };\n    res.render(view, locals);\n};\n\nconst appMain = () => {\n    const app = express();\n\n    { // Settings\n        if (process.env.NODE_ENV === 'development') {\n            const webpackDevServer = require('./webpack-dev-server').default;\n            webpackDevServer(app);\n\n            // Error handler - https://github.com/expressjs/errorhandler\n            // Development error handler, providing stack traces and error message responses\n            // for requests accepting text, html, or json.\n            app.use(errorhandler());\n\n            // a custom \"verbose errors\" setting which can be used in the templates via settings['verbose errors']\n            app.enable('verbose errors'); // Enables verbose errors in development\n            app.disable('view cache'); // Disables view template compilation caching in development\n        } else {\n            // a custom \"verbose errors\" setting which can be used in the templates via settings['verbose errors']\n            app.disable('verbose errors'); // Disables verbose errors in production\n            app.enable('view cache'); // Enables view template compilation caching in production\n        }\n\n        app.enable('trust proxy'); // Enables reverse proxy support, disabled by default\n        app.enable('case sensitive routing'); // Enable case sensitivity, disabled by default, treating \"/Foo\" and \"/foo\" as the same\n        app.disable('strict routing'); // Enable strict routing, by default \"/foo\" and \"/foo/\" are treated the same by the router\n        app.disable('x-powered-by'); // Enables the X-Powered-By: Express HTTP header, enabled by default\n\n        for (let i = 0; i < settings.view.engines.length; ++i) {\n            const extension = settings.view.engines[i].extension;\n            const template = settings.view.engines[i].template;\n            app.engine(extension, engines[template]);\n        }\n        app.set('view engine', settings.view.defaultExtension); // The default engine extension to use when omitted\n        app.set('views', [\n            path.resolve(__dirname, '../app'),\n            path.resolve(__dirname, 'views')\n        ]); // The view directory path\n\n        log.debug('app.settings: %j', app.settings);\n    }\n\n    // Setup i18n (i18next)\n    i18next\n        .use(i18nextBackend)\n        .use(i18nextLanguageDetector)\n        .init(settings.i18next);\n\n    app.use(async (req, res, next) => {\n        try {\n            // IP Address Access Control\n            const ipaddr = req.ip || req.connection.remoteAddress;\n            await authorizeIPAddress(ipaddr);\n        } catch (err) {\n            log.warn(err);\n            res.status(ERR_FORBIDDEN).end('Forbidden Access');\n            return;\n        }\n\n        next();\n    });\n\n    // Removes the 'X-Powered-By' header in earlier versions of Express\n    app.use((req, res, next) => {\n        res.removeHeader('X-Powered-By');\n        next();\n    });\n\n    // Middleware\n    // https://github.com/senchalabs/connect\n\n    try {\n        // https://github.com/valery-barysok/session-file-store\n        const path = settings.middleware.session.path; // Defaults to './sienci-sessions'\n\n        rimraf.sync(path);\n        fs.mkdirSync(path);\n\n        const FileStore = sessionFileStore(session);\n        app.use(session({\n            // https://github.com/expressjs/session#secret\n            secret: settings.secret,\n\n            // https://github.com/expressjs/session#resave\n            resave: true,\n\n            // https://github.com/expressjs/session#saveuninitialized\n            saveUninitialized: true,\n\n            store: new FileStore({\n                path: path,\n                logFn: (...args) => {\n                    log.debug.apply(log, args);\n                }\n            })\n        }));\n    } catch (err) {\n        log.error(err);\n    }\n\n    app.use(favicon(path.join(_get(settings, 'assets.app.path', ''), 'favicon.ico')));\n    app.use(cookieParser());\n\n    // Connect's body parsing middleware. This only handles urlencoded and json bodies.\n    // https://github.com/expressjs/body-parser\n    app.use(bodyParser.json(settings.middleware['body-parser'].json));\n    app.use(bodyParser.urlencoded(settings.middleware['body-parser'].urlencoded));\n\n    // For multipart bodies, please use the following modules:\n    // - [busboy](https://github.com/mscdex/busboy) and [connect-busboy](https://github.com/mscdex/connect-busboy)\n    // - [multiparty](https://github.com/andrewrk/node-multiparty) and [connect-multiparty](https://github.com/andrewrk/connect-multiparty)\n    //app.use(multiparty(settings.middleware.multiparty));\n\n    // https://github.com/dominictarr/connect-restreamer\n    // connect's bodyParser has a problem when using it with a proxy.\n    // It gobbles up all the body events, so that the proxy doesn't see anything!\n    app.use(connectRestreamer());\n\n    // https://github.com/expressjs/method-override\n    app.use(methodOverride());\n    if (settings.verbosity > 0) {\n        // https://github.com/expressjs/morgan#use-custom-token-formats\n        // Add an ID to all requests and displays it using the :id token\n        morgan.token('id', (req, res) => {\n            return req.session.id;\n        });\n        app.use(morgan(settings.middleware.morgan.format));\n    }\n    app.use(compress(settings.middleware.compression));\n\n    Object.keys(settings.assets).forEach((name) => {\n        const asset = settings.assets[name];\n\n        log.debug('assets: name=%s, asset=%s', name, JSON.stringify(asset));\n        if (!(asset.path)) {\n            log.error('asset path is not defined');\n            return;\n        }\n\n        asset.routes.forEach((assetRoute) => {\n            const route = urljoin(settings.route || '/', assetRoute || '');\n            log.debug('> route=%s', name, route);\n            app.use(route, serveStatic(asset.path, {\n                maxAge: asset.maxAge\n            }));\n        });\n    });\n\n    app.use(i18nextHandle(i18next, {}));\n\n    { // Secure API Access\n        app.use(urljoin(settings.route, 'api'), expressJwt({\n            secret: config.get('secret'),\n            credentialsRequired: true\n        }));\n\n        app.use(async (err, req, res, next) => {\n            let bypass = !(err && (err.name === 'UnauthorizedError'));\n\n            // Check whether the app is running in development mode\n            bypass = bypass || (process.env.NODE_ENV === 'development');\n\n            // Check whether the request path is not restricted\n            const whitelist = [\n                // Also see \"src/app/api/index.js\"\n                urljoin(settings.route, 'api/signin')\n            ];\n            bypass = bypass || whitelist.some(path => {\n                return req.path.indexOf(path) === 0;\n            });\n\n            if (!bypass) {\n                // Check whether the provided credential is correct\n                const token = _get(req, 'query.token') || _get(req, 'body.token');\n                try {\n                    // User Validation\n                    const user = jwt.verify(token, settings.secret) || {};\n                    await validateUser(user);\n                    bypass = true;\n                } catch (err) {\n                    log.warn(err);\n                }\n            }\n\n            if (!bypass) {\n                const ipaddr = req.ip || req.connection.remoteAddress;\n                log.warn(`Forbidden: ipaddr=${ipaddr}, code=\"${err.code}\", message=\"${err.message}\"`);\n                res.status(ERR_FORBIDDEN).end('Forbidden Access');\n                return;\n            }\n\n            next();\n        });\n    }\n\n    { // Register API routes with public access\n        // Also see \"src/app/app.js\"\n        app.post(urljoin(settings.route, 'api/signin'), api.users.signin);\n    }\n\n    { // Register API routes with authorized access\n        // Version\n        app.get(urljoin(settings.route, 'api/version/latest'), api.version.getLatestVersion);\n\n        // State\n        app.get(urljoin(settings.route, 'api/state'), api.state.get);\n        app.post(urljoin(settings.route, 'api/state'), api.state.set);\n        app.delete(urljoin(settings.route, 'api/state'), api.state.unset);\n\n        // G-code\n        app.get(urljoin(settings.route, 'api/gcode'), api.gcode.fetch);\n        app.post(urljoin(settings.route, 'api/gcode'), api.gcode.upload);\n        app.get(urljoin(settings.route, 'api/gcode/download'), api.gcode.download);\n        app.post(urljoin(settings.route, 'api/gcode/download'), api.gcode.download); // Alias\n\n        // Controllers\n        app.get(urljoin(settings.route, 'api/controllers'), api.controllers.get);\n\n        // Commands\n        app.get(urljoin(settings.route, 'api/commands'), api.commands.fetch);\n        app.post(urljoin(settings.route, 'api/commands'), api.commands.create);\n        app.get(urljoin(settings.route, 'api/commands/:id'), api.commands.read);\n        app.put(urljoin(settings.route, 'api/commands/:id'), api.commands.update);\n        app.delete(urljoin(settings.route, 'api/commands/:id'), api.commands.__delete);\n        app.post(urljoin(settings.route, 'api/commands/run/:id'), api.commands.run);\n\n        // Events\n        app.get(urljoin(settings.route, 'api/events'), api.events.fetch);\n        app.post(urljoin(settings.route, 'api/events/'), api.events.create);\n        app.get(urljoin(settings.route, 'api/events/:id'), api.events.read);\n        app.put(urljoin(settings.route, 'api/events/:id'), api.events.update);\n        app.delete(urljoin(settings.route, 'api/events/:id'), api.events.__delete);\n\n        // Machines\n        app.get(urljoin(settings.route, 'api/machines'), api.machines.fetch);\n        app.post(urljoin(settings.route, 'api/machines'), api.machines.create);\n        app.get(urljoin(settings.route, 'api/machines/:id'), api.machines.read);\n        app.put(urljoin(settings.route, 'api/machines/:id'), api.machines.update);\n        app.delete(urljoin(settings.route, 'api/machines/:id'), api.machines.__delete);\n\n        // Macros\n        app.get(urljoin(settings.route, 'api/macros'), api.macros.fetch);\n        app.post(urljoin(settings.route, 'api/macros'), api.macros.create);\n        app.get(urljoin(settings.route, 'api/macros/:id'), api.macros.read);\n        app.put(urljoin(settings.route, 'api/macros/:id'), api.macros.update);\n        app.delete(urljoin(settings.route, 'api/macros/:id'), api.macros.__delete);\n\n        // MDI\n        app.get(urljoin(settings.route, 'api/mdi'), api.mdi.fetch);\n        app.post(urljoin(settings.route, 'api/mdi'), api.mdi.create);\n        app.put(urljoin(settings.route, 'api/mdi'), api.mdi.bulkUpdate);\n        app.get(urljoin(settings.route, 'api/mdi/:id'), api.mdi.read);\n        app.put(urljoin(settings.route, 'api/mdi/:id'), api.mdi.update);\n        app.delete(urljoin(settings.route, 'api/mdi/:id'), api.mdi.__delete);\n\n        // Users\n        app.get(urljoin(settings.route, 'api/users'), api.users.fetch);\n        app.post(urljoin(settings.route, 'api/users/'), api.users.create);\n        app.get(urljoin(settings.route, 'api/users/:id'), api.users.read);\n        app.put(urljoin(settings.route, 'api/users/:id'), api.users.update);\n        app.delete(urljoin(settings.route, 'api/users/:id'), api.users.__delete);\n\n        // Watch\n        app.get(urljoin(settings.route, 'api/watch/files'), api.watch.getFiles);\n        app.post(urljoin(settings.route, 'api/watch/files'), api.watch.getFiles);\n        app.get(urljoin(settings.route, 'api/watch/file'), api.watch.readFile);\n        app.post(urljoin(settings.route, 'api/watch/file'), api.watch.readFile);\n\n        // Files - with multer\n        const storage = multer.memoryStorage();\n        const upload = multer({\n            storage\n        });\n        app.post(urljoin(settings.route, 'api/file'), upload.single('gcode'), api.files.uploadFile);\n    }\n\n    // page\n    app.get(urljoin(settings.route, '/'), renderPage('index.hbs', (req, res) => {\n        const webroot = _get(settings, 'assets.app.routes[0]', ''); // with trailing slash\n        const lng = req.language;\n        const t = req.t;\n\n        return {\n            webroot: webroot,\n            lang: lng,\n            title: `${t('title')} ${settings.version}`,\n            loading: t('loading')\n        };\n    }));\n\n    { // Error handling\n        app.use(errlog());\n        app.use(errclient({\n            error: 'XHR error'\n        }));\n        app.use(errnotfound({\n            view: path.join('common', '404.hogan'),\n            error: 'Not found'\n        }));\n        app.use(errserver({\n            view: path.join('common', '500.hogan'),\n            error: 'Internal server error'\n        }));\n    }\n\n    return app;\n};\n\nexport default appMain;\n","module.exports = require(\"compression\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"connect-restreamer\");","module.exports = require(\"consolidate\");","module.exports = require(\"express-jwt\");","module.exports = require(\"i18next-node-fs-backend\");","module.exports = require(\"method-override\");","module.exports = require(\"serve-favicon\");","module.exports = require(\"serve-static\");","module.exports = require(\"session-file-store\");","module.exports = require(\"rimraf\");","module.exports = require(\"registry-url\");","module.exports = require(\"registry-auth-token\");","module.exports = require(\"superagent\");","module.exports = require(\"deep-keys\");","module.exports = require(\"lodash/extend\");","module.exports = require(\"minimatch\");","module.exports = require(\"watch\");","module.exports = require(\"spawn-default-shell\");","module.exports = require(\"shortid\");","module.exports = require(\"lodash/some\");","module.exports = require(\"socket.io\");","module.exports = require(\"escodegen\");","module.exports = require(\"hull.js\");","module.exports = require(\"lodash/uniqBy\");","module.exports = require(\"three\");","module.exports = require(\"lodash/compact\");","module.exports = require(\"avrgirl-arduino\");","module.exports = __webpack_public_path__ + \"1a9a23f8958ef3213db16a3c3dd8fe5b.hex\";","module.exports = require(\"lodash/uniq\");","module.exports = require(\"range_check\");","\n/**\n * errclient\n *\n * Examples:\n *\n *     app.use(middleware.errclient({ error: 'XHR error' }))\n *\n * Options:\n *\n *   - error    error message\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nconst errclient = (options) => {\n    options = options || {};\n\n    let error = options.error || '';\n\n    return (err, req, res, next) => {\n        if (req.xhr) {\n            res.send(500, {\n                error: error\n            });\n            return;\n        }\n\n        next(err);\n    };\n};\n\nmodule.exports = errclient;\n","\n/**\n * errlog:\n *\n *   Write request and error information to stderr, loggly, or similar services.\n *\n * Examples:\n *\n *   app.use(middleware.errlog())\n *\n * @return {Function}\n * @api public\n */\n\nconst errlog = () => {\n    return (err, req, res, next) => {\n        console.error(err.stack);\n        next(err);\n    };\n};\n\nmodule.exports = errlog;\n","\n/**\n * errnotfound:\n *\n * Examples:\n *\n *     app.use(middleware.errnotfound({ view: '404', error: 'Not found' }))\n *\n * Options:\n *\n *   - view     view\n *   - error    error message\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nconst errnotfound = (options) => {\n    options = options || {};\n\n    let view = options.view || '404',\n        error = options.error || '';\n\n    return (req, res, next) => {\n        res.status(404);\n\n        // respond with html page\n        if (req.accepts('html')) {\n            res.render(view, { url: req.url });\n            return;\n        }\n\n        // respond with json\n        if (req.accepts('json')) {\n            res.send({ error: error });\n            return;\n        }\n\n        // default to plain-text. send()\n        res.type('txt').send(error);\n    };\n};\n\nmodule.exports = errnotfound;\n","\n/**\n * errserver:\n *\n * error-handling middleware, take the same form\n * as regular middleware, however they require an\n * arity of 4, aka the signature (err, req, res, next).\n * when connect has an error, it will invoke ONLY error-handling\n * middleware.\n *\n * If we were to next() here any remaining non-error-handling\n * middleware would then be executed, or if we next(err) to\n * continue passing the error, only error-handling middleware\n * would remain being executed, however here\n * we simply respond with an error page.\n *\n * Examples:\n *\n *     app.use(middleware.errserver({ view: '500', error: 'Internal server error' }))\n *\n * Options:\n *\n *   - view     view\n *   - error    error message\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nconst errserver = (options) => {\n    options = options || {};\n\n    let view = options.view || '500',\n        error = options.error || '';\n\n    return (err, req, res, next) => {\n        // we may use properties of the error object\n        // here and next(err) appropriately, or if\n        // we possibly recovered from the error, simply next().\n        res.status(err.status || 500);\n        res.render(view, { error: error });\n    };\n};\n\nmodule.exports = errserver;\n","import dns from 'dns';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport url from 'url';\nimport bcrypt from 'bcrypt-nodejs';\nimport chalk from 'chalk';\nimport ensureArray from 'ensure-array';\nimport expandTilde from 'expand-tilde';\nimport express from 'express';\nimport httpProxy from 'http-proxy';\nimport escapeRegExp from 'lodash/escapeRegExp';\nimport isEqual from 'lodash/isEqual';\nimport set from 'lodash/set';\nimport size from 'lodash/size';\nimport trimEnd from 'lodash/trimEnd';\nimport uniqWith from 'lodash/uniqWith';\nimport webappengine from 'webappengine';\nimport settings from './config/settings';\nimport app from './app';\nimport cncengine from './services/cncengine';\nimport monitor from './services/monitor';\nimport config from './services/configstore';\nimport { ensureString } from './lib/ensure-type';\nimport logger, { setLevel } from './lib/logger';\nimport urljoin from './lib/urljoin';\n\nconst log = logger('init');\n\nconst createServer = (options, callback) => {\n    options = { ...options };\n\n    { // verbosity\n        const verbosity = options.verbosity;\n\n        // https://github.com/winstonjs/winston#logging-levels\n        if (verbosity === 1) {\n            set(settings, 'verbosity', verbosity);\n            setLevel('verbose');\n        }\n        if (verbosity === 2) {\n            set(settings, 'verbosity', verbosity);\n            setLevel('debug');\n        }\n        if (verbosity === 3) {\n            set(settings, 'verbosity', verbosity);\n            setLevel('silly');\n        }\n    }\n\n    const rcfile = path.resolve(options.configFile || settings.rcfile);\n\n    // configstore service\n    log.info(`Loading configuration from ${chalk.yellow(JSON.stringify(rcfile))}`);\n    config.load(rcfile);\n\n    // rcfile\n    settings.rcfile = rcfile;\n\n    { // secret\n        if (!config.get('secret')) {\n            // generate a secret key\n            const secret = bcrypt.genSaltSync(); // TODO: use a strong secret\n            config.set('secret', secret);\n        }\n\n        settings.secret = config.get('secret', settings.secret);\n    }\n\n    { // watchDirectory\n        const watchDirectory = options.watchDirectory || config.get('watchDirectory');\n\n        if (watchDirectory) {\n            if (fs.existsSync(watchDirectory)) {\n                log.info(`Watching ${chalk.yellow(JSON.stringify(watchDirectory))} for file changes`);\n\n                // monitor service\n                monitor.start({ watchDirectory: watchDirectory });\n            } else {\n                log.error(`The directory ${chalk.yellow(JSON.stringify(watchDirectory))} does not exist.`);\n            }\n        }\n    }\n\n    { // accessTokenLifetime\n        const accessTokenLifetime = options.accessTokenLifetime || config.get('accessTokenLifetime');\n\n        if (accessTokenLifetime) {\n            set(settings, 'accessTokenLifetime', accessTokenLifetime);\n        }\n    }\n\n    { // allowRemoteAccess\n        const allowRemoteAccess = options.allowRemoteAccess || config.get('allowRemoteAccess', false);\n\n        if (allowRemoteAccess) {\n            if (size(config.get('users')) === 0) {\n                log.warn('You\\'ve enabled remote access to the server. It\\'s recommended to create an user account to protect against malicious attacks.');\n            }\n\n            set(settings, 'allowRemoteAccess', allowRemoteAccess);\n        }\n    }\n\n    const { port = 0, host, backlog } = options;\n    const mountPoints = uniqWith([\n        ...ensureArray(options.mountPoints),\n        ...ensureArray(config.get('mountPoints'))\n    ], isEqual).filter(mount => {\n        if (!mount || !mount.route || mount.route === '/') {\n            log.error(`Must specify a valid route path ${JSON.stringify(mount.route)}.`);\n            return false;\n        }\n\n        return true;\n    });\n    const routes = [];\n\n    mountPoints.forEach(mount => {\n        if (ensureString(mount.target).match(/^(http|https):\\/\\//i)) {\n            log.info(`Starting a proxy server to proxy all requests starting with ${chalk.yellow(mount.route)} to ${chalk.yellow(mount.target)}`);\n\n            routes.push({\n                type: 'server',\n                route: mount.route,\n                server: (options) => {\n                    const { route = '/' } = { ...options };\n                    const routeWithoutTrailingSlash = trimEnd(route, '/');\n                    const target = mount.target;\n                    const targetPathname = url.parse(target).pathname;\n                    const proxyPathPattern = new RegExp('^' + escapeRegExp(urljoin(targetPathname, routeWithoutTrailingSlash)), 'i');\n\n                    log.debug(`> route=${chalk.yellow(route)}`);\n                    log.debug(`> routeWithoutTrailingSlash=${chalk.yellow(routeWithoutTrailingSlash)}`);\n                    log.debug(`> target=${chalk.yellow(target)}`);\n                    log.debug(`> targetPathname=${chalk.yellow(targetPathname)}`);\n                    log.debug(`> proxyPathPattern=RegExp(${chalk.yellow(proxyPathPattern)})`);\n\n                    const proxy = httpProxy.createProxyServer({\n                        // Change the origin of the host header to the target URL\n                        changeOrigin: true,\n\n                        // Do not verify the SSL certificate for self-signed certs\n                        //secure: false,\n\n                        target: target\n                    });\n\n                    proxy.on('proxyReq', (proxyReq, req, res, options) => {\n                        const originalPath = proxyReq.path || '';\n                        proxyReq.path = originalPath\n                            .replace(proxyPathPattern, targetPathname)\n                            .replace('//', '/');\n\n                        log.debug(`proxy.on('proxyReq'): modifiedPath=${chalk.yellow(proxyReq.path)}, originalPath=${chalk.yellow(originalPath)}`);\n                    });\n\n                    proxy.on('proxyRes', (proxyRes, req, res) => {\n                        log.debug(`proxy.on('proxyRes'): headers=${JSON.stringify(proxyRes.headers, true, 2)}`);\n                    });\n\n                    const app = express();\n\n                    // Matched routes:\n                    //   /widget/\n                    //   /widget/v1/\n                    app.all(urljoin(routeWithoutTrailingSlash, '*'), (req, res) => {\n                        const url = req.url;\n                        log.debug(`proxy.web(): url=${chalk.yellow(url)}`);\n                        proxy.web(req, res);\n                    });\n\n                    // Matched routes:\n                    //   /widget\n                    app.all(routeWithoutTrailingSlash, (req, res, next) => {\n                        const url = req.url;\n                        // Redirect URL with a trailing slash\n                        if (url.indexOf(routeWithoutTrailingSlash) === 0 &&\n                            url.indexOf(routeWithoutTrailingSlash + '/') < 0) {\n                            const redirectUrl = routeWithoutTrailingSlash + '/' + url.slice(routeWithoutTrailingSlash.length);\n                            log.debug(`redirect: url=${chalk.yellow(url)}, redirectUrl=${chalk.yellow(redirectUrl)}`);\n                            res.redirect(301, redirectUrl);\n                            return;\n                        }\n\n                        next();\n                    });\n\n                    return app;\n                }\n            });\n        } else {\n            // expandTilde('~') => '/Users/<userhome>'\n            const directory = expandTilde(ensureString(mount.target)).trim();\n\n            log.info(`Mounting a directory ${chalk.yellow(JSON.stringify(directory))} to serve requests starting with ${chalk.yellow(mount.route)}`);\n\n            if (!directory) {\n                log.error(`The directory path ${chalk.yellow(JSON.stringify(directory))} must not be empty.`);\n                return;\n            }\n            if (!path.isAbsolute(directory)) {\n                log.error(`The directory path ${chalk.yellow(JSON.stringify(directory))} must be absolute.`);\n                return;\n            }\n            if (!fs.existsSync(directory)) {\n                log.error(`The directory path ${chalk.yellow(JSON.stringify(directory))} does not exist.`);\n                return;\n            }\n\n            routes.push({\n                type: 'static',\n                route: mount.route,\n                directory: directory\n            });\n        }\n    });\n\n    routes.push({\n        type: 'server',\n        route: '/',\n        server: () => app()\n    });\n\n    webappengine({ port, host, backlog, routes })\n        .on('ready', (server) => {\n            // cncengine service\n            cncengine.start(server, options.controller || config.get('controller', ''));\n\n            const address = server.address().address;\n            const port = server.address().port;\n\n            callback && callback(null, {\n                address,\n                port,\n                mountPoints,\n            });\n\n            if (address !== '0.0.0.0') {\n                log.info('Starting the server at ' + chalk.yellow(`http://${address}:${port}`));\n                return;\n            }\n\n            dns.lookup(os.hostname(), { family: 4, all: true }, (err, addresses) => {\n                if (err) {\n                    log.error('Can\\'t resolve host name:', err);\n                    return;\n                }\n\n                addresses.forEach(({ address, family }) => {\n                    log.info('Starting the server at ' + chalk.yellow(`http://${address}:${port}`));\n                });\n            });\n        })\n        .on('error', (err) => {\n            callback && callback(err);\n            log.error(err);\n        });\n};\n\nexport {\n    createServer\n};\n","module.exports = require(\"errorhandler\");","module.exports = require(\"hogan.js\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AADA;AADA;AAFA;AACA;AAQA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AApHA;AACA;AAqHA;AAEA;;;;;;;ACzIA;AACA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;ACZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AChDA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;ACxEA;AACA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;;ACjGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;;;;;ACdA;AACA;AAKA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AATA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAAA;AAAA;AACA;;;;;;;;ACxOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AATA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;;;;;;;;;;;;;;;AC5NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAHA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAQA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;;;;;;;;ACjMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AATA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;;;;;;;;;;;;AC/OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AATA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;AC5OA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAJA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AATA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;;;;;AChUA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AADA;AAGA;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACZA;;;;;;;ACCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AANA;AASA;AACA;AAFA;AAbA;AAqBA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AAGA;AAAA;AACA;AACA;AAFA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AACA;AAsCA;;AC1CA;AAEA;AACA;AADA;AAIA;AAEA;;;;;;ACTA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;;ACCA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;ACvBA;;;;;;ACAA;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAhDA;AACA;AAiDA;;AC1DA;AAEA;AAEA;;;;;;ACLA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AACA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAjCA;AACA;AAkCA;;ACrCA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AA7BA;AA+BA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;;;;;;ACvEA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAjBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;ACvDA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;AACA;AAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAKA;AAGA;AAkBA;AACA;AACA;AAFA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;AAiBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AApJA;AACA;AAqJA;AACA;;;;ACnLA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AAFA;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAaA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7JA;AACA;AA8JA;;;;ACjKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAxBA;AACA;AAyBA;AAUA;AAAA;AACA;AADA;AACA;AADA;AANA;AAAA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArFA;AACA;AAsFA;AACA;AAuBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AACA;AADA;AAvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AAuBA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAezaA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAtDA;AACA;AAuDA;;AC/DA;AACA;AACA;AACA;AACA;;ACJA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3RA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;ACrHA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA7CA;AA+CA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AApBA;AACA;AAuBA;AACA;AACA;AACA;;;;;;;;;;AC5BA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;;;ACbjLA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAdA;AACA;AAeA;;AChBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAhBA;AACA;AAiBA;;ACnBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAhBA;AACA;AAiBA;;;;;;;;;;ACnBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAJA;AAQA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAOA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAQA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAQA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;;ACznBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAhEA;AACA;AAiEA;;AC7EA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AA/CA;AACA;AAgDA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAlBA;AACA;AAmBA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAlBA;AACA;AAmBA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAlBA;AACA;AAmBA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAlBA;AACA;AAmBA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AApBA;AACA;AAqBA;;;;ACrBA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AAlBA;AACA;AAmBA;;ACtBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AA5BA;AACA;AA6BA;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AAGA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AAGA;AAGA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AAtEA;AACA;AAuEA;;;;;;;;;;;;;AC1FA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAfA;AAiBA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAVA;AAWA;AACA;AACA;AAdA;AAlBA;AACA;AAFA;AAsCA;AACA;AAEA;AAJA;AACA;AAtCA;AAAA;AACA;AA8CA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAFA;AAFA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAHA;AAFA;AACA;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAFA;AACA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAFA;AAFA;AACA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AAFA;AAFA;AACA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AA3NA;AACA;AA4NA;;AChPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAkBA;AACA;AAOA;AACA;AAcA;AACA;AAaA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;ACnHA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;ACtCA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;AClEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AA+BA;AAiCA;AAGA;AAGA;AAGA;AAGA;AAGA;AAIA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AA/EA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAzBA;AACA;AA+EA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AApCA;AACA;AAAA;AACA;AACA;AAHA;AAIA;AAEA;AACA;AAAA;AACA;AACA;AAVA;AACA;AAoCA;AAxBA;AACA;AACA;AAHA;AACA;AAwBA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAJA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AAFA;AAFA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AA9BA;AACA;AAiCA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAnEA;AAqEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAFA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArGA;AAuaA;AACA;AA3CA;AAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AADA;AAbA;AAiBA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AACA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAvBA;AAAA;AAAA;AACA;AADA;AAAA;AAuhBA;AACA;AAgiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAzpDA;AACA;AA0pDA;;;;;;AChtDA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAjBA;AACA;AAkBA;;ACnBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAjBA;AACA;AAkBA;;ACnBA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAlDA;AACA;AAmDA;;ACpDA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAfA;AACA;AAgBA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AA7BA;AACA;AA8BA;;ACjCA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAfA;AACA;AAgBA;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AAGA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AArCA;AACA;AAsCA;;;;;;;;;;;AC/CA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAVA;AAWA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAvBA;AACA;AAFA;AACA;AADA;AAAA;AACA;AA8BA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AANA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAFA;AACA;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7HA;AACA;AA8HA;;ACzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AA+BA;AA0BA;AAGA;AAGA;AAKA;AAGA;AAGA;AA6BA;AA4BA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AA/HA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAzBA;AACA;AA+HA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AApFA;AACA;AACA;AACA;AACA;AACA;AAEA;AARA;AACA;AAoFA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AArDA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AACA;AAqDA;AA1BA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAJA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxGA;AACA;AA2GA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAtDA;AAwDA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAFA;AACA;AAIA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA1DA;AA4DA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAaA;AACA;AAjCA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AADA;AAbA;AAiBA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAOA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AACA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAzbA;AACA;AA2bA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAh7CA;AACA;AAi7CA;;AC/9CA;AACA;;;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAIA;AACA;AAAA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AADA;AACA;AACA;AAAA;AACA;AACA;AApBA;AACA;AAJA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AAsCA;AACA;AAAA;AACA;AACA;AACA;AA1CA;AACA;AA2CA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AALA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AACA;AAQA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlYA;AACA;AAmYA;;AC9aA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAdA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AALA;AAWA;AACA;AACA;AACA;AACA;AAFA;AAGA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AAAA;AAEA;AACA;AALA;AAOA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AADA;AA1CA;AA8CA;AAAA;AACA;AADA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAKA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAVA;AAaA;AACA;AACA;AAEA;AACA;AAEA;AACA;AARA;AArDA;AAtFA;;;;;;;;;;;;;ACbA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;AACA;AAAA;AAGA;AACA;AADA;AAJA;;;;;;;ACCA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AALA;AADA;AASA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAtBA;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AANA;AADA;AAUA;AACA;AAAA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAvBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAPA;AACA;AAQA;AACA;AAEA;AAAA;AACA,iBAYA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAIA;AACA;AACA;AAEA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AACA;AAcA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAJA;AAVA;AAiBA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AAAA;AAAA;AAAA;AAqCA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;;;;;;;AC9WA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACAA;;;;;;ACCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAPA;AAUA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAnEA;AAqEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACnQA;;;;;;ACAA;;;A","sourceRoot":""}